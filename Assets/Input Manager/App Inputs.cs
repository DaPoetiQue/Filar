//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input Manager/App Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AppInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AppInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""App Inputs"",
    ""maps"": [
        {
            ""name"": ""Touch Inputs"",
            ""id"": ""e0de10f2-3744-40c4-8893-c9341b520542"",
            ""actions"": [
                {
                    ""name"": ""Double Tap"",
                    ""type"": ""Value"",
                    ""id"": ""61007f56-9c13-4b9d-9abc-60f76c23afd6"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapDelay=0.5,tapCount=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press And Hold"",
                    ""type"": ""Value"",
                    ""id"": ""a15fdaca-eaec-4780-9cfa-1156ce89d8b6"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d94b6de9-a6c0-4769-9aca-261c249e864f"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Double Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb2064f-b11c-460b-b0a3-d2047a6a4fcc"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Hold(duration=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Touch Screen"",
                    ""action"": ""Press And Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch Screen"",
            ""bindingGroup"": ""Touch Screen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Touch Inputs
        m_TouchInputs = asset.FindActionMap("Touch Inputs", throwIfNotFound: true);
        m_TouchInputs_DoubleTap = m_TouchInputs.FindAction("Double Tap", throwIfNotFound: true);
        m_TouchInputs_PressAndHold = m_TouchInputs.FindAction("Press And Hold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch Inputs
    private readonly InputActionMap m_TouchInputs;
    private ITouchInputsActions m_TouchInputsActionsCallbackInterface;
    private readonly InputAction m_TouchInputs_DoubleTap;
    private readonly InputAction m_TouchInputs_PressAndHold;
    public struct TouchInputsActions
    {
        private @AppInputs m_Wrapper;
        public TouchInputsActions(@AppInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @DoubleTap => m_Wrapper.m_TouchInputs_DoubleTap;
        public InputAction @PressAndHold => m_Wrapper.m_TouchInputs_PressAndHold;
        public InputActionMap Get() { return m_Wrapper.m_TouchInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchInputsActions set) { return set.Get(); }
        public void SetCallbacks(ITouchInputsActions instance)
        {
            if (m_Wrapper.m_TouchInputsActionsCallbackInterface != null)
            {
                @DoubleTap.started -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnDoubleTap;
                @DoubleTap.performed -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnDoubleTap;
                @DoubleTap.canceled -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnDoubleTap;
                @PressAndHold.started -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnPressAndHold;
                @PressAndHold.performed -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnPressAndHold;
                @PressAndHold.canceled -= m_Wrapper.m_TouchInputsActionsCallbackInterface.OnPressAndHold;
            }
            m_Wrapper.m_TouchInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DoubleTap.started += instance.OnDoubleTap;
                @DoubleTap.performed += instance.OnDoubleTap;
                @DoubleTap.canceled += instance.OnDoubleTap;
                @PressAndHold.started += instance.OnPressAndHold;
                @PressAndHold.performed += instance.OnPressAndHold;
                @PressAndHold.canceled += instance.OnPressAndHold;
            }
        }
    }
    public TouchInputsActions @TouchInputs => new TouchInputsActions(this);
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("Touch Screen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    public interface ITouchInputsActions
    {
        void OnDoubleTap(InputAction.CallbackContext context);
        void OnPressAndHold(InputAction.CallbackContext context);
    }
}
