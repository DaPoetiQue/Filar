using Dummiesman;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using TMPro;
using Unity.Collections;
using Unity.Jobs;
using Unity.Burst;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.InputSystem.EnhancedTouch;
using UnityEngine.UI;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;
using System.IO.Compression;
using Touch = UnityEngine.InputSystem.EnhancedTouch.Touch;
using UnityEngine.AddressableAssets;
using UnityEngine.AddressableAssets.ResourceLocators;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.Events;

namespace Com.RedicalGames.Filar
{

    public class AppData
    {
        [Serializable]
        public class OptionalDataTypeLibrary
        {
            // Move All Enums Here...........
        }

        #region Data Types

        public enum AssetFieldType
        {
            None,
            OBJFile,
            Thumbnail,
            MainTexture,
            NormalMap,
            AmbientOcclusionMap,
            MTLFile,
            Image,
            HDRI
        }

        public enum FileExtensionType
        {
            OBJ,
            PNG,
            JPG,
            JPEG,
            MTL,
            JSON,
            FBS,
            GLB,
            GLTF,
            AUTH,
            DAT,
            LIC,
            NONE
        }

        public enum SceneAssetScaleDirection
        {
            None,
            Up,
            Down
        }

        public enum AssetCategoryType : int
        {
            None = 0,
            Animals = 1,
            Aircraft = 2,
            Architectural = 3,
            Car = 4,
            Character = 5,
            Exterior = 6,
            Furniture = 7,
            Household = 8,
            Industrial = 9,
            Interior = 10,
            Space = 11,
            Vehicle = 12,
        }

        public enum ProjectCategoryType : int
        {
            Project_All = 0,
            Project_3D = 1,
            Project_AR = 2,
            Project_VR = 3
        }

        public enum SortType : int
        {
            Ascending = 0,
            Category = 1,
            Descending = 2,
            DateModified = 3
        }

        public enum RuntimeInputs
        {
            Mobile,
            PC,
            Editor
        }

        public enum ImageExtension
        {
            none,
            png,
            jpeg,
            jpg
        }

        public enum WidgetType
        {
            None,
            ConfirmationPopUpWidget,
            SliderValueWidget,
            WarningPromptWidget,
            SceneAssetPreviewWidget,
            SceneAssetPropertiesWidget,
            AssetImportWidget,
            PermissionsRequestWidget,
            DeleteAssetWidget,
            SceneAssetExportWidget,
            RenderSettingsWidget,
            AssetPublishingWidget,
            NetworkNotificationWidget,
            ColorPickerWidget,
            SnapShotWidget,
            FolderCreationWidget,
            FileSelectionOptionsWidget,
            ScrollerNavigationWidget,
            UITextDisplayerWidget,
            PagerNavigationWidget,
            UIAssetActionWarningWidget,
            UIAssetRenameWidget,
            SelectionOptionsWidget,
            SelectedFileCopyOptionsWidget,
            LoadingWidget,
            UserHelpScreenWidget,
            AssetInfoWidget,
            CreateNewProjectWidget,
            ProjectCreationWarningWidget,
            HomeMenuWidget,
            MessageDisplayerWidget,
            SignInWidget,
            SignInWarningWidget,
            AnonymousSignInConfirmationWidget,
            TermsAndConditionsWidget,
            PostsWidget,
            ImageDisplayerWidget,
            TitleDisplayerWidget
        }

        public enum SubWidgetType
        {
            None,
            SingleAssetDeleteWidget,
            MultipleAssetsDeleteWidget
        }

        public enum AssetFieldSettingsType
        {
            None,
            NormalMapSettings,
            AOMapSettings,
            MainTextureSettings
        }

        public enum InputActionButtonType
        {
            ConfirmationButton,
            Cancel,
            OpenPopUp,
            CloseButton,
            Undo,
            Edit,
            Delete,
            Hide,
            Remove,
            Info,
            Add,
            CreateNewAsset,
            BuildNewAsset,
            OpenFilePicker_OBJ,
            OpenFilePicker_Thumbnail,
            OpenFilePicker_MainTexture,
            OpenFilePicker_NormalMap,
            OpenFilePicker_AOMap,
            Return,
            OpenSceneAssetPreview,
            OpenARView,
            ResetAssetPreviewPose,
            OpenProject,
            PlaceItemInAR,
            CaptureSnapShot,
            ExportAsset,
            OpenRenderSettings,
            PublishAsset,
            HideNavigationScreenWidget,
            OpenColorPicker,
            CreateNewProfileButton,
            ClearAllButton,
            DuplicateButton,
            ColorPickerButton,
            CreateNewColorButton,
            RevertSettingsButton,
            UndoActionButton,
            RedoActionButton,
            ImportColorButton,
            OpenFilePicker_Image,
            ClearButton,
            GenerateColorSwatchButton,
            RetryButton,
            OpenColorPromptWidget,
            Randomize,
            VoiceInputButton,
            SkyboxSelectionButton,
            CreateSkyboxButton,
            OpenFilePicker_HDRI,
            CreateNewFolderButton,
            LayoutViewButton,
            OpenFolderButton,
            FolderReturnButton,
            Copy_PasteButton,
            Show_HideButton,
            ScrollToTopButton,
            RefreshButton,
            PaginationButton,
            GoToSelectedScreen,
            ScrollToBottomButton,
            NextNavigationButton,
            PreviousNavigationButton,
            PinButton,
            FolderActionButton,
            RenameButton,
            ReplaceButton,
            SelectionOptionsButton,
            SelectionButton,
            DeselectButton,
            HelpButton,
            MoveUISelectionButton,
            ClipboardButton,
            CreateNewProjectButton,
            OpenProjectButton,
            OpenProjectFolderButton,
            GoToScreenButton,
            OpenScreenSettingsButton,
            GoToHomeButton,
            OpenProfileButton,
            OpenInboxButton,
            SignInButton,
            SignUpButton,
            SignInViewChangeButton,
            AnonymousSignInButton,
            ReadButton,
            OfflineModeButton,
            GoToWebsiteLinkButton,
            ShowPostsButton,
            HidePostsButton,
            SelectPostButton,
            None
        }

        public enum ScreenLoadTransitionType
        {
            None,
            Default,
            Translate,
            LoadingScreen
        }

        public enum SelectionVisualizationType
        {
            None,
            ColorTint,
            ImageSwap,
            SelectionFrame
        }


        public enum LockState
        {
            Default,
            Locked,
            Unlocked
        }

        public enum InputUIState
        {
            Normal,
            Enabled,
            Disabled,
            Selected,
            Deselected,
            Shown,
            Hidden,
            Deselect,
            Hovered,
            Highlighted,
            Focused,
            Pressed,
            Pinned
        }

        public enum SettingsWidgetType
        {
            MainColorSettingsWidget,
            ColorSettingsImportWidget,
            CustomSwatchConfirmationWidget,
            ColorGeneratorInfoWidget,
            LoadingSpinnerWidget,
            ScreenWarningInfoWidget,
            ColorPickerPromptWidget,
            SkyboxCreationWidget
        }

        public enum NavigationTabID
        {
            LightSettings,
            PostProcessingSettings,
            RenderingSettings,
            PropertiesSettings,
            Default
        }

        public enum NavigationWidgetVisibilityState
        {
            Hide,
            Show
        }

        public enum NavigationTabType
        {
            CreateRenderProfileWidget,
            ColorPalletWidget,
            SkyboxCreationWidget,
            None
        }

        public enum NavigationRenderSettingsProfileID
        {
            None,
            Bloom,
            Color_Grading,
            Noise,
            Ambient_Occlusion
        }

        public enum ScreenFadeModeType
        {
            Default,
            OnShowScreen,
            OnHideScreen
        }

        public enum InputDropDownActionType
        {
            FilterList,
            SceneAssetRenderMode,
            SortingList,
            ExtensionsList,
            RenderingProfileType,
            SwatchPicker,
            ColorPickerSelection,
            ColorModeSelection,
            SettingsSelectionType,
            RotationalDirection,
            ProjectType,
            ProjectTamplate,
            None
        }

        public enum InputFieldActionType
        {
            AssetDescriptionField,
            AssetNameField,
            AssetSearchField,
            UserNameField,
            UserEmailField,
            UserPasswordField,
            XRotationPropertyField,
            YRotationPropertyField,
            ZRotationPropertyField,
            ColorValueField,
            ColorHexidecimalField,
            ColorReferenceImageURLField,
            ColorPromptField,
            InputPageNumberField,
            None
        }

        public enum CheckboxInputActionType
        {
            DontShowAgain,
            ToggleAssetField,
            TriangulateWireframe,
            ToggleColorDropPicker,
            ToggleVoiceInput,
            InverseSelection,
            RememberUserProfileOption,
            AcceptTermsAndConditionsOption,
            RecieveNewsAndUpdatesOption,
            None
        }

        public enum InputSliderActionType
        {
            None,
            RedColorChannelField,
            GreenColorChannelField,
            BlueColorChannelField,
            AlphaColorChannelField
        }

        public enum SettingsWidgetTabID
        {
            Swatches,
            Gradient,
            Lighting,
            ColorInfo,
            General
        }

        public enum ColorSpaceType
        {
            RGBA,
            RGB,
            HSV
        }

        public enum ColorPickerType
        {
            Swatches,
            Gradient
        }

        public enum SkyboxSettingsType
        {
            Lighting,
            ColorInfo,
            General
        }

        public enum RotationalDirection
        {
            Clockwise,
            AntiClockwise
        }

        public enum InputSliderValueType
        {
            InputField,
            Slider
        }

        public enum ToggleActionType
        {
            ThumbnailState,
            MainTextureState,
            NormalMapState,
            AOState
        }

        public enum ScreenTextType
        {
            ErrorNotification,
            ResultsNotFound,
            Toaster,
            WarningNotification,
            TitleDisplayer,
            MessageDisplayer,
            FileCountDisplayer,
            DateTimeDisplayer,
            InfoDisplayer,
            NavigationRootTitleDisplayer,
            PageCountDisplayer,
            TypeDisplayer,
            None
        }

        public enum SliderValueType
        {
            MaterialBumpScaleValue,
            MaterialGlossinessValue,
            MaterialOcclusionIntensityValue,
            SceneAssetScale,
            ColorValue,
            LightIntensity,
            SkyboxExposure,
            SkyboxRotationSpeed,
            None
        }

        public enum ScreenImageType
        {
            None,
            Thumbnail,
            ScreenSnap,
            Splash,
            SelectionFrame
        }

        public enum UIStateType
        {
            Default,
            InteractivityState,
            VisibilityState
        }

        public enum ColorValueType
        {
            None,
            Red,
            Green,
            Blue,
            Alpha,
            Hexidecimal,
            Hue,
            Saturation,
            Value
        }

        public enum InputType : int
        {
            None = 0,
            Button = 1,
            Checkbox = 2,
            InputField = 3,
            Slider = 4,
            InputSlider = 5,
            DropDown = 6,
            Text = 7,
            Image = 8
        }

        public enum ScreenType
        {
            None,
            Any,
            Default,
            ProjectDashboardScreen,
            ContentImportExportScreen,
            ARViewScreen,
            ProjectCreationScreen,
            LandingPageScreen,
            LoadingScreen,
            SplashScreen,     
        }

        public enum ContentContainerType
        {
            ARPreview,
            AssetImport,
            AssetPreview,
            FocusContentView,
            RenderProfileContent,
            ColorSwatches,
            SkyboxContent,
            FolderStuctureContent,
            ProjectSelectionContent,
            ScreenWidgetsContainer,
            CachedWidgetsContainer,
            SceneContentsContainer,
            CachedContentsContainer,
            AppScreenContainer,
            ScreenWidgetContainer,
            ScreenTitleContainer,
            LoadingStatusWidgetContainer,
            None
        }

        public enum LoadingItemType
        {
            Bar,
            Spinner,
            Text
        }

        public enum TutorialInfoType
        {
            SelectionOptionsNavigation,
            CopyOptionsNavigation
        }

        // Rename To Proper Types.
        public enum ColorSwatchType
        {
            Default,
            Custom
        }

        public enum DirectionType
        {
            Up,
            Down,
            Left,
            Right,
            Default
        }

        public enum DirectionAxisType
        {
            None,
            Horizontal,
            Vertical
        }

        public enum OrientationType
        {
            Vertical,
            Horizontal,
            VerticalGrid,
            HorizontalGrid,
            None
        }

        public enum StorageType
        {
            None,
            Default_App_Storage,
            Object_Asset_Storage,
            Image_Asset_Storage,
            Meta_File_Storage,
            Settings_Storage,
            Project_Structure,
            Sub_Folder_Structure,
            App_Information,
            App_Cache_Storage
        }

        public enum AssetModeType
        {
            None,
            CreateMode,
            EditMode,
            PreviewMode,
            ARMode
        }

        public enum InfoDisplayerFieldType
        {
            None,
            Title,
            TriangleCounter,
            VerticesCounter
        }

        public enum MaterialTextureType
        {
            MainTexture,
            NormalMapTexture,
            AOMapTexture
        }

        public enum SceneAssetRenderMode
        {
            Shaded,
            Wireframe
        }

        public enum PreviewOrbitWidgetType
        {
            SceneAssetOrbitWidget,
            SkyboxOrbitWidget
        }

        public enum RendererMaterialType
        {
            DefaultMaterial,
            SelectionMaterial,
            SelectionWireframeMaterial,
            TriangulatedWireframeMaterial,
            WireframeMaterial
        }

        public enum SceneEventCameraType
        {
            None,
            ARViewCamera,
            AssetPreviewCamera
        }

        public enum TransitionType
        {
            None,
            Default,
            Translate
        }

        public enum BuildType
        {
            Runtime,
            Editor
        }

        public enum RuntimeExecution
        {
            InspectorModePanSpeed,
            PreviewModeOrbitSpeed,
            ARModeTranslateSpeed,
            ARModeRotateSpeed,
            ARModeScaleSpeed,
            ARModeAsseScaleDeviderValue,
            InspectorModeAsseScaleDeviderValue,
            PreviewModeAsseScaleDeviderValue,
            DefaultScreenRefreshDuration,
            DefaultAssetCreationYieldValue,
            PreviewWidgetOrbitSpeed,
            NotificationTransitionalSpeed,
            NotificationDelay,
            NotificationDuration,
            ScreenWidgetTransitionalSpeed,
            ScreenWidgetTransitionalSnapSpeed,
            ScreenWidgetShowDelayValue,
            ScreenWidgetHideDelayValue,
            ScrollToFocusedPositionSpeedValue,
            EdgeScrollSpeedValue,
            ScrollToTopSpeedValue,
            ScrollbarFadeInSpeed,
            ScrollbarFadeOutSpeed,
            ScrollBarFadeDelayDuration,
            HighlightHoveredFolderDistance,
            SnapDraggedWidgetToHoveredFolderDistance,
            SplashScreenFadeInDuration,
            SplashScreenFadeOutDuration,
            OnSplashScreenExitDelay,
            OnScreenChangedExitDelay,
            LoadingScreenFadeInDuration,
            LoadingScreenFadeOutDuration,
            LandingPageScreenFadeInDuration,
            LandingPageScreenFadeOutDuration,
            ProjectCreationScreenFadeInDuration,
            ProjectCreationScreenFadeOutDuration,
            ProjectDashboardScreenFadeInDuration,
            ProjectDashboardScreenFadeOutDuration,
            ContentImportExportScreenFadeInDuration,
            ContentImportExportScreenFadeOutDuration,
            ARViewScreenFadeInDuration,
            ARViewScreenFadeOutDuration,
            NetworkInitializationDefaultDuration,
            DefaultAppTimeout,
            ScreenWidgetTranslateTransitionalSpeed,
            ScreenWidgetScaleTransitionalSpeed,
            SplashImageChangeEventInterval,
            None
        }

        public enum EventCameraState
        {
            FocusedMode,
            InspectorMode
        }

        public enum SceneMode
        {
            None,
            ARMode,
            PreviewMode,
            EditMode,
        }

        public enum AppMode
        {
            None,
            Online,
            Offline
        }

        public enum PermissionType
        {
            None,
            Camera,
            Storage
        }

        public enum TogglableWidgetType
        {
            None,
            ResetAssetModelRotationButton
        }

        public enum SceneAssetInteractableMode
        {
            All,
            Rotation,
            Orbit
        }

        public enum SceneARSessionState
        {
            None,
            TrackingFound,
            TrackingInProgress,
            TrackingLost,
            AssetPlaced
        }

        public enum ARSceneContentState
        {
            None,
            Place,
            Remove
        }

        public enum SceneAssetPivot
        {
            BottomCenter,
            BottomLeft,
            BottomRight,
            MiddleCenter,
            TopCenter,
            TopLeft,
            TopRight
        }

        public enum ExportExtensionType
        {
            GLTF2_0,
            FBX,
            OBJ
        }

        public enum ShaderType
        {
            Default,
            Sculpting,
            Skybox,
            Wireframe
        }

        // --> Add This Manualy To List In Scene Assets Manager.
        public enum DropDownContentType
        {
            AssetCategory,
            Extensions,
            Sorting,
            RenderingModes,
            RenderProfiles,
            ColorSpaces,
            ColorPickers,
            SkyboxSettings,
            Directions,
            ProjectCategory,
            ProjectType,
            None
        }

        public enum ScreenUIPlacementType
        {
            Default,
            Background,
            ForeGround,
            None

        }

        public enum ScreenViewState
        {
            None,
            Blurred,
            Focused,
            Overlayed
        }

        public enum NotificationType
        {
            Info,
            Objectives,
            Tooltip,
            Hints
        }

        public enum AudioType
        {
            CameraShutter
        }

        public enum UIScreenAssetType
        {
            File,
            Folder
        }

        public enum InputFieldValueType
        {
            String,
            Integer
        }

        public enum FolderStructureType
        {
            RootFolder,
            SubFolder
        }

        public enum LayoutViewType : int
        {
            ItemView = 0,
            ListView = 1,
            Default = 2
        }

        public enum PaginationViewType
        {
            Pager,
            Scroller
        }

        public enum PaginationNavigationActionType
        {
            GoToNextPage,
            GoToPreviousPage
        }

        public enum UIImageDisplayerType
        {
            InputIcon,
            ItemThumbnail,
            SelectionFrame,
            ActionIcon,
            ItemIcon,
            InteractionIcon,
            BadgeIcon,
            NotificationIcon,
            PinnedIcon,
            LockIcon,
            TintComponent,
            BlurComponent,
            None
        }

        public enum UIImageType
        {
            ItemViewIcon,
            ListViewIcon,
            HomeIcon,
            ReturnIcon,
            CancelIcon,
            FolderIcon,
            EmptyFolderIcon,
            MultiFilesFolderIcon,
            PagerIcon,
            ScrollerIcon,
            UIWidget_MoveIcon,
            Null_TransparentIcon,
            PinEnabledIcon,
            PinDisabledIcon,
            ItemViewSelectionIcon,
            ItemViewDeselectionIcon,
            ListViewSelectionIcon,
            ListViewDeselectionIcon,
            LockedIcon,
            UnlockedIcon,
            ImagePlaceholder
        }

        public enum SelectableWidgetType
        {
            Asset,
            Folder,
            Project,
            PlaceHolder,
            Post,
            None
        }

        public enum SelectionOption
        {
            Default,
            SelectAll,
            SelectPage
        }

        public enum FocusedWidgetOrderType
        {
            First,
            Last,
            Default
        }

        public enum UIScreenWidgetVisibilityState
        {
            None,
            Visible,
            Hidden
        }

        public enum DefaultUIWidgetActionState
        {
            Default,
            Pinned,
            Hidden
        }

        public enum FocusedSelectionType
        {
            Default,
            SelectedItem,
            NewItem,
            HoveredItem,
            InteractedItem,
            ModifiedItem
        }

        public enum LogInfoChannel
        {
            All,
            Debug,
            Success,
            Error,
            Warning,
            None
        }

        public enum LogExceptionType
        {
            All,
            Exception,
            NullReference,
            Argument,
            ArgumentNull,
            ArgumentOutOfRange,
            AccessViolation,
            IndexOutOfRange,
            EntryPointNotFound,
            NotImplemented,
            MissingField,
            DllNotFound,
            Aggregate,
            MissingComponent,
            None
        }

        public enum LogAttributeType
        {
            Class,
            Function,
            LogMessage,
            Symbols,
            None
        }


        public enum ValidationResultsType
        {
            None,
            Default,
            Success,
            Warning,
            Error
        }

        public enum ProjectType
        {
            Project_AR,
            Project_3D,
            Project_VR
        }

        public enum ProjectTamplateType
        {
            Default,
            Filar_FBR
        }

        public enum Compatibility
        {
            Supports_3D,
            Supports_AR,
            Supports_VR
        }

        public enum AppRestrictionType
        {
            None,
            ProjectSupport
        }

        public enum MessageIdentifierType
        {
            None,
            General,
            Hint,
            Tip,
            Help,
            Objective
        }

        public enum ProfileType
        {
            None,
            Guest,
            Curator
        }

        public enum LoadingSequenceID
        {
            Default,
            CheckingNetworkConnection,
            AppInitialization,
            CheckingDeviceCompatibility,
            AppSigning,
            InitializingUserAssets,
            SynchronizingProfile,
            InitializingXR,
        }

        public enum LicenseType
        {
            Default,
            Trial,
            Pro
        }

        public enum LoadingSequenceMessageType
        {
            None,
            NetworkCheck,
            ServerConnection,
            AppInfoSynchronization,
            ServerEntryPoint,
            DeviceCompitability,
            ProfileSynchronization,
            SigningApp
        }

        public enum TextureMapType
        {
            AlbedoMap,
            MetallicGlossMap,
            NormalMap,
            OcclusionMap,
            HeightMap,
            EmissionMap,
            DetailMask,
            DetailAlbedoMap,
            DetailNormalMap
        }

        public enum WidgetStateType
        {
            None,
            Initialized,
            NotInitialized,
            InitializedAndActive,
            InitializedAndInActive
        }


        public enum StorableType
        {
            None,
            Profile,
            Project,
            Folder,
            Asset,
            Info,
            License
        }

        public enum AssetBundleResourceLocatorType
        {
            None,
            Screen,
            Widget,
            Selectable,
            Model
        }

        public enum OrderInLayerType
        {
            None,
            Default,
            Ascending,
            Descending
        }

        #endregion

        #region Asset Bundles

        [Serializable]
        public class AssetBundleReference<T> : AssetReferenceT<T> where T : UnityEngine.Object
        {
            public AssetBundleReference(string guid) : base(guid) { }
        }

        [Serializable]
        public class ScreenAssetBundles<T> : DataDebugger where T : Enum
        {
            #region Components

            [SerializeField]
            private string name;

            [Space(5)]
            [SerializeField]
            private T widgetType;

            [Space(5)]
            [SerializeField]
            private List<AssetBundleReference<GameObject>> widgets = new List<AssetBundleReference<GameObject>>();

            [Space(5)]
            [SerializeField]
            private bool initialize;

            #endregion

            #region Main

            public Callback Initialized()
            {
                var callbackResults = new Callback(Helpers.GetAppComponentsValid(widgets, "Widgets", 
                    $"Widgets Are Not Yet Initialized For Screen Assets Bundle : {GetName()}", 
                    $"{widgets.Count} : Widgets Have Been Initialized Successfully"));

                return callbackResults;
            }

            #region Data Setters

            #endregion

            #region Data Getters

            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Screen Widget Asset Bundles Name Is Not Assigned.";

            public new CallbackData<T> GetType()
            {
                var callbackResults = new CallbackData<T>();

                if (widgetType.ToString().ToLower() != "none")
                {
                    callbackResults.result = $"Screen Asset Bundle : {GetName()} Type - Screen Asset Bundle Type Is Set To Type : {widgetType}";
                    callbackResults.data = widgetType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Asset Bundles : {GetName()}'s Widget Type - Type Is Set To Default : {widgetType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackDataList<AssetBundleReference<GameObject>> GetWidgets()
            {
                var callbackResults = new CallbackDataList<AssetBundleReference<GameObject>>(Initialized());

                if(callbackResults.Success())
                    callbackResults.data = widgets;

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ScreenReferencedWidgetDependencyAssetBundle<T> : DataDebugger, IScreenReferencedWidgetDependencyAssetBundle<T> where T : Enum
        {
            #region Components

            [SerializeField]
            [Space(5)]
            private T widgetType;

            [SerializeField]
            [Space(5)]
            private ScreenUIPlacementType uIPlacementType = ScreenUIPlacementType.None;

            [SerializeField]
            [Space(5)]
            private ContentContainerType containerType = ContentContainerType.None;

            [SerializeField]
            [Space(5)]
            private UIScreenWidgetVisibilityState initialVisibilityState = UIScreenWidgetVisibilityState.None;

            #endregion

            #region Main

            #region Data Setters

            public void SetType(T widgetType) => this.widgetType = widgetType;

            public void SetInitialVisibilityState(UIScreenWidgetVisibilityState initialVisibilityState) => this.initialVisibilityState = initialVisibilityState;

            public void SetScreenUIPlacementType(ScreenUIPlacementType uIPlacementType) => this.uIPlacementType = uIPlacementType;

            public void SetContentContainerType(ContentContainerType containerType) => this.containerType = containerType;

            #endregion

            #region Data Getters

            public new CallbackData<T> GetType()
            {
                var callbackResults = new CallbackData<T>();

                if (widgetType.ToString().ToLower() != "none")
                {
                    callbackResults.result = $"Screen Referenced Widget Dependency Asset Bundle : {GetName()} - Is Set To Type : {widgetType}";
                    callbackResults.data = widgetType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Widget Type - Type Is Set To Default : {widgetType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<UIScreenWidgetVisibilityState> GetInitialVisibilityState()
            {
                var callbackResults = new CallbackData<UIScreenWidgetVisibilityState>();
                if (initialVisibilityState != UIScreenWidgetVisibilityState.None)
                {
                    callbackResults.result = $"Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Initial Visibility State Type Is Set To : {initialVisibilityState}";
                    callbackResults.data = initialVisibilityState;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Initial Visibility State Type Is Set To Default : {initialVisibilityState}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<ContentContainerType> GetContentContainerType()
            {
                var callbackResults = new CallbackData<ContentContainerType>();
                if (containerType != ContentContainerType.None)
                {
                    callbackResults.result = $"Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Container Type Is Set To : {containerType}";
                    callbackResults.data = containerType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Container Type Is Set To Default : {containerType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<ScreenUIPlacementType> GetScreenUIPlacementType()
            {
                var callbackResults = new CallbackData<ScreenUIPlacementType>();
                if (uIPlacementType != ScreenUIPlacementType.None)
                {
                    callbackResults.result = $"Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Screen Placement Type Is Set To : {uIPlacementType}";
                    callbackResults.data = uIPlacementType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Referenced Widget Dependency Asset Bundle : {GetName()}'s Screen Placement Type Is Set To Default : {uIPlacementType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class LoadedAssetsCacheObject<T, U> : DataDebugger where T : Enum where U : AppMonoBaseClass
        {
            #region Components

            public T cacheKey;
            public List<U> cachedAssetList = new List<U>();

            #endregion

            #region Main

            public LoadedAssetsCacheObject()
            {

            }

            public LoadedAssetsCacheObject(string name, T cacheKey, List<U> cachedAssetList = null)
            {
                this.cacheKey = cacheKey;
                this.cachedAssetList = cachedAssetList;
                SetName(name);
            }

            public Callback Initialized()
            {
                var callbackResults = new Callback(Helpers.GetAppComponentsValid(cachedAssetList, "Cached Asset List", 
                    $"Assets Cache List Initialization Failed - Loaded Assets Cache For Cache Key : {cacheKey} Is Not Initialized - Invalid Operation.", 
                    $"Assets Cache List Initialization Success - Loaded Assets Cache For Cache Key : {cacheKey} Has Been Initialized Successfully With : {cachedAssetList.Count} Assets."));

                return callbackResults;
            }

            public void SetKey(T key) => this.cacheKey = key;

            public CallbackDataList<U> GetCache()
            {
                var callbackResults = new CallbackDataList<U>(GetKey());

                if(callbackResults.Success())
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(cachedAssetList, "Cached Asset List", $"Cache Assets Are Not Yet Initialized For Cache Object : {GetName()} - Of Type : {cacheKey} - Invalid Operation."));

                    if(callbackResults.Success())
                        callbackResults.data = cachedAssetList;
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackData<T> GetKey()
            {
                var callbackResults = new CallbackData<T>();

                if(!cacheKey.ToString().ToLower().Equals("none"))
                {
                    callbackResults.result = $"Cache Object : {GetName()}'s Cache Key Type Is Set To : {cacheKey}.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Cacke Key Failed - Cache Object : {GetName()}'s Cache Key Type Is Set To Default : {cacheKey} - Invalid Operation, Possible Fix, Varify If Cache Is Initialized .";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class LoadedAssetCache<T, U> : DataDebugger where T : Enum where U : AppMonoBaseClass
        {
            #region Components

            [Space(10)]
            public List<LoadedAssetsCacheObject<T, U>> assetBundles = new List<LoadedAssetsCacheObject<T, U>>();

            #endregion

            #region Main

            public Callback Initialized()
            {
                var callbackResults = new Callback(Helpers.GetAppComponentsValid(assetBundles, "Loaded Asset Cache",
                    $"Loaded Assets Cache Initialization Failed - Loaded Assets Cache Is Not Initialized - Invalid Operation.",
                    $"Loaded Assets Cache List Initialization Success - Loaded Assets Cache Has Been Initialized Successfully With : {assetBundles.Count} Assets Cache(s)."));

                return callbackResults;
            }

            public void CacheLoadedAssets(T key, U value, Action<CallbackData<T>> callback = null)
            {
                var callbackResults = new CallbackData<T>(Helpers.GetAppComponentValid(value, "Cache Value", $"Could Add Asset To Cache Data Of Key : {key}, Value Is Null - Invalid Operation."));

                if (callbackResults.Success())
                {
                    var loadedAssetsCacheData = assetBundles.Find(cachedData => cachedData.cacheKey.ToString().Equals(key.ToString()));

                    callbackResults.SetResult(Helpers.GetAppComponentValid(loadedAssetsCacheData, "Loaded Assets Cache Data", $"Loaded Assets Cache Data Of Category Type : {key} Not Found - A New Loaded Assets Cache Data Instance Of Type Will Be Created."));

                    if (callbackResults.Success())
                    {
                        if (!loadedAssetsCacheData.cachedAssetList.Contains(value))
                        {
                            loadedAssetsCacheData.cachedAssetList.Add(value);

                            if (loadedAssetsCacheData.cachedAssetList.Contains(value))
                            {
                                callbackResults.result = $"Add Asset To cache List Success : Value Has Been Successfully Added To Cached Assets Data Of Type : {key}.";
                                callbackResults.data = key;
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"Add Asset To cache List Failed : Value Failed To Be Added To Cached Assets Data Of Type : {key} - Invalid Operation - Please Check Here.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Add Asset To cache List Unsuccessful : Value Couldn't Be Added To Cached Assets Data Of Type : {key} - Asset Already Exists - Invalid Operation.";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }
                    else
                    {
                        var newLoadedAssetsCacheData = new LoadedAssetsCacheObject<T, U>(key.ToString(), key);

                        newLoadedAssetsCacheData.cachedAssetList = new List<U>() { value };

                        if (newLoadedAssetsCacheData.cachedAssetList.Contains(value))
                        {
                            if(!assetBundles.Contains(newLoadedAssetsCacheData))
                            {
                                assetBundles.Add(newLoadedAssetsCacheData);

                                if (assetBundles.Contains(newLoadedAssetsCacheData))
                                {
                                    callbackResults.result = $"Add Asset To cache List Success : Value Has Been Successfully Added To A Newely Created Cached Assets Data Of Type : {key}.";
                                    callbackResults.data = key;
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"Add Asset To cache List Failed - The Newely Created Cache Assets Data Of Type : {key} Failed To Be Added For Some Wiered Reasons - Invalid Operation - Please Check Here.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Add Asset To cache List Failed - The Newely Created Cache Assets Data Of Type : {key} Already Exists In Loaded Asssets Cache - Invalid Operation.";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Add Asset To cache List Failed : Value Failed To Be Added To Cached Assets Data Of Type : {key} - Invalid Operation - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            public CallbackDataList<U> GetCachedAssets(T key)
            {
                var callbackResults = new CallbackDataList<U>(Helpers.GetAppComponentValid(assetBundles, "Loaded Assets Cache", $"Get Cached Assets Failed - Couldn't Find Loaded Asset Cache For Cache Key : {key} - Invalid Operation."));

                if (callbackResults.Success())
                {
                    for (int i = 0; i < assetBundles.Count; i++)
                    {
                        if(assetBundles[i].cacheKey.ToString().Equals(key.ToString()))
                        {
                            callbackResults.SetResult(assetBundles[i].Initialized());

                            if (callbackResults.Success())
                            {
                                callbackResults.data = assetBundles[i].cachedAssetList;

                                LogInfo($" _______________++++++++++++++++_____!! Found Cache Key : {assetBundles[i].cacheKey} With : {assetBundles[i].cachedAssetList.Count} Assets At Index : {i} - Searching For Key : {key}", this);
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            break;
                        }
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class AssetBundleResourceLocator : DataDebugger
        {
            #region Components

            [SerializeField]
            private AssetBundleResourceLocatorType bundleKey;

            [Space(5)]
            [SerializeField]
            private bool initialize = false;

            [SerializeField] // Remove Serializer - Hide This Value In The Editor Inspector.
            private bool loaded = false;

            #endregion

            #region Main

            public Callback Initialized()
            {
                var callbackResults = new Callback(GetKey());

                if (callbackResults.Success())
                {
                    if(initialize)
                        callbackResults.result = $"Asset Bundle Key : {bundleKey} Has Been Initialized Successfully.";
                    else
                    {
                        callbackResults.result = $"Asset Bundle Key : {bundleKey}'s Initialization Is Not Enabled.";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackData<AssetBundleResourceLocatorType> GetKey()
            {
                var callbackResults = new CallbackData<AssetBundleResourceLocatorType>();

                if (bundleKey != AssetBundleResourceLocatorType.None)
                {
                    callbackResults.result = $"Asset Bundle Key Is Set To Key Type : {bundleKey}.";
                    callbackResults.data = bundleKey;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Asset Bundle Key Type Is Set To Default : {bundleKey} - Invalid Operation, Please Assign Bundle Key In Asset Database Manager Editor Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<string> GetKeyString()
            {
                var callbackResults = new CallbackData<string>(GetKey());

                if (callbackResults.Success())
                    callbackResults.data = GetKey().GetData().ToString();
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public void SetLoadedState(bool loaded) => this.loaded = loaded;

            public bool GetLoadedState() => loaded;

            #endregion
        }

        [Serializable]
        public class AssetBundlesLibrary : DataDebugger
        {
            #region Components

            [Space(5)]
            [Header("Asset Bundles")]

            [Space(10)]
            [SerializeField]
            private List<AssetBundleResourceLocator> assetBundleResourceLocators = new List<AssetBundleResourceLocator>();

            [Space(15)]
            [Header("Runtime Initialized Asset Bundles")]


            [Tooltip("Do Not Initialize - Screens Are Loaded Dynamically")]
            [Space(10)]
            [SerializeField]
            private LoadedAssetCache<ScreenType, Screen> loadedScreens = new LoadedAssetCache<ScreenType, Screen>();

            [Tooltip("Do Not Initialize - Widgets Are Loaded Dynamically")]
            [Space(10)]
            [SerializeField]
            private LoadedAssetCache<ScreenType, Widget> loadedWidgets = new LoadedAssetCache<ScreenType, Widget>();

            #region Dynamic Container

            [Space(10)]
            [Header("Assets Dynamic Containers")]

            [Space(10)]
            [SerializeField]
            List<DynamicContainerBase> dynamicContainerLibrary = new List<DynamicContainerBase>();

            #endregion

            [Space(5)]
            private float initializationTimeout = 10.0f;

            private List<Screen> loadedAppScreens = new List<Screen>();

            private bool addressablesManagerInitialized = false;
            private bool inProgress = false;

            #endregion

            #region Main

            public void Initialize() => Addressables.InitializeAsync().Completed += InitializationCompletedEvent;

            /// <summary>
            /// Get Initialized Bundle Keys As Strings To Use As Labels When Loading Addressables.
            /// </summary>
            /// <returns>Bundle Key String List</returns>
            private CallbackDataList<string> GetAssetBundleKeyStrings()
            {
                var callbackResults = new CallbackDataList<string>(GetInitializedAssetBundleResourceLocators());

                if (callbackResults.Success())
                {
                    var initializedBundleKeys = GetInitializedAssetBundleResourceLocators().GetData();

                    var keys = new List<string>();

                    for (int i = 0; i < initializedBundleKeys.Count; i++)
                    {
                        callbackResults.SetResult(initializedBundleKeys[i].GetKeyString());

                        if (callbackResults.Success())
                        {
                            var key = initializedBundleKeys[i].GetKeyString().GetData();

                            if (!keys.Contains(key))
                                keys.Add(key);
                            else
                            {
                                callbackResults.result = $"Failed To Add Initialized Asset Bundle Key - Asset Bundlen Key : {key} Already Exists In Asset Bundle Keys - Invalid Operation";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.WarningCode;

                                break;
                            }
                        }
                        else
                            break;
                    }

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"Found : {initializedBundleKeys.Count} Initialized Asset Bundle Keys.";
                        callbackResults.data = keys;
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            private CallbackDataList<AssetBundleResourceLocator> GetInitializedAssetBundleResourceLocators()
            {
                var callbackResults = new CallbackDataList<AssetBundleResourceLocator>(Helpers.GetAppComponentsValid(assetBundleResourceLocators, "Asset Keys", "Asset Bundles Gate Asset Keys Failed - Asset Keys Are Not Yet Initialized In The Editor Inspector Panel - Invalid Operation, Possible Fix - Please Assign Asset Keys."));

                if (callbackResults.Success())
                {
                    var initializedBundleKeys = assetBundleResourceLocators.FindAll(bundleKey => bundleKey.Initialized().Success());

                    callbackResults.SetResult(Helpers.GetAppComponentsValid(initializedBundleKeys, "Asset Bundle Keys", "There Were No Initialized Asset Bundle Keys Found - Invalid Operation, Possible Fix - Please Assign Asset Bundle Keys In Asset Manager Editor Inspector."));

                    if (callbackResults.Success())
                        callbackResults.data = initializedBundleKeys;
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            private CallbackData<AssetBundleResourceLocator> GetInitializedAssetBundleResourceLocator(AssetBundleResourceLocatorType locatorType)
            {
                var callbackResults = new CallbackData<AssetBundleResourceLocator>(GetInitializedAssetBundleResourceLocators());

                if(callbackResults.Success())
                {
                    var initializedAssetBundleResourceLocator = GetInitializedAssetBundleResourceLocators().GetData().Find(locator => locator.GetKey().GetData() == locatorType);

                    callbackResults.SetResult(Helpers.GetAppComponentValid(initializedAssetBundleResourceLocator, "Initialized Asset Bundle Resource Locator",
                        $"Get Initialized Asset Bundle Resource Locator Failed - There Is No Initialized Asset Bundle Resource Locator Of Type : {locatorType} Found - Invalid Operation, Please Check Here."));

                    if (callbackResults.Success())
                        callbackResults.data = initializedAssetBundleResourceLocator;
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            private void InitializationCompletedEvent(AsyncOperationHandle<IResourceLocator> evt)
            {
                var callbackResults = new Callback();

                if (evt.Status == AsyncOperationStatus.Succeeded)
                {
                    callbackResults.SetResult(GetInitializedAssetBundleResourceLocators());

                    if (callbackResults.Success())
                    {
                        Addressables.LoadAssetsAsync<GameObject>(GetAssetBundleKeyStrings().GetData(), null, Addressables.MergeMode.Union).Completed += (loadedAssetsCallbackResults) =>
                        {
                            if (loadedAssetsCallbackResults.Status == AsyncOperationStatus.Succeeded)
                            {
                                var initializedAssetBundleResourceLocators = GetInitializedAssetBundleResourceLocators().GetData();

                                #region Screen Widgets

                                for (int i = 0; i < initializedAssetBundleResourceLocators.Count; i++)
                                {
                                    OnProccessLoadedWidgets(initializedAssetBundleResourceLocators[i].GetKey().GetData(), loadedAssetsCallbackResults.Result.ToList(), assetsProccessedCallbackResults =>
                                    {
                                        callbackResults.SetResult(assetsProccessedCallbackResults);
                                    });

                                    if (callbackResults.UnSuccessful())
                                        break;
                                }

                                #endregion
                            }
                        };
                    }
                    else
                        Log(GetAssetBundleKeyStrings().GetResultCode, GetAssetBundleKeyStrings().GetResult, this);
                }
                else
                    throw new Exception($"Failed To Initialize Addressables - Invalid Operation - Please See Here - Addressables Status : {evt.Status}");
            }

            private void OnProccessLoadedWidgets(AssetBundleResourceLocatorType locatorType, List<GameObject> loadedAssetBundles, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                switch (locatorType)
                {
                    case AssetBundleResourceLocatorType.Screen:

                        var loadedBundleScreen = loadedAssetBundles.Select(asset => asset.GetComponent<Screen>()).Where(asset => asset != null).ToList();

                        callbackResults.SetResult(Helpers.GetAppComponentsValid(loadedBundleScreen, $"{locatorType}", $"There Are No Components Loaded For Locator Type : {locatorType}"));

                        if (callbackResults.Success())
                        {
                            AddLoadedAssetsToCache(locatorType, loadedAssetsCallbackResults =>
                            {
                                callbackResults.SetResult(loadedAssetsCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(loadedScreens.GetCachedAssets(loadedAssetsCallbackResults.GetData()));

                                    if (callbackResults.Success())
                                        GetInitializedAssetBundleResourceLocators().GetData().Find(locator => locator.GetKey().GetData() == locatorType).SetLoadedState(callbackResults.Success());
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult,this);
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            }, loadedBundleScreen.ToArray());
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                        break;

                    case AssetBundleResourceLocatorType.Widget:

                        var loadedBundleWidgets = loadedAssetBundles.Select(asset => asset.GetComponent<Widget>()).Where(asset => asset != null).ToList();

                        callbackResults.SetResult(Helpers.GetAppComponentsValid(loadedBundleWidgets, $"{locatorType}", $"There Are No Components Loaded For Locator Type : {locatorType}"));

                        if (callbackResults.Success())
                        {
                            AddLoadedAssetsToCache(locatorType, loadedAssetsCallbackResults =>
                            {
                                callbackResults.SetResult(loadedAssetsCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(loadedWidgets.GetCachedAssets(loadedAssetsCallbackResults.GetData()));

                                    if(callbackResults.Success())
                                        GetInitializedAssetBundleResourceLocators().GetData().Find(locator => locator.GetKey().GetData() == locatorType).SetLoadedState(callbackResults.Success());
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            }, loadedBundleWidgets.ToArray());
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                        break;

                    case AssetBundleResourceLocatorType.Selectable:

                        break;

                    case AssetBundleResourceLocatorType.Model:

                        break;
                }

                callback?.Invoke(callbackResults);
            }

            public async Task<Callback> OnAwaitAssetsInitialization(AssetBundleResourceLocatorType locatorType)
            {
                var callbackResults = new Callback(GetInitializedAssetBundleResourceLocator(locatorType));

                if (callbackResults.Success())
                {
                    var initializedAssetBundleResourceLocator = GetInitializedAssetBundleResourceLocator(locatorType).GetData();

                    var timeout = initializationTimeout;

                    while (!initializedAssetBundleResourceLocator.GetLoadedState() && timeout > 0)
                    {
                        timeout -= 1 * Time.deltaTime;
                        await Task.Yield();
                    }

                    if (initializedAssetBundleResourceLocator.GetLoadedState() && timeout > 0)
                        callbackResults.result = $"Resouces Of Type : {locatorType} Finished Loading Successfully.";
                    else
                    {
                        callbackResults.result = $"Failed To Complete Loading Asset Resources Of Type : {locatorType} - Execution Terminated Due To Timeout.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public void AddLoadedDynamicContainersToLibrary(Action<Callback> callback = null, params DynamicContainerBase[] dynamicContainers)
            {
                var callbackResults = new Callback();

                SetDynamicContainer(containerSetCallbackResults =>
                {
                    callbackResults.SetResult(containerSetCallbackResults);

                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                }, dynamicContainers);

                callback?.Invoke(callbackResults);
            }

            #region Data Setters

            #endregion

            #region Data Getters

            public CallbackDataList<Screen> GetLoadedScreens()
            {
                var callbackResults = new CallbackDataList<Screen>(loadedWidgets.GetCachedAssets(ScreenType.Default));

                if (callbackResults.Success())
                    callbackResults.data = loadedScreens.GetCachedAssets(ScreenType.Default).GetData();
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackDataList<Widget> GetLoadedWidgets(ScreenType screenType)
            {
                var callbackResults = new CallbackDataList<Widget>(loadedWidgets.GetCachedAssets(screenType));

                if (callbackResults.Success())
                    callbackResults.data = loadedWidgets.GetCachedAssets(screenType).GetData();
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackDataList<Widget> GetLoadedWidgets(ScreenType screenType = ScreenType.Any, params ScreenReferencedWidgetDependencyAssetBundle<WidgetType>[] screenReferencedWidgets)
            {
                var callbackResults = new CallbackDataList<Widget>(loadedWidgets.GetCachedAssets(screenType));

                if(callbackResults.Success())
                {
                    var widgets = new List<Widget>();

                    var loadedAssets = loadedWidgets.GetCachedAssets(screenType).GetData();

                    callbackResults.SetResult(Helpers.GetAppComponentsValid(screenReferencedWidgets, "Screen Referenced Widgets", 
                        "Get Loaded Widgets Failed - There Are No Screen Referenced Widgets Assigned As param Value - Invalid Operation, Please Check Here."));

                    if(callbackResults.Success())
                    {
                        for (int i = 0; i < screenReferencedWidgets.Length; i++)
                        {
                            var screenReferenced = loadedAssets.Find(screenReferenced => screenReferenced.GetType().GetData() == screenReferencedWidgets[i].GetType().GetData());

                            callbackResults.SetResult(Helpers.GetAppComponentValid(screenReferenced, "Screen Referenced", $"Get Loaded Widget For Screen Type : {screenType} Failed - Couldn't Find Widget Of Type : {screenReferencedWidgets[i].GetType().GetData()} - Invalid Operation. Please Check If Widgets Were Initialized/Loaded Properly."));

                            if (callbackResults.Success())
                            {
                                if(!widgets.Contains(screenReferenced))
                                    widgets.Add(screenReferenced);
                                else
                                {
                                    callbackResults.result = $"";
                                    callbackResults.data = default;
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }

                            if (callbackResults.UnSuccessful())
                            {
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                break;
                            }
                        }

                        if(callbackResults.Success())
                        {
                            callbackResults.result = $"{widgets.Count} Widgets Have Been Loaded Successfully For Screen Type : {screenType}";
                            callbackResults.data = widgets;
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            #endregion

            public CallbackDataList<Widget> GetWidgets(ScreenType screenType)
            {
                var callbackResults = new CallbackDataList<Widget>(loadedWidgets.Initialized());

                if(callbackResults.Success())
                {
                    callbackResults.SetResult(loadedWidgets.GetCachedAssets(screenType));

                    if(callbackResults.Success())
                        callbackResults.data = loadedWidgets.GetCachedAssets(screenType).GetData();
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public Callback OnResourceLocatorsInitialized()
            {
                var callbackResults = new Callback(GetInitializedAssetBundleResourceLocators());

                if(callbackResults.UnSuccessful())
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public Callback OnAddressablesManagerInitialized()
            {
                var callbackResults = new Callback();

                if (addressablesManagerInitialized)
                {
                    callbackResults.result = "Asset Library Has Been Initialized";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Asset Library Is Not Yet Initialized";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            /// <summary>
            /// Reference For Getting Screen Containers - Delete After
            /// </summary>
            /// <param name="screen"></param>
            /// <param name="callback"></param>
            private void AddLoadedAppScreenToList(Screen screen, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if(!loadedAppScreens.Contains(screen))
                {
                    loadedAppScreens.Add(screen);

                    if(loadedAppScreens.Contains(screen))
                    {
                        callbackResults.SetResult(screen.GetDynamicContainerList());

                        if (callbackResults.Success())
                        {
                            var dynamicContainersToArray = Helpers.GetArray(screen.GetDynamicContainerList().GetData());

                       
                        }
                        else
                        {
                            callbackResults.result = $"App Screen : {screen.GetName()} - Of Type : {screen.GetType().GetData()} Has Been Added Successfully To Loaded App Screens Without Dynamic Containers Initialization.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Asset Bundles Library - Add Loaded App Screen To List Failed - Loaded App Screen : {screen.GetName()} - Of Type : {screen.GetType().GetData()} Couldn't Be Added To Loaded App Screens - Invalid Operation - Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Asset Bundles Library - Add Loaded App Screen To List Failed - Loaded App Screens Already Contains App Screen : {screen.GetName()} - Of Type : {screen.GetType().GetData()}.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            private void AddLoadedAssetsToCache<T>(AssetBundleResourceLocatorType locatorType, Action<CallbackData<ScreenType>> callback = null, params T[] loadedAssets)
            {
                var callbackResults = new CallbackData<ScreenType>(Helpers.GetAppComponentsValid(loadedAssets, "Loaded Assets", 
                    "Add Loaded Screen Widget To Cache Failed - There Are No Loaded Assets To Cache."));

                if (callbackResults.Success())
                {

                    switch(locatorType)
                    {
                        case AssetBundleResourceLocatorType.Screen:

                            for (int i = 0; i < loadedAssets.Length; i++)
                            {
                                var loadedAsset = loadedAssets[i] as Screen;

                                loadedScreens.CacheLoadedAssets(ScreenType.Default, loadedAsset, widgetCachedCallbackResults =>
                                {
                                    callbackResults.SetResult(widgetCachedCallbackResults);

                                    if(callbackResults.Success())
                                    {
                                        if(widgetCachedCallbackResults.GetData() == ScreenType.Default)
                                        {
                                            callbackResults.result = $"Added Loaded Asset For Screen : {ScreenType.Default}.";
                                            callbackResults.data = widgetCachedCallbackResults.GetData();
                                        }
                                        else
                                        {
                                            callbackResults.result = $"Failed To Add Loaded Asset For Screen : {ScreenType.Default} - Invalid Operation - Please Chec Here.";
                                            callbackResults.data = default;
                                            callbackResults.resultCode = Helpers.ErrorCode;
                                        }
                                    }
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                                });

                                if (callbackResults.UnSuccessful())
                                    break;
                            }

                            break;

                        case AssetBundleResourceLocatorType.Widget:

                            for (int i = 0; i < loadedAssets.Length; i++)
                            {
                                var loadedAsset = loadedAssets[i] as Widget;

                                callbackResults.SetResult(loadedAsset.GetScreenType());

                                if (callbackResults.Success())
                                {
                                    loadedWidgets.CacheLoadedAssets(loadedAsset.GetScreenType().GetData(), loadedAsset, widgetCachedCallbackResults =>
                                    {
                                        callbackResults.SetResult(widgetCachedCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            if (widgetCachedCallbackResults.GetData() == loadedAsset.GetScreenType().GetData())
                                            {
                                                callbackResults.result = $"Added Loaded Asset For Screen : {widgetCachedCallbackResults.GetData()}.";
                                                callbackResults.data = widgetCachedCallbackResults.GetData();
                                            }
                                            else
                                            {
                                                callbackResults.result = $"Failed To Add Loaded Asset For Screen : {loadedAsset.GetScreenType().GetData()} - Invalid Operation - Please Check Here.";
                                                callbackResults.resultCode = Helpers.ErrorCode;
                                            }
                                        }
                                        else
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                                    });

                                    if (callbackResults.UnSuccessful())
                                        break;
                                }
                                else
                                    break;
                            }

                            break;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            #region Dynamic Containers Functions

            public void AddContentToDynamicWidgetContainer(UIScreenWidget contentWidget, ContentContainerType containerType, OrientationType orientation, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                GetDynamicContainer<DynamicWidgetsContainer>(containerType, containerCallbackResults => 
                {
                    callbackResults.SetResult(containerCallbackResults);

                    if(callbackResults.Success())
                    {
                        var container = containerCallbackResults.GetData();
                        container.AddContent(content: contentWidget, keepWorldPosition: false, overrideActiveState: false, updateContainer: true);
                    }
                });

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region   #region Dynamic Containers Setters

            public void SetDynamicContainer(Action<Callback> callback = null, params DynamicContainerBase[] dynamicContainers)
            {
                var callbackResults = new Callback(Helpers.GetAppComponentsValid(dynamicContainers, "Dynamic Containers", "Dynamic Containers Params Array Is Null - Invalid Operation."));

                if (callbackResults.Success())
                {
                    for (int i = 0; i < dynamicContainers.Length; i++)
                    {
                        if (!dynamicContainerLibrary.Contains(dynamicContainers[i]))
                        {
                            dynamicContainerLibrary.Add(dynamicContainers[i]);

                            if (dynamicContainerLibrary.Contains(dynamicContainers[i]))
                            {
                                callbackResults.result = $"Dynamic Container : {dynamicContainers[i].GetName()} Has Been Added Successfully To Dynamic Containers Library.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"Set Dynamic Container Failed - Couldn't Add Dynamic Container : {dynamicContainers[i].GetName()} - Invalid Operation - Please Check Here.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Dynamic Containers Already Contains Dynamic Container : {dynamicContainers[i].GetName()}";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Dynamic Containers Getters

            public void GetDynamicContainer<T>(ScreenType screenType, Action<CallbackData<T>> callback) where T : DynamicContainerBase
            {
                var callbackResults = new CallbackData<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        T container = hasContentCallbackResults.data.Find(container => container.GetScreenType().GetData() == screenType) as T;

                        if (container != null)
                        {
                            callbackResults.result = $"Container For Screen: {screenType} Has Been Found In Dynamic Widgets Containers List.";
                            callbackResults.data = container;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed : Container For Screen: {screenType} Not Found In Dynamic Widgets Containers List.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetDynamicContainer<T>(ContentContainerType containerType, Action<CallbackData<T>> callback) where T : DynamicContainerBase
            {
                var callbackResults = new CallbackData<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        T container = hasContentCallbackResults.data.Find(container => container.GetContainerType().GetData() == containerType) as T;

                        if (container != null)
                        {
                            callbackResults.result = $"Container Of Type : {containerType} Has Been Found In Dynamic Widgets Containers List.";
                            callbackResults.data = container;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed : Container Of Type : {containerType} Not Found In Dynamic Widgets Containers List.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetDynamicContainer<T>(ScreenType screenType, ContainerData containerData, Action<CallbackData<T>> callback) where T : DynamicContainerBase
            {
                var callbackResults = new CallbackData<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        T container = hasContentCallbackResults.data.Find(container => container.GetScreenType().GetData() == screenType && container.GetContainerType().data == containerData.GetContainerType() && container.GetViewSpace().data == containerData.GetContainerViewSpaceType()) as T;

                        if (container != null)
                        {
                            callbackResults.result = "Success";
                            callbackResults.data = container;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed : Container Of Type : {containerData.GetContainerType()} Not Found In Dynamic Widgets Containers List For Screen: {ScreenUIManager.Instance.GetCurrentScreenType()}.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetDynamicContainer<T>(ScreenType screenType, ContentContainerType containerType, ContainerViewSpaceType viewSpaceType, Action<CallbackData<T>> callback) where T : DynamicContainerBase
            {
                var callbackResults = new CallbackData<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        T container = hasContentCallbackResults.data.Find(container => container.GetScreenType().GetData() == screenType && container?.GetContainerType()?.GetData() == containerType && container?.GetViewSpace()?.GetData() == viewSpaceType) as T;

                        if (container != null)
                        {
                            callbackResults.result = "Success";
                            callbackResults.data = container;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed : Container Of Type : {containerType} Not Found In Dynamic Widgets Containers List For Screen: {ScreenUIManager.Instance.GetCurrentScreenType()}.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetDynamicContainers<T>(ScreenType screenType, Action<CallbackDataList<T>> callback) where T : DynamicContainerBase
            {
                var callbackResults = new CallbackDataList<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        var containers = hasContentCallbackResults.data.FindAll(container => container.GetScreenType().GetData() == screenType) as List<T>;

                        Helpers.GetAppComponentsValid(containers, "Container", hasContainersCallbackResults =>
                        {
                            callbackResults.SetResult(hasContentCallbackResults);

                            if (callbackResults.Success())
                            {
                                callbackResults.result = $"{containers.Count} Containers Found For Screen Type : {screenType}.";
                                callbackResults.data = containers;
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"Failed : There Were No Containers For Screen Type : {screenType}.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }

                        }, $"There Were No Containers Found For Screen Type : {screenType}");
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetDynamicContainer<T>(ScreenType screenType, List<ContainerData> containerDatas, Action<CallbackDataList<T>> callback) where T : DynamicContainer
            {
                var callbackResults = new CallbackDataList<T>();

                GetAllDynamicContainers(hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        List<T> containers = new List<T>();

                        Helpers.GetAppComponentsValid(containerDatas, "Container Datas", containerDataCallbackResults =>
                        {
                            callbackResults.SetResult(containerDataCallbackResults);

                            if (callbackResults.Success())
                            {
                                foreach (var containerData in containerDataCallbackResults.data)
                                {
                                    T container = hasContentCallbackResults.data.Find(container => container.GetScreenType().GetData() == screenType && container.GetContainerType().data == containerData.GetContainerType() && container.GetViewSpace().data == containerData.GetContainerViewSpaceType()) as T;

                                    if (container != null)
                                    {
                                        containers.Add(container);

                                        callbackResults.result = "Success";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Failed : Container Of Type : {container.GetScreenType().GetData()} Not Found In Dynamic Widgets Containers List For Screen: {ScreenUIManager.Instance.GetCurrentScreenType()}.";
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.result = "Success";
                                        callbackResults.data = containers;
                                    }
                                }
                            }
                        });
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void GetAllDynamicContainers(Action<CallbackDataList<DynamicContainerBase>> callback)
            {
                var callbackResults = new CallbackDataList<DynamicContainerBase>();

                Helpers.GetAppComponentsValid(dynamicContainerLibrary, "Dynamic Container List", hasContentCallbackResults =>
                {
                    callbackResults.SetResult(hasContentCallbackResults);

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{dynamicContainerLibrary.Count} Containers Found.";
                        callbackResults.data = dynamicContainerLibrary;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }

                }, "Failed : dynamicWidgetsContainersList Is Null / Empty.");

                callback?.Invoke(callbackResults);
            }

            public void GetAllDynamicContainersExcludingFromScreen(ScreenType screenType, Action<CallbackDataList<DynamicContainer>> callback)
            {
                var callbackResults = new CallbackDataList<DynamicContainer>();

                //GetAllDynamicContainers(hasContentCallbackResults =>
                //{
                //    callbackResults.SetResult(hasContentCallbackResults);

                //    if (callbackResults.Success())
                //    {
                //        List<AppData.DynamicContainer> containers = dynamicContainerLibrary.FindAll(container => container.GetContainerScreenType().data != screenType);

                //        if (containers != null && containers.Count > 0)
                //        {
                //            callbackResults.result = $"{containers.Count} Containers Found.";
                //            callbackResults.data = containers;
                //            callbackResults.resultCode = AppData.Helpers.SuccessCode;
                //        }
                //        else
                //        {
                //            callbackResults.result = $"Failed : There Are No Containers Found.";
                //            callbackResults.data = default;
                //            callbackResults.resultCode = AppData.Helpers.ErrorCode;
                //        }
                //    }
                //});

                callback?.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        #endregion

        #region Refresh Data

        [Serializable]
        public class RefreshDataTupil<T, U, V> where T : SerializableData where U : DynamicContainer where V : DynamicContainer
        {
            #region Components

            public T value_A;
            public U value_B;
            public V value_C;

            #endregion

            #region Main

            #region Constructors

            public RefreshDataTupil()
            {

            }

            public RefreshDataTupil(T value_A = null, U value_B = null, V value_C = null)
            {
                this.value_A = value_A;
                this.value_B = value_B;
                this.value_C = value_C;
            }

            #endregion

            #region Data Setters

            public void SetValue(T value_A = null, U value_B = null, V value_C = null)
            {
                this.value_A = value_A;
                this.value_B = value_B;
                this.value_C = value_C;
            }

            public void SetValue(T value_A) => this.value_A = value_A;
            public void SetValue(U value_B) => this.value_B = value_B;
            public void SetValue(V value_C) => this.value_C = value_C;

            #endregion

            #region Data Getters

            public T Value_A => value_A;
            public U Value_B => value_B;
            public V Value_C => value_C;

            public T GetValue_A() => value_A;
            public U GetValue_B() => value_B;
            public V GetValue_C() => value_C;

            public (T value_A, U value_B, V value_C) GetValues() => (GetValue_A(), GetValue_B(), GetValue_C());

            #endregion

            #endregion
        }

        [Serializable]
        public class ContainerData<T, U> where T : DynamicContainer where U : DynamicContainer
        {
            #region 
        }

        #endregion

        #region Post Data Types

        public enum PostDataContentStatus
        {
            None,
            Expired,
            Reported,
        }

        #endregion

        #region Container  Data Types

        public enum ContainerViewSpaceType
        {
            None,
            Scene,
            Screen
        }

        #endregion

        #region Container Classes

        [Serializable]
        public class ContentRecycleContainer
        {
            #region Components

            public Transform container;

            #endregion

            #region Main

            #region Data Setters

            #endregion

            #region Data Getters

            #endregion

            public void AddContent<T>(T content, bool keepWorldPos, Action<Callback> callback = null) where T : PostContentHandler
            {
                Callback callbackResults = new Callback();

                if (container != null)
                {
                    if (content.GetModel() != null)
                    {      
                        content.GetModel().transform.SetParent(container, keepWorldPos);
                        content.GetModel().SetActive(false);

                        if (!content.GetModel().activeSelf && content.GetModel().transform.parent == container)
                        {
                            callbackResults.result = $"Added Content : {content.name} To Container : {container.name} Successfully.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Add Content : {content.name} To Container : {container.name} - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Add Content - Content Model Is Missing / Null Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Add Content : {content.name} - Container Is Null / Missing..";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void ClearAll()
            {
                if (container.childCount > 0)
                {
                    for (int i = 0; i < container.childCount; i++)
                       GameObject.Destroy(container.GetChild(i).gameObject);

                    if (container.childCount == 0)
                    {
                        AppDatabaseManager.Instance.UnloadUnusedAssets();
                    }
                    else
                    {
                    }
                }
            }

            #endregion
        }

        [Serializable]
        public class DynamicContainerData : AppComponent
        {
            #region Components

            Transform sceneContainer;
            RectTransform screenContainer;

            #region Dimensions

            [Space(5)]
            public float width, height, depth;

            [Space(5)]
            public float xPosition, yPosition, zPosition;

            public float x => width;
            public float y => height;
            public float z => depth;

            #endregion

            #endregion

            #region Main

            #region Constructots

            public DynamicContainerData()
            {

            }

            public DynamicContainerData(Transform sceneContainer)
            {
                this.sceneContainer = screenContainer;

                SetWidth(sceneContainer.localScale.x);
                SetHeight(sceneContainer.localScale.y);
                SetDepth(sceneContainer.localScale.z);
            }

            public DynamicContainerData(float width, float height, float depth)
            {
                this.width = width;
                this.height = height;
                this.depth = depth;
            }

            #endregion

            #region Data Setters

            #region Size Data

            public void SetWidth(float width) => this.width = width;
            public void SetHeight(float height) => this.height = height;
            public void SetDepth(float depth) => this.depth = depth;

            #endregion

            #region Position Data

            public void SetXPosition(float xPosition) => this.xPosition = xPosition;
            public void SetYPosition(float yPosition) => this.yPosition = yPosition;
            public void SetZPosition(float zPosition) => this.zPosition = zPosition;

            public void SetScreenPosition(Vector2 position)
            {
                xPosition = position.x;
                yPosition = position.y;
            }

            public void SetPosition(Vector3 position)
            {
                xPosition = position.x;
                yPosition = position.y;
                zPosition = position.z;
            }

            public void SetPosition(RectTransform rect)
            {
                xPosition = rect.anchoredPosition.x;
                yPosition = rect.anchoredPosition.y;
            }

            public void SetPosition(GameObject go)
            {
                xPosition = go.transform.position.x;
                yPosition = go.transform.position.y;
                zPosition = go.transform.position.z;
            }

            #endregion

            #endregion

            #region Data Getters

            #region Container Data

            public CallbackData<T> GetContainer<T>(ContainerViewSpaceType viewSpaceType) where T : Transform
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (viewSpaceType != ContainerViewSpaceType.None)
                {
                    switch (viewSpaceType)
                    {
                        case ContainerViewSpaceType.Screen:

                            callbackResults.result = "Screen Container Found.";
                            callbackResults.data = sceneContainer as T;
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;

                        case ContainerViewSpaceType.Scene:

                            callbackResults.result = "Scene Container Found.";
                            callbackResults.data = screenContainer as T;
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;
                    }
                }
                else
                {
                    callbackResults.result = "Container Request's View Space Is Set To Null - Invalid Operation.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public Callback GetActive()
            {
                Callback callbackResults = new Callback();

                if(sceneContainer != null && sceneContainer.gameObject.activeInHierarchy && sceneContainer.gameObject.activeSelf)
                {
                    callbackResults.result = $"Scene Container : {name} Is Active";
                    callbackResults.resultCode = Helpers.SuccessCode;

                    return callbackResults;
                }

                if (screenContainer != null && screenContainer.gameObject.activeInHierarchy && screenContainer.gameObject.activeSelf)
                {
                    callbackResults.result = $"Screen Container : {name} Is Active";
                    callbackResults.resultCode = Helpers.SuccessCode;

                    return callbackResults;
                }
                else
                {
                    callbackResults.result = $"Container : {name} Is Not Active Or Is Null";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public Callback HasContent()
            {
                Callback callbackResults = new Callback();

                if (sceneContainer != null)
                {
                    if(sceneContainer.childCount > 0)
                    {
                        callbackResults.result = $"Scene Container : {name} Has Content";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Scene Container : {name} Doesn't Have Content";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }

                    return callbackResults;
                }

                if (screenContainer != null)
                {
                    if (screenContainer.childCount > 0)
                    {
                        callbackResults.result = $"Screen Container : {name} Has Content";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Screen Container : {name} Doesn't Have Content";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }

                    return callbackResults;
                }

                callbackResults.result = $"Container Is Null / Missing";
                callbackResults.resultCode = Helpers.ErrorCode;

                return callbackResults;
            }

            public RectTransform GetScreenContainer() => screenContainer;

            #endregion

            #region Size Data

            public float GetWidth(ContainerViewSpaceType viewSpaceType) => (width != 0)? width : ((viewSpaceType == ContainerViewSpaceType.Screen)? screenContainer.sizeDelta.x : sceneContainer.transform.localScale.x);
            public float GetHeight(ContainerViewSpaceType viewSpaceType) => (height != 0) ? height : ((viewSpaceType == ContainerViewSpaceType.Screen) ? screenContainer.sizeDelta.y : sceneContainer.transform.localScale.y);
            public float GetDepth() => (depth != 0)? depth : sceneContainer.transform.localScale.x;

            #endregion

            #region Position Data

            public float GetXPosition(ContainerViewSpaceType viewSpaceType) => (xPosition != 0) ? xPosition : ((viewSpaceType == ContainerViewSpaceType.Screen) ? screenContainer.anchoredPosition.x : sceneContainer.transform.position.x);
            public float GetYPosition(ContainerViewSpaceType viewSpaceType) => (yPosition != 0) ? yPosition : ((viewSpaceType == ContainerViewSpaceType.Screen) ? screenContainer.anchoredPosition.y : sceneContainer.transform.position.y);
            public float GetZPosition() => (zPosition != 0)? zPosition : sceneContainer.transform.position.z;

            public Vector3 GetPosition() => new Vector3(xPosition, yPosition, zPosition);

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public abstract class DynamicContainerBase : AppMonoBaseClass, IContainerBase
        {
            #region Components

            [Space(5)]
            [SerializeField]
            protected ScreenType screenType = ScreenType.None;

            [Space(5)]
            [SerializeField]
            protected ContentContainerType containerType = ContentContainerType.None;

            [Space(5)]
            [SerializeField]
            protected ContainerViewSpaceType viewSpace = ContainerViewSpaceType.None;

            [Space(5)]
            [SerializeField]
            protected ScreenUIPlacementType screenViewUIPlacementType = ScreenUIPlacementType.None;

            [Space(5)]
            [SerializeField]
            protected OrderInLayerType orderInLayerType = OrderInLayerType.None;

            #endregion

            #region Main

            #region Initialization

            public void Init() => OnInitialization();

            #endregion

            public void UpdateContainer()
            {

            }

            #region Content Clear

            public void Clear(bool showSpinner = false, Action<Callback> callback = null)
            {
                try
                {
                    OnClear(showSpinner, onClearCallbackResults => { callback?.Invoke(onClearCallbackResults); });

                    //callback?.Invoke(callbackResults);
                }
                catch (Exception exception)
                {
                    LogError(exception.Message, this);
                    throw exception;
                }
            }

            public async Task<Callback> ClearAsync(bool showSpinner = false) => await OnClearAsync(showSpinner);

            #endregion

            #region Container States

            public Callback GetActive()
            {
                Callback callbackResults = new Callback(Helpers.GetAppComponentValid(gameObject, "Dynamic Container", "Dynamic Container Is Null - Invalid Operation."));

                if (callbackResults.Success())
                {
                    if (gameObject.GetActive() && GetContainerType().Success())
                    {
                        callbackResults.result = $"Container : {GetName()} - With View Space : {GetViewSpace().GetData()} - Of Type : {GetContainerType().GetData()} Is Active";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Container : {GetName()} - With View Space : {GetViewSpace().GetData()} - Of Type : {GetContainerType().GetData()} Is Not Active";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<int> GetContentCount()
            {
                CallbackData<int> callbackResults = new CallbackData<int>(GetContainer<Transform>());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"There Are : {GetContainer<Transform>().data.childCount} Contents Inside Container : {GetName()} - Of Type {GetContainerType().GetData()}";
                    callbackResults.data = GetContainer<Transform>().data.childCount;
                }

                return callbackResults;
            }

            public CallbackData<bool> ContainerHasContent()
            {
                CallbackData<bool> callbackResults = new CallbackData<bool>(GetContentCount());

                if (callbackResults.Success())
                {
                    if (GetContentCount().data > 0)
                    {
                        callbackResults.result = $"Container : {GetName()} Of Type : {GetContainerType().GetData()} Has : {GetContentCount().GetData()} Content(s).";
                        callbackResults.data = true;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Container : {GetName()} Of Type : {GetContainerType().GetData()} Has No Content.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<int> GetLastContentIndex()
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                callbackResults.result = $"Container : {GetName()} Of Type : {GetContainerType().GetData()}'s Last Content Index Is At : {GetContentCount().GetData()}";
                callbackResults.data = GetContentCount().GetData();

                return callbackResults;
            }

            public bool IsContentActive(string contentName) => gameObject != null && gameObject.activeSelf && gameObject.activeInHierarchy;

            public bool IsContentActive(int contentID)
            {
                return false;
            }

            #endregion

            #region Data Setters

            public void SetScreenType(ScreenType screenType) => this.screenType = screenType;

            public void SetContentContainerType(ContentContainerType containerType) => this.containerType = containerType;

            public void SetContainerViewSpaceType(ContainerViewSpaceType viewSpace) => this.viewSpace = viewSpace;

            public void SetScreenUIPlacementType(ScreenUIPlacementType screenViewUIPlacementType) => this.screenViewUIPlacementType = screenViewUIPlacementType;

            public void SetOrderInLayerType(OrderInLayerType orderInLayerType) => this.orderInLayerType = orderInLayerType;

            #endregion

            #region Data Getters

            public CallbackData<T> GetContainer<T>() where T : Transform
            {
                CallbackData<T> callbackResults = new CallbackData<T>(GetViewSpace());

                if (callbackResults.Success())
                {
                    if (GetViewSpace().data == ContainerViewSpaceType.Screen)
                    {
                        callbackResults.result = $"Screen Container : {name} Found";
                        callbackResults.data = GetComponent<RectTransform>() as T;
                        callbackResults.resultCode = Helpers.SuccessCode;

                        return callbackResults;
                    }

                    if (GetViewSpace().data == ContainerViewSpaceType.Scene)
                    {
                        callbackResults.result = $"Scene Container : {name} Found";
                        callbackResults.data = GetComponent<Transform>() as T;
                        callbackResults.resultCode = Helpers.SuccessCode;

                        return callbackResults;
                    }
                }


                return callbackResults;
            }

            public CallbackData<ContentContainerType> GetContainerType()
            {
                CallbackData<ContentContainerType> callbackResults = new CallbackData<ContentContainerType>();

                if (containerType != ContentContainerType.None)
                {
                    callbackResults.result = $"Container : {GetName()}'s Container Type Is Set To : {containerType}";
                    callbackResults.data = containerType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Container : {GetName()}'s Container Type Is Set To Default : NONE";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public CallbackData<ScreenType> GetScreenType()
            {
                CallbackData<ScreenType> callbackResults = new CallbackData<ScreenType>();

                if (screenType != ScreenType.None)
                {
                    callbackResults.result = $"Container : {GetName()}'s Screen Type Is Set To : {containerType}";
                    callbackResults.data = screenType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Container : {GetName()}'s Screen Type Is Set To Default : {screenType} - Invalid Operation - Please Assign Container Screen Type Value.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public CallbackData<ScreenUIPlacementType> GetScreenViewUIPlacementType()
            {
                var callbackResults = new CallbackData<ScreenUIPlacementType>(GetViewSpace());

                if (callbackResults.Success())
                {
                    var viewSpace = GetViewSpace().GetData();

                    if (viewSpace == ContainerViewSpaceType.Screen)
                    {
                        if (screenViewUIPlacementType != ScreenUIPlacementType.None)
                        {
                            callbackResults.result = $"Container : {GetName()}'s Container Screen UI Placement Type Is Set To : {screenViewUIPlacementType}";
                            callbackResults.data = screenViewUIPlacementType;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Container : {GetName()}'s Container Screen UI Placement Type Is Set To Default : NONE - Invalid Operation - Not Applicable To Screen Space UI - Please Check Here";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Container : {GetName()}'s Container Screen UI Placement Type Is Set To : {screenViewUIPlacementType}";
                        callbackResults.data = screenViewUIPlacementType;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<DynamicContainerData> GetScreenViewDimensions()
            {
                CallbackData<DynamicContainerData> callbackResults = new CallbackData<DynamicContainerData>(GetViewSpace());

                if (callbackResults.Success())
                {
                    switch (GetViewSpace().data)
                    {
                        case ContainerViewSpaceType.Screen:

                            break;

                        case ContainerViewSpaceType.Scene:

                            break;
                    }
                }

                return callbackResults;
            }

            public CallbackData<ContainerViewSpaceType> GetViewSpace()
            {
                CallbackData<ContainerViewSpaceType> callbackResults = new CallbackData<ContainerViewSpaceType>();

                if (viewSpace != ContainerViewSpaceType.None)
                {
                    callbackResults.result = $"Container : {GetName()}'s View Space Type Is Set To : {viewSpace}";
                    callbackResults.data = viewSpace;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Container : {GetName()}'s View Space Type Is Set To Default : {orderInLayerType} - Invalid Operation - Possible Fix, Please Assign Value In The Editor Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public CallbackData<OrderInLayerType> GetOrderInLayerType()
            {
                var callbackResults = new CallbackData<OrderInLayerType>();

                if (orderInLayerType != OrderInLayerType.None)
                {
                    callbackResults.result = $"Container : {GetName()}'s View Order In Layer Type Is Set To : {orderInLayerType}";
                    callbackResults.data = orderInLayerType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Container : {GetName()}'s View Space Type Is Set To Default : {orderInLayerType}- Invalid Operation - Possible Fix, Please Assign Value In The Editor Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion

            #region Abstrcat

            protected abstract void OnInitialization();
            protected abstract void OnClear(bool showSpinner = false, Action<Callback> callback = null);
            protected abstract Task<Callback> OnClearAsync(bool showSpinner = false);

            #endregion

            #region Contents

            public void AddContent<T>(T content, bool keepWorldPosition = false, bool isActive = true, bool updateContainer = false, Action<Callback> callback = null) where T : SelectableDynamicContent
            {
                try
                {
                    Callback callbackResults = new Callback(GetContainer<Transform>());

                    if (callbackResults.Success())
                    {
                        callbackResults.SetResult(GetActive());

                        if (callbackResults.Success())
                        {
                            Helpers.GetAppComponentValid(content, content.GetName(), hasScreenWidgetCallbackResults =>
                            {
                                callbackResults.SetResult(hasScreenWidgetCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(GetContainer<Transform>());

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(GetViewSpace());

                                        if (callbackResults.Success())
                                        {
                                            content.gameObject.transform.SetParent(GetContainer<Transform>().data, keepWorldPosition);

                                            if (updateContainer)
                                                OnUpdatedContainerSize();
                                        }
                                    }
                                }
                                else
                                {
                                    callbackResults.result = "Add Dynamic Widget Failed : Screen Widget Is Missing / Null.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }

                            }, "Check Screen Widget Component Validity On Add Dynamic Widget Failed : Screen Widget Component Param Is Missing / Null / Not Assigned From Calling Function.");
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                catch (NullReferenceException exception)
                {
                    LogError($"Adding Dynamic Content To Container : {GetName()} Failed With A Null Reference Exception : {exception.Message} - Please Fix This Before Procceeding As It's Breaking The App's Excecution Flow.", this);
                    return;
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }

            public void AddContent<T>(T content, bool keepWorldPosition = false, bool isActive = true, bool updateContainer = false, bool overrideActiveState = false, Action<Callback> callback = null) where T : SelectableDynamicContent
            {
                try
                {
                    Callback callbackResults = new Callback(GetContainer<Transform>());

                    if (callbackResults.Success())
                    {

                        if(!overrideActiveState)
                            callbackResults.SetResult(GetActive());

                        if (callbackResults.Success())
                        {
                            Helpers.GetAppComponentValid(content, content.GetName(), hasScreenWidgetCallbackResults =>
                            {
                                callbackResults.SetResult(hasScreenWidgetCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(GetContainer<Transform>());

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(GetViewSpace());

                                        if (callbackResults.Success())
                                        {
                                            content.GetSceneObject().transform.SetParent(GetContainer<Transform>().data, keepWorldPosition);
                                        }
                                    }
                                }
                                else
                                {
                                    callbackResults.result = "Add Dynamic Widget Failed : Screen Widget Is Missing / Null.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }

                            }, "Check Screen Widget Component Validity On Add Dynamic Widget Failed : Screen Widget Component Param Is Missing / Null / Not Assigned From Calling Function.");
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                catch (NullReferenceException exception)
                {
                    LogError($"Adding Dynamic Content To Container : {name} Failed With A Null Reference Exception : {exception.Message} - Please Fix This Before Procceeding As It's Breaking The App's Excecution Flow.", this);
                    return;
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }

            public void AddContent<T, U, V>(T content, bool keepWorldPosition = false, bool overrideActiveState = false, Action<Callback> callback = null) where T : UIScreenWidget<U, V> where U : Enum where V : Enum
            {
                try
                {
                    Callback callbackResults = new Callback(GetContainer<Transform>());

                    if (callbackResults.Success())
                    {
                        if(!overrideActiveState)
                            callbackResults.SetResult(GetActive());

                        if (callbackResults.Success())
                        {
                            Helpers.GetAppComponentValid(content, content.GetName(), hasScreenWidgetCallbackResults =>
                            {
                                callbackResults.SetResult(hasScreenWidgetCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(GetContainer<Transform>());

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(GetViewSpace());

                                        if (callbackResults.Success())
                                            content.GetSceneObject().AddToPlacementContainer(GetContainer<Transform>().GetData(), keepWorldPosition);
                                    }
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            }, "Check Screen Widget Component Validity On Add Dynamic Widget Failed : Screen Widget Component Param Is Missing / Null / Not Assigned From Calling Function.");
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                    callback?.Invoke(callbackResults);
                }
                catch (NullReferenceException exception)
                {
                    LogError($"Adding Dynamic Content To Container : {name} Failed With A Null Reference Exception : {exception.Message} - Please Fix This Before Procceeding As It's Breaking The App's Excecution Flow.", this);
                    return;
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }

            /// <summary>
            /// Adds The UI Widget To A Dynamic Snreen Container.
            /// </summary>
            /// <typeparam name="T">The Component Type .eg - UScreenHandler, Widget, etc - Of Type UI Screen Widget</typeparam>
            /// <typeparam name="U">The Content Type - e.g - Screen Type, Widget Type, Selectable Widget Type, etc - As An Enum Value Type</typeparam>
            /// <typeparam name="V">The Content Type - e.g - Screen Type, Widget Type, Selectable Widget Type, etc - As An Enum Value Type</typeparam>
            /// <param name="uiScreenWidgetComponent">The Content To Be Added To Container</param>
            /// <param name="keepWorldPosition">Optional To Keep The World Position Of The Added Content.</param>
            /// <param name="isActive">Sets If The State Of The Object Added Should Be Active Or Inactive</param>
            /// <param name="overrideContainerActiveState">Overrides Checing If The Container Is Active Or Not Before Adding Content - Content Can't Be Added To InACtive Containers.</param>
            /// <param name="callback">Callback Results Of This Execution</param>
            public void AddContent<T, U, V>(T uiScreenWidgetComponent, bool keepWorldPosition = false, bool isActive = true, bool overrideContainerActiveState = false, bool updateContainer = true, Action<Callback> callback = null) where T : UIScreenWidget<U, V> where U : Enum where V : Enum
            {
                try
                {
                    Callback callbackResults = new Callback(GetContainer<Transform>());

                    if (callbackResults.Success())
                    {                 
                        if(!overrideContainerActiveState)
                            callbackResults.SetResult(GetActive());

                        if (callbackResults.Success())
                        {
                            Helpers.GetAppComponentValid(uiScreenWidgetComponent, uiScreenWidgetComponent.GetName(), hasScreenWidgetCallbackResults =>
                            {
                                callbackResults.SetResult(hasScreenWidgetCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(GetContainer<Transform>());

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(GetViewSpace());

                                        if (callbackResults.Success())
                                        {
                                            if(isActive)
                                                uiScreenWidgetComponent.GetSceneObject().Show();
                                            else
                                                uiScreenWidgetComponent.GetSceneObject().Hide();

                                            uiScreenWidgetComponent.GetSceneObject().AddToPlacementContainer(GetContainer<RectTransform>().GetData(), keepWorldPosition);

                                            if (updateContainer)
                                            {
                                                UpdateContentOrderInLayer(updateOrderInLayerCallbackResults => 
                                                {
                                                    callbackResults.SetResult(updateOrderInLayerCallbackResults);

                                                    if(callbackResults.Success())
                                                    {
                                                        OnUpdatedContainerSize(updateContainerSizeCallbackResults => 
                                                        {
                                                            callbackResults.SetResult(updateContainerSizeCallbackResults);

                                                            if(callbackResults.UnSuccessful())
                                                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                        });
                                                    }
                                                    else
                                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                });
                                            }
                                        }
                                        else
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                    }
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            }, "Check Screen Widget Component Validity On Add Dynamic Widget Failed : Screen Widget Component Param Is Missing / Null / Not Assigned From Calling Function.");
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                    callback?.Invoke(callbackResults);
                }
                catch (NullReferenceException exception)
                {
                    LogError($"Adding Dynamic Content To Container : {name} Failed With A Null Reference Exception : {exception.Message} - Please Fix This Before Procceeding As It's Breaking The App's Excecution Flow.", this);
                    return;
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }

            public async Task<Callback> AddContentAsync<T>(T content, bool keepWorldPosition = false, bool isActive = true, bool updateContainer = false, bool overrideActiveState = false) where T : SelectableDynamicContent
            {
                try
                {
                    Callback callbackResults = new Callback(GetContainer<Transform>());

                    if (callbackResults.Success())
                    {
                        if(!overrideActiveState)
                            callbackResults.SetResult(GetActive());

                        if (callbackResults.Success())
                        {
                            Helpers.GetAppComponentValid(content, content?.name, hasScreenWidgetCallbackResults =>
                            {
                                callbackResults.SetResult(hasScreenWidgetCallbackResults);

                                if (callbackResults.Success())
                                {
                                    callbackResults.SetResult(GetContainer<Transform>());

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(GetViewSpace());

                                        if (callbackResults.Success())
                                            content.GetSceneObject().AddToPlacementContainer(GetContainer<Transform>().GetData(), keepWorldPosition);
                                        else
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                    }
                                    else
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                            }, "Check Screen Widget Component Validity On Add Dynamic Widget Failed : Screen Widget Component Param Is Missing / Null / Not Assigned From Calling Function.");
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                    if (updateContainer)
                        await OnUpdatedContainerSizeAsync();

                    return callbackResults;
                }
                catch (NullReferenceException exception)
                {
                    LogError($"Adding Dynamic Content To Container : {name} Failed With A Null Reference Exception : {exception.Message} - Please Fix This Before Procceeding As It's Breaking The App's Excecution Flow.", this);
                    return null;
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }

            public void SetContainerSize(Vector3 size, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetViewSpace());

                if (callbackResults.Success())
                {
                    switch (GetViewSpace().data)
                    {
                        case ContainerViewSpaceType.Screen:

                            GetContainer<RectTransform>().data.sizeDelta = size;

                            break;

                        case ContainerViewSpaceType.Scene:

                            GetContainer<Transform>().data.localScale = size;

                            break;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Updates

            protected abstract void UpdateContentOrderInLayer(Action<Callback> callback = null);

            protected abstract void OnUpdatedContainerSize(Action<CallbackData<Vector2>> callback = null);
            protected abstract Task<CallbackData<Vector2>> OnUpdatedContainerSizeAsync();

            protected abstract void OnContainerUpdate();
            protected abstract Task<Callback> OnContainerUpdateAsync();

            #endregion

            #endregion
        }

        [Serializable]
        public abstract class DynamicContainer : DynamicContainerBase, IContainer
        {
            #region Components

            [Space(5)]
            [SerializeField]
            bool selectableContent;

            [Space(5)]
            [SerializeField]
            protected ContentRecycleContainer recycleContainer = new ContentRecycleContainer();

            #endregion

            #region Main

            #region Container States

            public bool SelectableContent() => selectableContent;

            #endregion

            #region Data Getters

            public CallbackData<UIScreenWidget> GetScreenContent(string contentName)
            {
                return null;
            }

            #endregion

            #endregion
        }

        #endregion

        #region App Information

        [Serializable]
        public class AppInfo : SerializableData
        {
            #region Components

            public Profile profile;
            public LicenseKey licenseKey;

            #endregion

            #region Main

            public AppInfo()
            {

            }

            public AppInfo(Profile profile, LicenseKey licenseKey)
            {
                this.profile = profile;
                this.licenseKey = licenseKey;
            }

            #region Data Setters

            public void SetLicenseKey(LicenseKey licenseKey) => this.licenseKey = licenseKey;
            public void SetProfile(Profile profile) => this.profile = profile;

            #endregion

            #region Data Getters

            public LicenseKey GetLicenseKey() => licenseKey;
            public Profile GetProfile() => profile;

            #endregion

            public CallbackData<LicenseKey> CompareLicense(LicenseKey licenseKey)
            {
                CallbackData<LicenseKey> callbackResults = new CallbackData<LicenseKey>();

                if(this.licenseKey.GetAppKey() == licenseKey.GetAppKey())
                {
                    callbackResults.result = "License App Key Matched";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "License App Key Doesn't Match";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class LicenseKey
        {
            #region Components

            public uint appKey;
            public string activationKey;
            public List<DeviceInfo> deviceInfoList;
            public LicenseType licenseType;
            public bool active;

            public DateTimeComponent activationStartDate, activitionEndDate;

            #endregion

            #region Main

            public LicenseKey()
            {

            }

            public LicenseKey(uint appKey, string activationKey, List<DeviceInfo> deviceInfoList, LicenseType licenseType, bool active, DateTimeComponent activationStartDate, DateTimeComponent activitionEndDate = null)
            {
                this.appKey = appKey;
                this.activationKey = activationKey;
                this.deviceInfoList = deviceInfoList;
                this.licenseType = licenseType;
                this.active = active;
                this.activationStartDate = activationStartDate;
                this.activitionEndDate = activitionEndDate;
            }

            #region Data Setters

            public void SetAppKey(uint appKey) => this.appKey = appKey;
            public void SetActivationKey(string activationKey) => this.activationKey = activationKey;
            public void SetDeviceInfo(List<DeviceInfo> deviceInfo) => this.deviceInfoList = deviceInfo;
            public void SetLicense(LicenseType licenseType) => this.licenseType = licenseType;
            public void SetActive(bool active) => this.active = active;

            #endregion

            #region Data Getters

            public uint GetAppKey() => appKey;
            public string GetActivationKey() => activationKey;
            public List<DeviceInfo> GetDeviceIinfoList() => deviceInfoList;
            public LicenseType GetLicense() => licenseType;
            public bool GetActive() => active;

            #endregion

            #endregion
        }

        #endregion

        #region Database

        public class DatabaseAssets : IDictionary
        {
            public object this[object key] { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

            public bool IsFixedSize => throw new NotImplementedException();

            public bool IsReadOnly => throw new NotImplementedException();

            public ICollection Keys => throw new NotImplementedException();

            public ICollection Values => throw new NotImplementedException();

            public int Count => throw new NotImplementedException();

            public bool IsSynchronized => throw new NotImplementedException();

            public object SyncRoot => throw new NotImplementedException();

            public void Add(object key, object value)
            {
                throw new NotImplementedException();
            }

            public void Clear()
            {
                throw new NotImplementedException();
            }

            public bool Contains(object key)
            {
                throw new NotImplementedException();
            }

            public void CopyTo(Array array, int index)
            {
                throw new NotImplementedException();
            }

            public IDictionaryEnumerator GetEnumerator()
            {
                throw new NotImplementedException();
            }

            public void Remove(object key)
            {
                throw new NotImplementedException();
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                throw new NotImplementedException();
            }
        }

        #endregion

        #region Loading Data

        #region Screen Load Data

        [Serializable]
        public class RuntimeInstanceInfo : AppComponent
        {
            #region Components

            public RuntimeExecution runtimeReference = RuntimeExecution.None;

            int runtimeValue;

            #endregion

            #region Main

            #region Data Setters

            public void SetRuntimeValueType(RuntimeExecution runtimeReference) => this.runtimeReference = runtimeReference;

            public void SetRuntimeData(int runtimeValue) => this.runtimeValue = runtimeValue;

            #endregion

            #region Data Getters

            public int GetScreenDelayTime()
            {
                var sceneAssetsManagerCallbackResults = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name);

                int delayTime = 0; 

                if(sceneAssetsManagerCallbackResults.Success())
                {
                    var sceneAssetsManager = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).data;
                    delayTime = Helpers.ConvertSecondsFromFloatToMillisecondsInt(sceneAssetsManager.GetDefaultExecutionValue(runtimeReference).value);
                }

                return delayTime;
            }

            public RuntimeExecution GetRuntimeValueType() => runtimeReference;

            #endregion

            #endregion
        }

        [Serializable]
        public class ScreenLoadInfoInstance : AppComponent
        {
            #region Components

            public ScreenConfigDataPacket screenConfigDataPacket = new ScreenConfigDataPacket();

            [Space(5)]
            public List<SequenceInstance> sequences = new List<SequenceInstance>();

            [Space(5)]
            public bool initialScreen = false;

            [Space(5)]
            public List<RuntimeInstanceInfo> runtimeInstanceInfoList = new List<RuntimeInstanceInfo>();

            [HideInInspector]
            public Screen referencedScreen;

            #endregion

            #region Main

            #region Constructors

            public ScreenLoadInfoInstance()
            {

            }

            public ScreenLoadInfoInstance(string name, ScreenConfigDataPacket screenConfigDataPacket, bool initialScreen)
            {
                this.name = name;
                this.screenConfigDataPacket = screenConfigDataPacket;
                this.initialScreen = initialScreen;
            }

            #endregion

            #region Initialization

            public Callback LibraryInitialized()
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(runtimeInstanceInfoList, "Runtime Instance Info List", runtimeInstanceInfoCallbackResults =>
                {
                    callbackResults.SetResults(runtimeInstanceInfoCallbackResults);

                    if (callbackResults.Success())
                        callbackResults.result = $"Screen Load Info Instance Initialization Success - Initialized With {runtimeInstanceInfoList.Count} Screen Load Info Instances.";
                    else
                        callbackResults.result = "Screen Load Info Instance Initialization Failed.";
                });

                return callbackResults;
            }

            #endregion

            #region Data Setters

            public void SetReferencedScreen(Screen referencedScreen) => this.referencedScreen = referencedScreen;

            #endregion

            #region Data Getters

            public CallbackData<ScreenConfigDataPacket> GetScreenConfigDataPacket()
            {
                var callbackResults = new CallbackData<ScreenConfigDataPacket>(screenConfigDataPacket.Initialized());

                if(callbackResults.Success())
                    callbackResults.data = screenConfigDataPacket;

                return callbackResults;
            }

            public CallbackData<ScreenType> GetScreenType()
            {
                var callbackResults = new CallbackData<ScreenType>(GetScreenConfigDataPacket());

                if (callbackResults.Success())
                    callbackResults.data = GetScreenConfigDataPacket().GetData().GetType().GetData();

                return callbackResults;
            }

            public bool InitialScreen() => initialScreen;

            public List<SequenceInstance> GetSequenceInstanceList() => sequences;
            public SequenceInstance[] GetSequenceInstanceArray() => sequences.ToArray();

            public CallbackData<Screen> GetReferencedScreen()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                if(referencedScreen != null)
                {
                    callbackResults.result = $"Screen Load Info Instance - Referenced Screen : {referencedScreen.name} Found";
                    callbackResults.data = referencedScreen;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Screen Load Info Instance - Get Referenced Screen Failed - There Is No Referenced Screen Found";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public bool HasSequenceInstances() => sequences.Count > 0;

            public void RemoveSequenceInstanceData(LoadingSequenceID loadingSequenceID, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var sequence = sequences.Find(sequence => sequence.GetSequenceID() == loadingSequenceID);

                if (sequence != null)
                {
                    sequences.Remove(sequence);

                    if(!sequences.Contains(sequence))
                    {
                        callbackResults.result = $"Sequence Insctance Of ID : {loadingSequenceID} Has Been Successfully Removed.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Remove Sequence Insctance Of ID : {loadingSequenceID} - Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Sequence Insctance Of ID : {loadingSequenceID} Not Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Screen Load Time Data

            #region Time Execution

            public async Task<CallbackData<int>> OnScreenLoadExecutionTime(RuntimeExecution runtimeReference)
            {
                CallbackData<int> callbackResults = new CallbackData<int>(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "Scene Assets Manager instance Is Not Yet Initialized."));

                if (callbackResults.Success())
                {
                    var sceneAssetsManager = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                    callbackResults.SetResults(GetRuntimeInstanceInfo(runtimeReference));

                    if (callbackResults.Success())
                    {
                        callbackResults.SetResults(sceneAssetsManager.GetScreenLoadInfoInstanceFromLibrary(GetScreenType().GetData()));

                        if (callbackResults.Success())
                        {
                            //var screenLoadInfo = sceneAssetsManager.GetScreenLoadInfoInstanceFromLibrary(GetScreenType().GetData()).GetData();

                            callbackResults.SetResult(GetRuntimeInstanceInfo(runtimeReference));

                            if (callbackResults.Success())
                            {
                                var runtimeInstanceInfo = GetRuntimeInstanceInfo(runtimeReference).GetData();

                                await Task.Delay(runtimeInstanceInfo.GetScreenDelayTime());

                                callbackResults.result = $"Screen Of Type : {GetScreenType()} On Loaded Delay Completed.";
                                callbackResults.data = runtimeInstanceInfo.GetScreenDelayTime();
                            }
                        }
                    }
                }

                return callbackResults;
            }

            #endregion

            #region Runtime Instance Info 

            public void GetRuntimeInstanceInfo(RuntimeExecution runtimeExecution, Action<CallbackData<RuntimeInstanceInfo>> callback)
            {
                CallbackData<RuntimeInstanceInfo> callbackResults = new CallbackData<RuntimeInstanceInfo>(LibraryInitialized());

                if(callbackResults.Success())
                {
                    var runtimeInstanceInfo = runtimeInstanceInfoList.Find(runtimeInstance => runtimeInstance.GetRuntimeValueType() == runtimeExecution);

                    Helpers.GetAppComponentValid(runtimeExecution, "Runtime Instance Info", runtimeInstanceInfoCallbackResults => 
                    {
                        callbackResults.SetResults(runtimeInstanceInfoCallbackResults);

                        if(callbackResults.Success())
                        {
                            callbackResults.result = $"Get Runtime Instance Info Success - Found Runtime Instance Info Of Type : {runtimeExecution}";
                        }

                    }, $"Get Runtime Instance Info Failed - Runtime Instance Info Of Type {runtimeExecution} Is Not Found In - Possible Causes - Not Assigned In The Inspector Panel");
                }

                callback.Invoke(callbackResults);
            }

            public CallbackData<RuntimeInstanceInfo> GetRuntimeInstanceInfo(RuntimeExecution runtimeExecution)
            {
                CallbackData<RuntimeInstanceInfo> callbackResults = new CallbackData<RuntimeInstanceInfo>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    var runtimeInstanceInfo = runtimeInstanceInfoList.Find(runtimeInstance => runtimeInstance.GetRuntimeValueType() == runtimeExecution);

                    Helpers.GetAppComponentValid(runtimeExecution, "Runtime Instance Info", runtimeInstanceInfoCallbackResults =>
                    {
                        callbackResults.SetResults(runtimeInstanceInfoCallbackResults);

                        if (callbackResults.Success())
                            callbackResults.SetResults($"Get Runtime Instance Info Success - Found Runtime Instance Info Of Type : {runtimeExecution}", data: runtimeInstanceInfo);

                    }, $"Get Runtime Instance Info Failed - Runtime Instance Info Of Type {runtimeExecution} Is Not Found In - Possible Causes - Not Assigned In The Inspector Panel");
                }

                return callbackResults;
            }

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public class ScreenLoadInfoInstanceLibrary : DataDebugger
        {
            #region Components

            [Space(10)]
            public List<ScreenLoadInfoInstance> screenLoadInfoInstances = new List<ScreenLoadInfoInstance>();

            #endregion

            #region Main

            #region Initialization

            public Callback LibraryInitialized()
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(screenLoadInfoInstances, "Screen Load Info Instance List", screenLoadInfoInstancesCallbackResults =>
                {
                    callbackResults.SetResults(screenLoadInfoInstancesCallbackResults);

                    if (callbackResults.Success())
                        callbackResults.result = $"Screen Load Info Instance Library Initialization Success - Initialized With {screenLoadInfoInstances.Count} Screen Load Info Instances.";
                    else
                        callbackResults.result = "Screen Load Info Instance Library Initialization Failed.";
                });

                return callbackResults;
            }

            #endregion

            #region Screens Info Instances

            public CallbackDataList<ScreenLoadInfoInstance> GetScreenLoadInfoInstances()
            {
                CallbackDataList<ScreenLoadInfoInstance> callbackResults = new CallbackDataList<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"{GetScreenLoadInfoInstancesCount()} Screen Load Info Instances Has Been Successfully Found.";
                    callbackResults.data = screenLoadInfoInstances;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Getting Screen Load Info Instances Failed -  Screen Load Info Instances Have not Been Initialized Yet.";
                    callbackResults.data = default;
                }

                return callbackResults;
            }

            public void GetScreenLoadInfoInstances(Action<CallbackDataList<ScreenLoadInfoInstance>> callback)
            {
                CallbackDataList<ScreenLoadInfoInstance> callbackResults = new CallbackDataList<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"{GetScreenLoadInfoInstancesCount()} Screen Load Info Instances Has Been Successfully Found.";
                    callbackResults.data = screenLoadInfoInstances;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Getting Screen Load Info Instances Failed -  Screen Load Info Instances Have not Been Initialized Yet.";
                    callbackResults.data = default;
                }

                callback.Invoke(callbackResults);
            }

            public int GetScreenLoadInfoInstancesCount() => screenLoadInfoInstances.Count;

            #endregion

            #region Screen Load Info

            public CallbackData<ScreenLoadInfoInstance> GetScreenLoadInfoInstance(ScreenType screenType)
            {
                CallbackData<ScreenLoadInfoInstance> callbackResults = new CallbackData<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    var screenLoadInfoInstance = screenLoadInfoInstances.Find(screenLoadInfo => screenLoadInfo.GetScreenType().GetData() == screenType);

                    if (screenLoadInfoInstance != null)
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Success - Screen Load Info Instance : {screenLoadInfoInstance.GetName()} For Screen Type : {screenLoadInfoInstance.GetScreenType()} Successfully Found.";
                        callbackResults.data = screenLoadInfoInstance;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Failed - Screen Load Info Instance For Screen Type : {screenLoadInfoInstance.GetScreenType()} Not Found In Screen Load Info Instance Library - Possible Cause => Not Yet Initialized In The Inspector Panel, Please See Scene Assets Manager To Initialize Or Visit Here.."; ;
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public void GetScreenLoadInfoInstance(ScreenType screenType, Action<CallbackData<ScreenLoadInfoInstance>> callback)
            {
                CallbackData<ScreenLoadInfoInstance> callbackResults = new CallbackData<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    var screenLoadInfoInstance = screenLoadInfoInstances.Find(screenLoadInfo => screenLoadInfo.GetScreenType().GetData() == screenType);

                    if (screenLoadInfoInstance != null)
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Success - Screen Load Info Instance : {screenLoadInfoInstance.GetName()} For Screen Type : {screenLoadInfoInstance.GetScreenType()} Successfully Found.";
                        callbackResults.data = screenLoadInfoInstance;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Failed - Screen Load Info Instance For Screen Type : {screenType} Not Found In Screen Load Info Instance Library - Possible Cause => Not Yet Initialized In The Inspector Panel, Please See Scene Assets Manager To Initialize Or Visit Here..";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            #region Initial Screen Load Info

            public CallbackData<ScreenLoadInfoInstance> GetInitialScreenLoadInfoInstance()
            {
                CallbackData<ScreenLoadInfoInstance> callbackResults = new CallbackData<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    var screenLoadInfoInstance = screenLoadInfoInstances.Find(screenLoadInfo => screenLoadInfo.InitialScreen() == true);

                    if (screenLoadInfoInstance != null)
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Success - Screen Load Info Instance : {screenLoadInfoInstance.GetName()} For Screen Type : {screenLoadInfoInstance.GetScreenType()} Successfully Found.";
                        callbackResults.data = screenLoadInfoInstance;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Get Initial Screen Load Info Instance Failed - Initial Screen Load Info Instance For Screen Type : {screenLoadInfoInstance.GetScreenType()} Not Found In Screen Load Info Instance Library - Possible Cause => Not Yet Initialized In The Inspector Panel, Please See Scene Assets Manager To Initialize Or Visit Here.."; ;
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public void GetInitialScreenLoadInfoInstance(Action<CallbackData<ScreenLoadInfoInstance>> callback)
            {
                CallbackData<ScreenLoadInfoInstance> callbackResults = new CallbackData<ScreenLoadInfoInstance>(LibraryInitialized());

                if (callbackResults.Success())
                {
                    var screenLoadInfoInstance = screenLoadInfoInstances.Find(screenLoadInfo => screenLoadInfo.InitialScreen() == true);

                    if (screenLoadInfoInstance != null)
                    {
                        callbackResults.result = $"Get Screen Load Info Instance Success - Screen Load Info Instance : {screenLoadInfoInstance.GetName()} For Screen Type : {screenLoadInfoInstance.GetScreenType()} Successfully Found.";
                        callbackResults.data = screenLoadInfoInstance;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Get Initial Screen Load Info Instance Failed - Initial Screen Load Info Instance For Screen Type : {screenLoadInfoInstance.GetScreenType()} Not Found In Screen Load Info Instance Library - Possible Cause => Not Yet Initialized In The Inspector Panel, Please See Scene Assets Manager To Initialize Or Visit Here.."; ;
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class SequenceData : DataDebugger
        {
            #region Components

            public MessageFormat content = new MessageFormat();

            [Space(5)]
            public LoadingSequenceID sequenceID = LoadingSequenceID.Default;

            public string Name => name ?? "Loading Sequence Data Name Not Assigned.";

            bool completed = false;
            bool isRunning = false;

            #endregion

            #region Main

            public SequenceData()
            {
            }

            public SequenceData(string name, MessageFormat content, LoadingSequenceID sequenceID)
            {
                this.name = name;
                this.content = content;
                this.sequenceID = sequenceID;
            }

            public LoadingSequenceID GetSequenceID()
            {
                return sequenceID;
            }

            public void GetContent(Action<CallbackData<MessageFormat>> callback)
            {
                CallbackData<MessageFormat> callbackResults = new CallbackData<MessageFormat>();

                callbackResults.result = GetContent().Initialized().result;
                callbackResults.resultCode = GetContent().Initialized().resultCode;

                if (callbackResults.Success())
                    callbackResults.data = GetContent();

                callback.Invoke(callbackResults);
            }

            public MessageFormat GetContent()
            {
                return content;
            }

            public async Task<Callback> Execute()
            {
                try
                {
                    Callback callbackResults = new Callback(Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, "Screen UI Manager Instance Is Not Yet Initialized."));

                    if (callbackResults.Success())
                    {
                        var screenUIManager = Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, "Screen UI Manager Instance Is Not Yet Initialized.").data;

                        if (callbackResults.Success())
                        {
                            var messageDisplayerWidget = screenUIManager.GetScreenScreenOfType(ScreenType.LoadingScreen).GetData().GetWidget(WidgetType.MessageDisplayerWidget);

                            if (messageDisplayerWidget != null)
                            {
                                if (screenUIManager.GetCurrentScreenType().GetData() == ScreenType.LoadingScreen)
                                {
                                    messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.TitleDisplayer, GetContent().GetHeader());

                                    Run();

                                    if(IsRunning() && !Completed())
                                    {
                                        if(callbackResults.Success())
                                        {
                                            callbackResults.SetResults(Helpers.GetAppComponentValid(AppManager.Instance, AppManager.Instance.name, "App Manager Instance Is Not Yet Initialized."));

                                            if (callbackResults.Success())
                                            {
                                                var appManager = Helpers.GetAppComponentValid(AppManager.Instance, AppManager.Instance.name).data;

                                                if (GetContent().GetMessageList().Success())
                                                {
                                                    switch (GetSequenceID())
                                                    {
                                                        case LoadingSequenceID.Default:

                                                            break;

                                                        case LoadingSequenceID.CheckingNetworkConnection:

                                                            callbackResults.SetResults(Helpers.GetAppComponentValid(NetworkManager.Instance, NetworkManager.Instance.name, "Network Manager Instance Is Not Yet Initialized."));

                                                            if (callbackResults.Success())
                                                            {
                                                                var networkManager = Helpers.GetAppComponentValid(NetworkManager.Instance, NetworkManager.Instance.name).data;

                                                                callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.NetworkCheck));

                                                                if (callbackResults.Success())
                                                                {
                                                                    messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.NetworkCheck).data.message);

                                                                    callbackResults = await networkManager.CheckConnectionStatus();

                                                                    if (callbackResults.Success())
                                                                        OnCompletition();
                                                                    else
                                                                    {
                                                                        screenUIManager.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.LoadingWidget);

                                                                        SceneDataPackets networkDataPackets = new SceneDataPackets();

                                                                        networkDataPackets.SetReferencedScreenType(screenUIManager.GetCurrentScreenType().GetData());
                                                                        networkDataPackets.SetReferencedWidgetType(WidgetType.NetworkNotificationWidget);
                                                                        networkDataPackets.SetScreenBlurState(true);
                                                                        networkDataPackets.SetReferencedUIScreenPlacementType(ScreenUIPlacementType.ForeGround);

                                                                        screenUIManager.GetCurrentScreen().GetData().ShowWidget(networkDataPackets);
                                                                    }
                                                                }
                                                            }

                                                            break;

                                                        case LoadingSequenceID.AppInitialization:

                                                            if (callbackResults.Success())
                                                            {
                                                                #region Connecting To Server

                                                                callbackResults.SetResults(Helpers.GetAppComponentValid(NetworkManager.Instance, NetworkManager.Instance.name, "Network Manager Instance Is Not Yet Initialized."));

                                                                if (callbackResults.Success())
                                                                {
                                                                    var networkManager = Helpers.GetAppComponentValid(NetworkManager.Instance, NetworkManager.Instance.name).data;

                                                                    callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.ServerConnection));

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.ServerConnection).data.message);
                                                                        callbackResults = await networkManager.ServerConnected();
                                                                    }
                                                                }

                                                                #endregion

                                                                #region Synchronizing Data

                                                                callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.AppInfoSynchronization));

                                                                if (callbackResults.Success())
                                                                {
                                                                    messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.AppInfoSynchronization).data.message);
                                                                    callbackResults = await appManager.SynchronizingAppInfo();
                                                                }

                                                                #endregion

                                                                #region Creating Entry Point

                                                                callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.ServerEntryPoint));

                                                                if (callbackResults.Success())
                                                                {
                                                                    messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.AppInfoSynchronization).data.message);
                                                                    callbackResults = await appManager.CheckEntryPointAsync();
                                                                }

                                                                #endregion

                                                                if (callbackResults.Success())
                                                                    OnCompletition();
                                                                else
                                                                {
                                                                    LogInfo($" <+++++++++++++++++++++++++++++++++++++++++++++==========> Init Results {callbackResults.GetResult}", this);
                                                                }
                                                            }

                                                            break;

                                                        case LoadingSequenceID.CheckingDeviceCompatibility:

                                                            if (callbackResults.Success())
                                                            {
                                                                callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.DeviceCompitability));

                                                                if (callbackResults.Success())
                                                                {
                                                                    messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.DeviceCompitability).data.message);
                                                                    callbackResults = await appManager.GetCompatibilityStatusAsync();
                                                                }

                                                                if (callbackResults.Success())
                                                                    OnCompletition();
                                                                else
                                                                {
                                                                    LogInfo($" <+++++++++++++++++++++++++++++++++++++++++++++==========> Device Is Only 3D Compitable  - Show Compatiblity Message Pop Up", this);
                                                                }
                                                            }

                                                            break;

                                                        case LoadingSequenceID.AppSigning:

                                                            if (callbackResults.Success())
                                                            {
                                                                callbackResults.SetResults(Helpers.GetAppComponentValid(ProfileManager.Instance, ProfileManager.Instance.name, "Profile Manager Instance Is Not Yet Initialized."));

                                                                if (callbackResults.Success())
                                                                {
                                                                    var profileManager = Helpers.GetAppComponentValid(ProfileManager.Instance, ProfileManager.Instance.name).data;

                                                                    #region Profile Sync

                                                                    callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.ProfileSynchronization));

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.ProfileSynchronization).data.message);
                                                                        callbackResults = await profileManager.SynchronizingProfile();
                                                                    }

                                                                    #endregion

                                                                    #region App Sign In

                                                                    callbackResults.SetResult(GetContent().GetMessage(LoadingSequenceMessageType.SigningApp));

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        messageDisplayerWidget.SetUITextDisplayerValue(ScreenTextType.MessageDisplayer, GetContent().GetMessage(LoadingSequenceMessageType.SigningApp).data.message);
                                                                        callbackResults = await profileManager.AppSignInAsync();
                                                                    }

                                                                    #endregion
                                                                }

                                                                if (callbackResults.Success())
                                                                    OnCompletition();
                                                                else
                                                                {
                                                                    LogInfo($" <+++++++++++++++++++++++++++++++++++++++++++++==========> App Sign In Failed  - Show Sign In Failed Error Pop Up", this);
                                                                }
                                                            }

                                                            break;

                                                        case LoadingSequenceID.InitializingUserAssets:


                                                            break;

                                                        case LoadingSequenceID.InitializingXR:



                                                            break;
                                                    }
                                                }
                                                else
                                                    Log(GetContent().GetMessageList().GetResultCode, GetContent().GetMessageList().GetResult, this);
                                            }
                                        }
                                    }

                                    while (IsRunning() && !Completed())
                                    {

                                        //LogInfo($" <+++++++++++++++++++++++++++++++++++++++++++++==========> Execute Load Sequence - Runni8ng Sequence ID : {GetSequenceID()}", this);

                                        await Task.Yield();
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Load Sequence Failed - Current Screen : {screenUIManager.GetCurrentScreenType()} Is Not Valid For This Execution - Required Loading Screen - Please See Here.";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Message Displayer Widget Not Found For Screen : {screenUIManager.GetCurrentScreenType()}.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                    }

                    return callbackResults;
                }
                catch(Exception exception)
                {
                    throw exception;
                }
            }

            void OnCompletition() => completed = true;
            public bool Completed() => completed;

            void Run() => isRunning = true;

            public bool IsRunning() => isRunning; 

            #endregion
        }

        #endregion

        [Serializable]
        public class SequenceInstance : AppComponent
        {
            #region Components

            [Space(5)]
            public LoadingSequenceID sequenceID;

            SequenceData sequenceData;
            bool completed;

            public string Name => name ?? "Sequence Instance Name Is Not Assigned";

            #endregion

            #region Main

            #region Constructors

            public SequenceInstance()
            {

            }

            public SequenceInstance(string name, LoadingSequenceID sequenceID)
            {
                this.name = name;
                this.sequenceID = sequenceID;
            }

            #endregion

            #region Setters

            public void SetSequenceData(SequenceData sequenceData) => this.sequenceData = sequenceData;

            public void SetSequenceID(LoadingSequenceID sequenceID) => this.sequenceID = sequenceID;

            public void Completed() => completed = true;

            #endregion

            #region Getters

            public SequenceData GetSequenceData()
            {
                return sequenceData;
            }

            public LoadingSequenceID GetSequenceID()
            {
                return sequenceID;
            }

            public bool IsCompleted()
            {
                return completed;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class LoadingSequence : DataDebugger
        {
            #region Components

            [SerializeField]
            List<SequenceData> sequenceDataList = new List<SequenceData>();

            Queue<SequenceInstance> sequenceDataQueue = new Queue<SequenceInstance>();

            List<SequenceInstance> processedSequences = new List<SequenceInstance>();

            #endregion

            #region Main

            public void StageSequence(Action<Callback> callback, params SequenceInstance[] sequenceInstances)
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(sequenceInstances, "Sequence Instance", componentsValidCallbackResults =>
                {
                    callbackResults.SetResults(componentsValidCallbackResults);

                    if (callbackResults.Success())
                    {
                        for (int i = 0; i < sequenceInstances.Length; i++)
                        {
                            GetSequenceData(sequenceInstances[i].GetSequenceID(), sequenceDataCallbackResults =>
                            {
                                callbackResults.SetResults(sequenceDataCallbackResults);

                                if (callbackResults.Success())
                                {
                                    sequenceInstances[i].SetSequenceData(sequenceDataCallbackResults.data);
                                    AddStagedSequenceInstance(sequenceInstances[i], i, sequenceInstanceStagedCallbackResults => { callbackResults.SetResult(sequenceInstanceStagedCallbackResults); });
                                }
                                else
                                    callbackResults.result = $"Failed To Assign Sequence Data For : {sequenceInstances[i].name} At Index : {i}.";
                            });

                            if(!callbackResults.Success())
                            {
                                int breakIndex = (i + 1) - sequenceInstances.Length;
                                callbackResults.result = $"Failed To Assign Sequence Data For : {sequenceInstances[i].name} At Index : {i} - With Results : {callbackResults.result} - Action => Breaking Out Of Loop With : {breakIndex} Files Remaining For Staging.";
                                break;
                            }
                        }

                        if (callbackResults.Success())
                            callbackResults.result = $"{sequenceInstances.Length} Of {sequenceInstances.Length} Files Have Been Staged Successfully.";
                    }

                }, "Stage Sequence - Sequence Instance Parameter Is Not Assigned / Null.");

                callback?.Invoke(callbackResults);
            }

            public async Task Process(Action<Callback> callback = null)
            {
                try
                {
                    Callback callbackResults = new Callback();

                    Helpers.GetAppComponentValid(sequenceDataQueue, "Sequence Data Queue", async componentsValidCallbackResults => 
                    {
                        callbackResults.SetResults(componentsValidCallbackResults);
                    }, "Sequence Data Queue Is Not Yet Initialized");

                    if (callbackResults.Success())
                    {
                        while (IsRunning())
                        {
                            var processingQueueResults = await AddToProcessingQueueAsync(sequenceDataQueue.Dequeue());

                            if(processingQueueResults.Success())
                                await ProcessQueueSequenceAsync();
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                catch(Exception exception)
                {
                    throw exception;
                }
            }

            public void GetSequenceData(LoadingSequenceID sequenceID, Action<CallbackData<SequenceData>> callback)
            {
                CallbackData<SequenceData> callbackResults = new CallbackData<SequenceData>();

                Helpers.GetAppComponentsValid(sequenceDataList, "Sequence Data List", componentsValidCallbackResults => 
                {
                    callbackResults.result = componentsValidCallbackResults.result;
                    callbackResults.resultCode = componentsValidCallbackResults.resultCode;

                    if(callbackResults.Success())
                    {
                        var sequenceData = sequenceDataList.Find(sequence => sequence.GetSequenceID() == sequenceID);

                        Helpers.GetAppComponentValid(sequenceData, "Sequence Data", componentsValidCallbackResults => 
                        {
                            callbackResults.result = componentsValidCallbackResults.result;
                            callbackResults.resultCode = componentsValidCallbackResults.resultCode;

                            if (callbackResults.Success())
                                callbackResults.data = sequenceData;

                        }, $"Sequence Data Of Type : {sequenceID} Missing / Not Found In The Sequence Data List - Initialize In The Editor Inspector.");
                    }

                }, "Sequence Data List Is Not Yet Initialized In The Editor Inspector Panel");

                callback.Invoke(callbackResults);
            }

            public void AddStagedSequenceInstance(SequenceInstance sequenceInstance, int index, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (Helpers.HasContents(Helpers.GetList(GetSequenceDataQueue())))
                {
                    callbackResults.SetResults(Helpers.GetAppComponentsValid(GetSequenceDataQueue(), "Sequence Data Queue", "Staging Loading Sequence Failed - Sequence Data Queue Is Not Yet Initialized - Sequence Data Queue Contents Are Not Valid", $"Staging Loading Sequence Success - Sequence Data Queue Is Valid With  {GetSequenceDataCount()} Sequence Instances Already Staged And Is Ready To Stage : {sequenceInstance.name} With ID : {sequenceInstance.GetSequenceID()}."));

                    if (callbackResults.Success())
                    {
                        callbackResults.SetResult(Helpers.ComponentDoesntHaveContent(Helpers.GetList(GetSequenceDataQueue()), sequenceInstance, "Sequence Data Queue", $"Component Validation Failed - Couldn't Add  Loading Sequence Instance : {sequenceInstance.name} With Sequence ID : {sequenceInstance.GetSequenceID()} At Index : {index} - This Has Been Added To The Queue But It's Missing For Some Unknown Reason - Please Check Here."));

                        if(callbackResults.Success())
                        {
                            GetSequenceDataQueue().Enqueue(sequenceInstance);
                            callbackResults.SetResult(Helpers.ComponentHasContent(Helpers.GetList(GetSequenceDataQueue()), sequenceInstance, "Sequence Data Queue", sequenceInstance.name, $"Stage Sequence Instance Failed - Sequence Data Queue Doesn't Contain Sequance Instance : {sequenceInstance.name}", $"Stage Sequence Instance Success - Sequence Data Queue Is Valid With : {GetSequenceDataCount()} Content(s) And Contain Sequance Instance : {sequenceInstance.name}."));
                        }
                    }
                }
                else
                {
                    GetSequenceDataQueue().Enqueue(sequenceInstance);
                    if (Helpers.HasContents(Helpers.GetList(GetSequenceDataQueue())))
                    {
                        callbackResults.SetResult(Helpers.ComponentHasContent(Helpers.GetList(GetSequenceDataQueue()), sequenceInstance, "Sequence Data Queue", sequenceInstance.name, $"Stage Sequence Instance Failed - Sequence Data Queue Doesn't Contain Sequance Instance : {sequenceInstance.name}", $"Stage Sequence Instance Success - Sequence Data Queue Is Valid With : {GetSequenceDataCount()} Content(s) And Contain Sequance Instance : {sequenceInstance.name}."));

                        if (callbackResults.Success())
                            callbackResults.result = $" {sequenceInstance.name} With Sequence ID : {sequenceInstance.GetSequenceID()} At Index : {index}";
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Stage Loading Sequence Instance : {sequenceInstance.name} With Sequence ID : {sequenceInstance.GetSequenceID()} At Index : {index}";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public Callback IsInitialized()
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(sequenceDataList, "Sequence Data List", componentsValidCallbackResults =>
                {
                    callbackResults.result = componentsValidCallbackResults.result;
                    callbackResults.resultCode = componentsValidCallbackResults.resultCode;

                }, "Loading Sequence Initialization Failed - Loading Sequence Data List Missing / Not Yet Initialized In The Editor Inspector Panel");

                return callbackResults;
            }

            public int GetSequenceDataCount() => sequenceDataQueue.Count;

            public bool Completed() => !IsRunning();

            public Queue<SequenceInstance> GetSequenceDataQueue() => sequenceDataQueue;

            public bool IsRunning() => Helpers.HasContents(GetSequenceDataQueue());

            #region Processed

            public List<SequenceInstance> GetProcessedSequences() => processedSequences;

            public void GetFirstProcessedSequence(Action<CallbackData<SequenceInstance>> callback)
            {
                CallbackData<SequenceInstance> callbackResults = new CallbackData<SequenceInstance>();

                Helpers.GetAppComponentsValid(processedSequences, "Processed Sequences", componentsValidCallbackResults =>
                {
                    callbackResults.SetResult(componentsValidCallbackResults);

                    if (callbackResults.Success())
                    {
                        var lastProccessed = componentsValidCallbackResults.data.FirstOrDefault(processd => processd.IsCompleted() == false);

                        if (lastProccessed != null)
                        {
                            callbackResults.result = $"Successfully Found First Processed Sequence : {lastProccessed.name}.";
                            callbackResults.data = lastProccessed;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Failed To Find Last Processed Sequence.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }

                }, "Processed Sequences Are Not Yet Initialized");

                callback.Invoke(callbackResults);
            }

            public void GetLastProcessedSequence(Action<CallbackData<SequenceInstance>> callback)
            {
                CallbackData<SequenceInstance> callbackResults = new CallbackData<SequenceInstance>();

                Helpers.GetAppComponentsValid(processedSequences, "Processed Sequences", componentsValidCallbackResults => 
                {
                    callbackResults.SetResult(componentsValidCallbackResults);

                    if(callbackResults.Success())
                    {
                        var lastProccessed = componentsValidCallbackResults.data.FindLast(processd => processd.IsCompleted() == false);

                        if(lastProccessed != null)
                        {
                            callbackResults.result = $"Successfully Found Last Processed Sequence : {lastProccessed.name}.";
                            callbackResults.data = lastProccessed;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Failed To Find Last Processed Sequence.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }

                }, "Processed Sequences Are Not Yet Initialized");

                callback.Invoke(callbackResults);
            }

            public async Task<Callback> AddToProcessingQueueAsync(SequenceInstance sequenceInstance)
            {
                Callback callbackResults = new Callback(Helpers.ComponentDoesntHaveContent(GetProcessedSequences(), sequenceInstance, "Processed Sequences", "Sequence Instance"));

                if (callbackResults.Success())
                    return await Helpers.ComponentAddContentAsync(sequenceInstance, GetProcessedSequences(), "Sequence Instance", "Processed Sequences");

                return callbackResults;
            }

            public async Task<CallbackData<SequenceInstance>> ProcessQueueSequenceAsync()
            {
                CallbackData<SequenceInstance> callbackResults = new CallbackData<SequenceInstance>();

                GetLastProcessedSequence(processedSequencesCallbackResults =>
                {
                    callbackResults.SetResultsData(processedSequencesCallbackResults);
                });

                if (callbackResults.Success())
                {
                    var sequenceInstance = callbackResults.data;

                    if (sequenceInstance != null)
                        await callbackResults.data.GetSequenceData().Execute();
                    else
                        LogError(" *===>>> Last Processed Sequence Instance Not Found.", this);
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        #endregion

        #region Session Storage

        public static class SessionStorage<K, V>
        {
            #region Components

            static Dictionary<K, V> sessionDataDictionary = new Dictionary<K, V>();

            #endregion

            #region Main

            public static void Store(K key, V value, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(!sessionDataDictionary.ContainsKey(key))
                {
                    sessionDataDictionary.Add(key, value);

                    if (sessionDataDictionary.ContainsKey(key))
                        callbackResults.result = $"Data With Key : {key.GetType().ToString()} Has Been Stored Successfully For This Session";
                    else
                    {
                        callbackResults.result = $"Failed To Store Session Data With Key : {key.GetType().ToString()} - Unexpected Error - Please Check Here";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Data With Key : {key.GetType().ToString()} Is Already Stored In This Session";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static void GetStoredSessionData(K key, Action<CallbackData<V>> callback)
            {
                CallbackData<V> callbackResults = new CallbackData<V>();

                if (sessionDataDictionary.TryGetValue(key, out V value))
                {
                    callbackResults.result = $"Sorage Session Value Of Key : {key} Has Been Loaded Successfully.";
                    callbackResults.data = value;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Sorage Session Value Of Key : {key} - Possible Issue => There Is No Data Stored With Key : {key}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ClearStorage() => sessionDataDictionary?.Clear();

            #endregion
        }

        #endregion

        #region Post

        public interface IPostData
        {
            #region Data Setters

            void SetTitle(string title);
            void SetCaption(string caption);

            void SetStatus(PostDataContentStatus status);

            #endregion

            #region Data Getters

            string GetTitle();
            string GetCaption();

            PostDataContentStatus GetStatus();

            #endregion

            #region Likes Contract

            void Like(Profile profile, Action<CallbackData<int>> callback = null);

            void GetIsLiked(Action<Callback> callback);

            List<string> GetLikes();

            int GetLikeCount();

            #endregion

            #region Dislikes Contract

            void Dislike(Profile profile, Action<CallbackData<int>> callback = null);

            void GetIsDisiked(Action<Callback> callback);

            List<string> GetDislikes();

            int GetDislikeCount();

            #endregion

            #region Comments Contract

            void Comment(Profile profile, Comment comment, Action<Callback> callback = null);

            Dictionary<string, PostCommentData> GetComments();

            void DeleteComment(Profile profile, Comment comment, Action<Callback> callback = null);

            int GetCommentCount();

            #endregion

            #region Reports Contract

            #endregion
        }

        [Serializable]
        public class PostDataIdentifier : AppWidget
        {
            #region Components

            public string uniqueIdentifier, 
                          rootIdentifier;

            #endregion

            #region Main

            public void SetUniqueIdentifier(string uniqueIdentifier) => this.uniqueIdentifier = uniqueIdentifier;
            public void SetRootdentifier(string rootIdentifier) => this.rootIdentifier = rootIdentifier;

            public string GetUniqueIdentifier() => uniqueIdentifier;
            public string GetRootIdentifier() => rootIdentifier;

            #endregion
        }

        [Serializable]
        public class AppWidget
        {
            #region Components

            public string name;

            #endregion
        }

        [Serializable]
        public class ContentHierachyObject
        {
            #region Components

            string hierachyString = string.Empty;

            string subHierachySplit = " s_h|", hierachySplit = " m_h|";

            #endregion

            #region Construtors

            public ContentHierachyObject()
            {

            }

            public async Task<string> SetupHierachy(GameObject obj, string objName = null)
            {
                var rootTransformString = obj.transform.TransformToString();

                var rootTransformStringBuilder = new StringBuilder();

                rootTransformStringBuilder.Append(rootTransformString).Append(subHierachySplit).Append(!string.IsNullOrEmpty(obj.transform?.parent?.name) ? obj.transform?.parent?.name : "NULL").Append(subHierachySplit).Append(obj.transform.childCount).Append(subHierachySplit);

                var hierachyStringBuilder = new StringBuilder();

                hierachyStringBuilder.Append(rootTransformStringBuilder);

                if (obj.transform.GetComponentsInChildren<Transform>().Length > 0)
                {
                    var transforms = obj.transform.GetComponentsInChildren<Transform>();

                    for (int i = 0; i < transforms.Length; i++)
                    {
                        if (transforms[i] != obj.transform)
                        {
                            var transformString = transforms[i].TransformToString();
                            var transformStringBuilder = new StringBuilder();

                            transformStringBuilder.Append(transformString).Append(subHierachySplit).Append(!string.IsNullOrEmpty(transforms[i].parent?.name) ? transforms[i].parent?.name : "NULL").Append(subHierachySplit).Append(transforms[i].childCount);
                            hierachyStringBuilder.Append(hierachySplit).Append(transformStringBuilder);
                           
                        }

                        await Task.Yield();
                    }
                }

                return hierachyStringBuilder.ToString();
            }

            public ContentHierachyObject(string hierachyString) => this.hierachyString = hierachyString;

            #endregion

            #region Main

            #region Data Setters

            public void SetHierachyString(string hierachyString) => this.hierachyString = hierachyString;

            #endregion

            #region Data Getters

            public string GetHierachyString() => hierachyString;

            public CallbackDataList<((string name, Vector3 localPosition, Vector3 localScale, Vector3 localEulerAngles) transform,(string parentName, int childCount) transformInfo)> GetHierachyTransformInfo()
            {
                CallbackDataList<((string name, Vector3 localPosition, Vector3 localScale, Vector3 localEulerAngles), (string parentName, int childCount))> callbackResults = 
                    new CallbackDataList<((string name, Vector3 localPosition, Vector3 localScale, Vector3 localEulerAngles), (string parentName, int childCount))>();

               var hierachyList = new List<((string name, Vector3 localPosition, Vector3 localScale, Vector3 localEulerAngles), (string parentName, int childCount))>();

                if (!string.IsNullOrEmpty(hierachyString))
                {
                    var hierachyStringArray = hierachyString.Split(hierachySplit);

                    if (hierachyStringArray != null && hierachyStringArray.Length > 0)
                    {
                        for (int i = 0; i < hierachyStringArray.Length; i++)
                        {
                            var transformStringArray = hierachyStringArray[i].Split(subHierachySplit);

                            if(transformStringArray != null && transformStringArray.Length > 0)
                            {
                                var transform = transformStringArray[0].ToTransformInfo();
                                var parentName = transformStringArray[1];
                                var childCount = int.Parse(transformStringArray[2]);

                                var parentData = (parentName, childCount);

                                if (!string.IsNullOrEmpty(transform.name))
                                {
                                    var data = (transform, parentData);

                                    if (!hierachyList.Contains(data))
                                    {
                                        hierachyList.Add(data);

                                        callbackResults.result = $"Added Object : {transform.name} To Hierachy List At Index : {i}.";
                                        callbackResults.data = hierachyList;
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Failed To Add Hierach Info : {data} - Content Already Exist At Index : {i}.";
                                        callbackResults.data = default;
                                        callbackResults.resultCode = Helpers.ErrorCode;

                                        break;
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Failed To Parse String : {transformStringArray[0]} To Transform Info At Index : {i}.";
                                    callbackResults.data = default;
                                    callbackResults.resultCode = Helpers.ErrorCode;

                                    break;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Failed To Split Transfor String : { hierachyStringArray[i]} To Array List Using Split String : {subHierachySplit}";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Split Hierachy String : {hierachyString} To Array List Using Split String : {hierachySplit}";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Hierachy String Is Null Or Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ContentGenerator
        {
            #region Components

            public GameObject obj;
            public string objectString;

            public string vertexSplit = " v|", normalSplit = " n|", uvSplit = " u|", tangentSplit = " t|", subMeshSplit = " s|", meshSplit = " m|", objSplit = " obj|";

            #endregion

            #region Main

            #region Constructors

            public ContentGenerator()
            {

            }

            public ContentGenerator(GameObject obj) => this.obj = obj;
            public ContentGenerator(string objectString) => this.objectString = objectString;

            #endregion

            public async Task<CallbackDataArray<byte>> SetGameObject(GameObject value = null)
            {
                CallbackDataArray<byte> callbackResults = new CallbackDataArray<byte>();

                if (value == null)
                {
                    if (obj != null)
                        value = obj;
                    else
                    {
                        callbackResults.result = "There Is No Game Object Assigned To Convert To String - Operation Invalid.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;

                        return callbackResults;
                    }
                }

                var getMeshTaskCallbackResults = await Helpers.GetMeshPropertiesData(value);

                callbackResults.SetResult(getMeshTaskCallbackResults);

                if (callbackResults.Success())
                {
                    var meshProperties = getMeshTaskCallbackResults.data;
                    var objectHierachy = new ContentHierachyObject();
                    var objectHierachyString = await objectHierachy.SetupHierachy(value);

                    var subMeshStringList = new List<string>();

                    for (int i = 0; i < meshProperties.Length; i++)
                    {
                        var readableMesh = Helpers.GetReadableMesh(meshProperties[i].GetFilter().sharedMesh);
                        var meshName = meshProperties[i].GetFilter().gameObject.name;

                        #region Vertices - Delete This

                        //var verticesSplitStringArray = Encoding.UTF8.GetBytes(vertexSplit);

                        //var verticesJob = new Vector3ArrayToStringJob()
                        //{
                        //    vectorNativeArray = new NativeArray<Vector3>(readableMesh.vertices, Allocator.TempJob),
                        //    splitStringNativeArray = new NativeArray<byte>(verticesSplitStringArray, Allocator.TempJob),
                        //    results = new NativeList<byte>(Allocator.TempJob)
                        //};

                        //var verticesJobHandle = verticesJob.Schedule();

                        //verticesJobHandle.Complete();

                        //var vertices = Encoding.UTF8.GetString(verticesJob.results.ToArray());

                        //verticesJob.vectorNativeArray.Dispose();
                        //verticesJob.splitStringNativeArray.Dispose();
                        //verticesJob.results.Dispose();

                        //Debug.Log($" +++++++++++ Vertices String : {vertices}");

                        #endregion

                        var vertices = Helpers.Vector3ArrayToStringJob(readableMesh.vertices, vertexSplit);
                        var triangles = Helpers.IntArrayToStringJob(readableMesh.triangles);
                        var normals = Helpers.Vector3ArrayToStringJob(readableMesh.normals, normalSplit);
                        var uvs = Helpers.Vector2ArrayToStringJob(readableMesh.uv, uvSplit);
                        var tangents = Helpers.Vector4ArrayToStringJob(readableMesh.tangents, tangentSplit);
                        var indices = Helpers.IntArrayToStringJob(readableMesh.GetIndices(0));
                        var topology = ((int)readableMesh.GetTopology(0)).ToString();

                        var serializableMaterialData = new SerializableMaterial(meshProperties[i].GetRenderer().sharedMaterial);
                        var material = serializableMaterialData.GetMaterialDataString();

                        var childNameList = new List<string>();

                        if (meshProperties[i].GetFilter().gameObject.transform.childCount > 0)
                            for (int j = 0; j < meshProperties[i].GetFilter().gameObject.transform.childCount; j++)
                            {
                                childNameList.Add(meshProperties[i].GetFilter().gameObject.transform.GetChild(j).name);
                                await Task.Yield();
                            }

                        StringBuilder subMeshString = new StringBuilder();

                        subMeshString.Append(meshName).Append(subMeshSplit).Append(vertices).Append(subMeshSplit).Append(triangles).Append(subMeshSplit).Append(normals).
                            Append(subMeshSplit).Append(uvs).Append(subMeshSplit).Append(tangents).Append(subMeshSplit).Append(indices).
                            Append(subMeshSplit).Append(topology).Append(subMeshSplit).Append(material);

                        subMeshStringList.Add(subMeshString.ToString());

                        await Task.Yield();
                    }

                    if (subMeshStringList.Count > 0)
                    {
                        StringBuilder meshString = new StringBuilder();

                        for (int i = 0; i < subMeshStringList.Count; i++)
                        {
                            meshString.Append(subMeshStringList[i]).Append(meshSplit);
                            await Task.Yield();
                        }

                        meshString.Remove(meshString.Length - meshSplit.Length, meshSplit.Length);

                        if (!string.IsNullOrEmpty(meshString.ToString()) && !string.IsNullOrEmpty(objectHierachyString))
                        {
                            StringBuilder objectString = new StringBuilder();
                            objectString.Append(meshString.ToString()).Append(objSplit).Append(objectHierachyString);

                            var meshStringToBytesArray = Helpers.CompressStringToBytesArray(objectString.ToString());

                            callbackResults.result = $"Mesh String Successfully Created From : {subMeshStringList.Count} Sub Meshes.";
                            callbackResults.data = meshStringToBytesArray;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Create Mesh String From : {subMeshStringList.Count} Sub Meshes. Mesh String Is Null.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Create Mesh String. Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public async Task<CallbackData<GameObject>> GetGameObject(string name, string value = null)
            {
                CallbackData<GameObject> callbackResults = new CallbackData<GameObject>();

                if (value == null)
                {
                    if (objectString != null)
                        value = objectString;
                    else
                    {
                        callbackResults.result = "There Is No  String Value Assigned To Convert To Game Object - Operation Invalid.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;

                        return callbackResults;
                    }
                }

                var objectSplitResultsList = value.Split(objSplit);

                if (objectSplitResultsList != null && objectSplitResultsList.Length == 2)
                {
                    var meshResults = objectSplitResultsList[0];
                    var hierachy = objectSplitResultsList[1];

                    var meshSplitResultsList = meshResults.Split(meshSplit);


                    if (meshSplitResultsList != null && meshSplitResultsList.Length > 0)
                    {
                        var submeshDataList = new List<List<string>>();

                        for (int i = 0; i < meshSplitResultsList.Length; i++)
                        {
                            var meshDataArray = meshSplitResultsList[i].Split(subMeshSplit);
                            submeshDataList.Add(meshDataArray.ToList());
                            await Task.Yield();
                        }

                        if (submeshDataList.Count > 0)
                        {
                            var meshDataList = new List<(string name, Mesh mesh, Material material)>();

                            for (int i = 0; i < submeshDataList.Count; i++)
                            {
                                var  meshName = submeshDataList[i][0];

                                var verticesArrary = Helpers.StringToVector3ArrayJob(submeshDataList[i][1], vertexSplit);
                                var trianglesArray = Helpers.StringToIntArrayJob(submeshDataList[i][2]);
                                var normalsArray = Helpers.StringToVector3ArrayJob(submeshDataList[i][3], normalSplit);
                                var uvsArray = Helpers.StringToVector2ArrayJob(submeshDataList[i][4], uvSplit);
                                var tangentsArray = Helpers.StringToVector4ArrayJob(submeshDataList[i][5], tangentSplit);
                                var indicesArray = Helpers.StringToIntArrayJob(submeshDataList[i][6]);

                                var topology = int.Parse(submeshDataList[i][7]);
                                var materials = submeshDataList[i][8];

                                var mesh = new Mesh();
                                mesh.name = meshName;
                                mesh.SetVertices(verticesArrary);
                                mesh.SetTriangles(trianglesArray, 0);
                                mesh.SetNormals(normalsArray);
                                mesh.SetUVs(0, uvsArray);
                                mesh.SetTangents(tangentsArray);
                                mesh.SetIndices(indicesArray, (MeshTopology)topology, 0);

                                mesh.RecalculateNormals();
                                mesh.RecalculateTangents();
                                mesh.RecalculateBounds();

                                var serializableMaterial = new SerializableMaterial(materials);

                                callbackResults.SetResult(serializableMaterial.GetMaterial());

                                if (callbackResults.Success())
                                    meshDataList.Add((meshName, mesh, serializableMaterial.GetMaterial().data));
                                else
                                    break;

                                await Task.Yield();
                            }

                            if (callbackResults.Success())
                            {
                                if (meshDataList.Count > 0)
                                {
                                    var objectHierachy = new ContentHierachyObject(hierachy);

                                    callbackResults.SetResult(objectHierachy.GetHierachyTransformInfo());

                                    if (callbackResults.Success())
                                    {
                                        var hierachList = objectHierachy.GetHierachyTransformInfo().data;

                                        var rootGameObjectTransformData = hierachList[0];

                                        var loadedGameObjectsList = new List<((string name, GameObject gameObject, string parentName) gameObject, (Vector3 localPosition, Vector3 localScale, Vector3 localEulerAngles) gameObjectTransform)>();

                                        GameObject loadedRootParentGameObject = new GameObject(rootGameObjectTransformData.transform.name);

                                        loadedRootParentGameObject.transform.position = rootGameObjectTransformData.transform.localPosition;
                                        loadedRootParentGameObject.transform.localScale = rootGameObjectTransformData.transform.localScale;
                                        loadedRootParentGameObject.transform.rotation = Quaternion.Euler(rootGameObjectTransformData.transform.localEulerAngles);

                                        var meshData = meshDataList.Find(mesh => mesh.name == loadedRootParentGameObject.name);

                                        var objectParentsList = new List<Transform>();

                                        if (rootGameObjectTransformData.transformInfo.childCount > 0)
                                        {
                                            if (!objectParentsList.Contains(loadedRootParentGameObject.transform))
                                                objectParentsList.Add(loadedRootParentGameObject.transform);
                                            else
                                            {
                                                callbackResults.result = $"Adding Parent Game Object As Parent Transform : {loadedRootParentGameObject.name} - Please Check Here.";
                                                callbackResults.data = default;
                                                callbackResults.resultCode = Helpers.ErrorCode;
                                            }
                                        }

                                        if (meshData.mesh != null && meshData.material != null)
                                        {
                                            var meshFilter = loadedRootParentGameObject.AddComponent<MeshFilter>();
                                            var meshRenderer = loadedRootParentGameObject.AddComponent<MeshRenderer>();

                                            meshFilter.sharedMesh = meshData.mesh;
                                            meshRenderer.sharedMaterial = meshData.material;
                                            meshRenderer.UpdateGIMaterials();

                                            var loadedRootTransformData = (rootGameObjectTransformData.transform.name, loadedRootParentGameObject, rootGameObjectTransformData.transformInfo.parentName);
                                            var loadedRootTransform = (rootGameObjectTransformData.transform.localPosition, rootGameObjectTransformData.transform.localScale, rootGameObjectTransformData.transform.localEulerAngles);

                                            if (!loadedGameObjectsList.Contains((loadedRootTransformData, loadedRootTransform)))
                                                loadedGameObjectsList.Add((loadedRootTransformData, loadedRootTransform));
                                            else
                                            {
                                                callbackResults.result = $"Adding Loaded Parent Game Object : {loadedRootParentGameObject.name} - Please Check Here.";
                                                callbackResults.data = default;
                                                callbackResults.resultCode = Helpers.ErrorCode;
                                            }
                                        }

                                        if(hierachList.Count > 1)
                                        {
                                            for (int i = 0; i < hierachList.Count; i++)
                                            {
                                                if (i != 0)
                                                {
                                                    var gameObjectTransformData = hierachList[i];
                                                    var meshAndMaterialData = meshDataList.Find(mesh => mesh.name == hierachList[i].Item1.name);

                                                    if (meshAndMaterialData.mesh != null)
                                                    {
                                                        GameObject loadedGameObject = new GameObject(gameObjectTransformData.transform.name);

                                                        var meshFilter = loadedGameObject.AddComponent<MeshFilter>();
                                                        var meshRenderer = loadedGameObject.AddComponent<MeshRenderer>();

                                                        meshFilter.sharedMesh = meshAndMaterialData.mesh;
                                                        meshRenderer.sharedMaterial = meshAndMaterialData.material;
                                                        meshRenderer.UpdateGIMaterials();

                                                        if (gameObjectTransformData.transformInfo.childCount > 0)
                                                        {
                                                            if (!objectParentsList.Contains(loadedGameObject.transform))
                                                                objectParentsList.Add(loadedGameObject.transform);
                                                            else
                                                            {
                                                                callbackResults.result = $"Adding Parent Game Object As Parent Transform : {loadedGameObject.name} - Please Check Here.";
                                                                callbackResults.data = default;
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        var loadedTransformData = (gameObjectTransformData.transform.name, loadedGameObject, gameObjectTransformData.transformInfo.parentName);
                                                        var loadedTransform = (gameObjectTransformData.transform.localPosition, gameObjectTransformData.transform.localScale, gameObjectTransformData.transform.localEulerAngles);

                                                        if (!loadedGameObjectsList.Contains((loadedTransformData, loadedTransform)))
                                                            loadedGameObjectsList.Add((loadedTransformData, loadedTransform));
                                                        else
                                                        {
                                                            callbackResults.result = $"Adding Loaded Game Object : {loadedGameObject.name} - At Index : {i} - Failed : Please Check Here.";
                                                            callbackResults.data = default;
                                                            callbackResults.resultCode = Helpers.ErrorCode;

                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        GameObject loadedGameObject = new GameObject(gameObjectTransformData.transform.name);

                                                        if (gameObjectTransformData.transformInfo.childCount > 0)
                                                        {
                                                            if (!objectParentsList.Contains(loadedGameObject.transform))
                                                                objectParentsList.Add(loadedGameObject.transform);
                                                            else
                                                            {
                                                                callbackResults.result = $"Adding Parent Game Object As Parent Transform : {loadedGameObject.name} - Please Check Here.";
                                                                callbackResults.data = default;
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        var loadedTransformData = (gameObjectTransformData.transform.name, loadedGameObject, gameObjectTransformData.transformInfo.parentName);
                                                        var loadedTransform = (gameObjectTransformData.transform.localPosition, gameObjectTransformData.transform.localScale, gameObjectTransformData.transform.localEulerAngles);

                                                        if (!loadedGameObjectsList.Contains((loadedTransformData, loadedTransform)))
                                                            loadedGameObjectsList.Add((loadedTransformData, loadedTransform));
                                                        else
                                                        {
                                                            callbackResults.result = $"Adding Loaded Game Object : {loadedGameObject.name} - At Index : {i} - Failed : Please Check Here.";
                                                            callbackResults.data = default;
                                                            callbackResults.resultCode = Helpers.ErrorCode;

                                                            break;
                                                        }
                                                    }
                                                }

                                                await Task.Yield();
                                            }
                                        }

                                        if (callbackResults.Success())
                                        {
                                            if (loadedGameObjectsList.Count > 1 && objectParentsList.Count > 0)
                                            {
                                                for (int i = 0; i < loadedGameObjectsList.Count; i++)
                                                {
                                                    var parentName = loadedGameObjectsList[i].gameObject.parentName;

                                                    if (parentName != "NULL")
                                                    {
                                                        var gameObjectTransform = loadedGameObjectsList[i].gameObject.gameObject.transform;
                                                        var transform = loadedGameObjectsList[i].gameObjectTransform;
                                                        var parentTransform = objectParentsList.Find(parent => parent.name == parentName);

                                                        if (parentTransform != null)
                                                        {
                                                            gameObjectTransform.SetParent(parentTransform, false);

                                                            gameObjectTransform.localPosition = transform.localPosition;
                                                            gameObjectTransform.localScale = transform.localScale;
                                                            gameObjectTransform.localEulerAngles = transform.localEulerAngles;
                                                        }
                                                        else
                                                        {
                                                            callbackResults.result = $"Game Object : {loadedGameObjectsList[i].gameObject.name}'s Parent Name : {loadedGameObjectsList[i].gameObject.parentName} Missing / Not Found - Please Check Here.";
                                                            callbackResults.data = default;
                                                            callbackResults.resultCode = Helpers.ErrorCode;

                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Game Object : {meshDataList.Count} Parent Name Is Set To Null.";
                                                        callbackResults.data = default;
                                                        callbackResults.resultCode = Helpers.ErrorCode;

                                                        break;
                                                    }

                                                    await Task.Yield();
                                                }

                                                if (callbackResults.Success())
                                                {
                                                    callbackResults.result = $"Created Game Object From : {meshDataList.Count} Sub Meshes.";
                                                    callbackResults.data = loadedRootParentGameObject;
                                                }
                                            }
                                            else if(loadedGameObjectsList.Count == 1)
                                            {
                                                callbackResults.result = $"Created Game Object From : {meshDataList.Count} Sub Meshes.";
                                                callbackResults.data = loadedRootParentGameObject;
                                                callbackResults.resultCode = Helpers.SuccessCode;
                                            }
                                            else
                                            {
                                                callbackResults.result = $"Failed To Load Objects - Please Check Here.";
                                                callbackResults.data = default;
                                                callbackResults.resultCode = Helpers.ErrorCode;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Failed To Create Sub Meshes Data. Please Check Here.";
                                    callbackResults.data = default;
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Get Sub Meshes Data Using : {subMeshSplit} - Value Is Null / Empty.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Split Mesh Data Using : {meshSplit} - Value Is Null / Empty.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Split Object String Data Using : {objectString} - Value Is Null / Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class SerializableColor
        {
            #region Components

            public float r, g, b, a;

            #endregion

            #region Constructors

            public SerializableColor()
            {

            }

            public SerializableColor(Color color)
            {
                r = color.r;
                g = color.g;
                b = color.b;
                a = color.a;
            }

            #endregion

            #region Main

            #region Data Setters

            public void SerializeColor(Color color)
            {
                r = color.r;
                g = color.g;
                b = color.b;
                a = color.a;
            }

            #endregion

            #region Data Getters

            public Color GetColor() => new Color(r, g, b, a);

            #endregion

            #endregion
        }

        [Serializable]
        public class TextureData
        {
            #region Components

            public string name;

            public byte[] textureData;

            public TextureMapType textureType;

            public int width, height;

            #endregion

            #region Constructors

            public TextureData()
            {

            }

            public TextureData(string name, byte[] textureData, TextureMapType textureType, int width, int height)
            {
                this.name = name;
                this.textureData = textureData;
                this.textureType = textureType;

                SetTextureSize(width, height);
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetName(string name) => this.name = name;

            public void SetTextureData(byte[] textureData) => this.textureData = textureData;

            public void SetTextureType(TextureMapType textureType) => this.textureType = textureType;

            public void SetTextureSize(int width, int height)
            {
                this.width = width;
                this.height = height;
            }

            #endregion

            #region Data Getters

            public string Name => name ?? "Texture Name Not Assigned.";

            public byte[] GetTextureData() => textureData;

            public TextureMapType GetTextureType() => textureType;

            public (int width, int height) GetTextureSize() => (width, height);

            #endregion

            #endregion
        }

        [Serializable]
        public class MaterialData
        {
            #region Components

            public string name;
            public string shaderName;
            public int shaderType;
            public string mainColorData;
            public string emissionColorData;
            public string alphaCutOff;
            public string textureData;
            public float smoothness, smoothnessScale, smoothnessTextureChannel;
            public float metallic;
            public float specularHighlights;
            public float glossyReflections;
            public float bumpScale;
            public float detailNormalMapScale;
            public float aoStrength;
            public float heightScale;
            public bool enableGPUInstancing;

            public float uvSet, mode, srcBlend, destBlend, zWrite;

            public string splitString;

            #endregion

            #region Constructors

            public MaterialData()
            {

            }

            public MaterialData(string name = null, string shaderName = null, ShaderType shaderType = ShaderType.Default, 
                string mainColorData = null, string emissionColorData = null,
                float smoothness = 0, float smoothnessScale = 0, float smoothnessTextureChannel = 0, float metallic = 0, float specularHighlights = 0, float glossyReflections = 0, 
                float bumpScale = 0, float heightScale = 0, float aoStrength = 0, bool enableGPUInstancing = true, float uvSet = 0, float mode = 0, 
                float srcBlend = 0, float destBlend = 0, float zWrite = 0, string splitString = " ", params TextureData[] textureData)
            {
                this.name = name;
                this.shaderName = shaderName;
                this.shaderType = (int)shaderType;
                this.mainColorData = mainColorData;
                this.emissionColorData = emissionColorData;
                this.smoothnessTextureChannel = smoothnessTextureChannel;
                this.smoothness = smoothness;
                this.smoothnessScale = smoothnessScale;
                this.metallic = metallic;
                this.specularHighlights = specularHighlights;
                this.glossyReflections = glossyReflections;
                this.bumpScale = bumpScale;
                this.heightScale = heightScale;
                this.aoStrength = aoStrength;
                this.enableGPUInstancing = enableGPUInstancing;

                this.uvSet = uvSet;
                this.mode = mode;
                this.srcBlend = srcBlend;
                this.destBlend = destBlend;
                this.zWrite = zWrite;

                this.splitString = splitString;

                SetMainTextureData(splitString, textureData);
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetName(string name) => this.name = name;

            public void SetShaderName(string shaderName) => this.shaderName = shaderName;
            public void SetShaderType(ShaderType shaderType) => this.shaderType = (int)shaderType;
            public void SetColorData(string colorData) => this.mainColorData = colorData;

            public void SetMainTextureData(string splitString, params TextureData[] textureData)
            {
                if (textureData != null && textureData.Length > 0)
                {
                    StringBuilder textureDataStringBuilder = new StringBuilder();

                    for (int i = 0; i < textureData.Length; i++)
                    {
                        var texture = JsonUtility.ToJson(textureData[i]);
                        textureDataStringBuilder.Append(texture).Append(splitString);
                    }

                    this.textureData = textureDataStringBuilder.ToString();
                }
            }

            public void SetGlossiness(float glossiness) => this.smoothness = glossiness;
            public void SetBumpScale(float bumpScale) => this.bumpScale = bumpScale;
            public void SetAOStrength(float aoStrength) => this.aoStrength = aoStrength;
            public void SetEnableGPUInstancing(bool enableGPUInstancing) => this.enableGPUInstancing = enableGPUInstancing;

            #endregion

            #region Data Getters

            public string Name => name ?? "Material Name Is Not Assigned";

            public string GetShaderName() => shaderName;
            public ShaderType GetShaderType() => (ShaderType)shaderType;
            public string GetColorData() => mainColorData;
            public string GetTextureData() => textureData;
            public float GetGlossiness() => smoothness;
            public float GetBumpScale() => bumpScale;
            public float GetAOStrength() => aoStrength;
            public bool GetEnableGPUInstancing() => enableGPUInstancing;

            #endregion

            #endregion
        }

        [Serializable]
        public class SerializableMaterial
        {
            #region Components

            public string materialDataString;

            private string materialSplit = " mt|", textureSplit = " tx|", propertiesSplit = " pr|", subPropertiesSplit = " sp|";

            #endregion

            #region Constructors

            public SerializableMaterial()
            {

            }

            public SerializableMaterial(string materialDataString) => this.materialDataString = materialDataString;
            public SerializableMaterial(Material material, ShaderType shaderType = ShaderType.Default) => SetMaterial(material, shaderType);

            #endregion

            #region Main

            #region Data Setters

            public void SetMaterial(Material material, ShaderType shaderType)
            {
                StringBuilder materialStringBuilder = new StringBuilder();

                #region Material Info

                #region Material Name

                materialStringBuilder.Append(material.name).Append(materialSplit);

                #endregion

                #region Shader Name

                materialStringBuilder.Append(material.shader.name).Append(materialSplit);

                #endregion

                #region Shader Type

                materialStringBuilder.Append(((int)shaderType).ToString()).Append(materialSplit);

                #endregion

                #endregion

                #region Colors

                #region Main Color

                var mainColor = material.GetColor("_Color");
                var mainColorString = new StringBuilder().Append(mainColor.r).Append(" ").Append(mainColor.g).Append(" ").Append(mainColor.b).Append(" ").Append(mainColor.a).ToString();

                materialStringBuilder.Append(mainColorString).Append(materialSplit);

                #endregion

                #region Emission Color

                var emissionColor = material.GetColor("_EmissionColor");
                var emissionColorString = new StringBuilder().Append(emissionColor.r).Append(" ").Append(emissionColor.g).Append(" ").Append(emissionColor.b).Append(" ").Append(emissionColor.a).ToString();

                materialStringBuilder.Append(emissionColorString).Append(materialSplit);

                #endregion

                #endregion

                #region Textures

                #region Main Texture

                StringBuilder mainTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_MainTex"))
                {
                    var textureMap = material.GetTexture("_MainTex");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    //var textureString = Helpers.CompressBytesArrayToString(textureData);

                    mainTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    mainTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(mainTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Normal Map Texture

                StringBuilder normalMapTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_BumpMap"))
                {
                    var textureMap = material.GetTexture("_BumpMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    normalMapTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    normalMapTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(normalMapTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Occlusion Map Texture

                StringBuilder occlusionMapTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_OcclusionMap"))
                {
                    var textureMap = material.GetTexture("_OcclusionMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    occlusionMapTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    occlusionMapTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(occlusionMapTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Metallic Gloss Texture

                StringBuilder metallicGlossTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_MetallicGlossMap"))
                {
                    var textureMap = material.GetTexture("_MetallicGlossMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    metallicGlossTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    metallicGlossTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(metallicGlossTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Emission Map Texture

                StringBuilder emissionMapTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_EmissionMap"))
                {
                    var textureMap = material.GetTexture("_EmissionMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    emissionMapTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    emissionMapTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(emissionMapTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Height Map Texture

                StringBuilder heightMapTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_ParallaxMap"))
                {
                    var textureMap = material.GetTexture("_ParallaxMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    heightMapTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    heightMapTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(heightMapTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Detail Mask Texture

                StringBuilder detailMaskTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_DetailMask"))
                {
                    var textureMap = material.GetTexture("_DetailMask");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    detailMaskTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    detailMaskTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(detailMaskTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Detail Albedo Texture

                StringBuilder detailAlbedoTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_DetailAlbedoMap"))
                {
                    var textureMap = material.GetTexture("_DetailAlbedoMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    detailAlbedoTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    detailAlbedoTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(detailAlbedoTextureStringBuilder).Append(materialSplit);

                #endregion

                #region Detail Normal Map Texture

                StringBuilder detailNormalMapTextureStringBuilder = new StringBuilder();

                if (material.GetTexture("_DetailNormalMap"))
                {
                    var textureMap = material.GetTexture("_DetailNormalMap");

                    var textureToTexture2D = textureMap as Texture2D;
                    var textureData = Helpers.ImageToBytesArray(textureToTexture2D, Helpers.ImageEncoderType.JPG);

                    var textureString = Convert.ToBase64String(textureData);

                    detailNormalMapTextureStringBuilder.Append(textureMap.name).Append(textureSplit).Append(textureString).Append(textureSplit).Append(textureMap.width.ToString()).Append(textureSplit).Append(textureMap.height.ToString());
                }
                else
                    detailNormalMapTextureStringBuilder.Append("NULL");

                materialStringBuilder.Append(detailNormalMapTextureStringBuilder).Append(materialSplit);

                #endregion

                #endregion

                #region Shader Properties

                StringBuilder shaderPropertiesStringBuilder = new StringBuilder();

                #region Bump Scale

                StringBuilder bumpScaleStringBuilder = new StringBuilder();

                bumpScaleStringBuilder.Append("_BumpScale").Append(subPropertiesSplit).Append(material.GetFloat("_BumpScale").ToString());

                #endregion

                #region Glossiness

                StringBuilder glossinessStringBuilder = new StringBuilder();

                glossinessStringBuilder.Append("_Glossiness").Append(subPropertiesSplit).Append(material.GetFloat("_Glossiness").ToString());

                #endregion

                #region Metallic

                StringBuilder metallicStringBuilder = new StringBuilder();

                metallicStringBuilder.Append("_Metallic").Append(subPropertiesSplit).Append(material.GetFloat("_Metallic").ToString());

                #endregion

                #region Occlusion Strength

                StringBuilder occlusionStrengthStringBuilder = new StringBuilder();

                occlusionStrengthStringBuilder.Append("_OcclusionStrength").Append(subPropertiesSplit).Append(material.GetFloat("_OcclusionStrength").ToString());

                #endregion

                #region Gloss Map Scale

                StringBuilder glossMapScaleStringBuilder = new StringBuilder();

                glossMapScaleStringBuilder.Append("_GlossMapScale").Append(subPropertiesSplit).Append(material.GetFloat("_GlossMapScale").ToString());

                #endregion

                #region Specular Highlights

                StringBuilder specularHighlightsStringBuilder = new StringBuilder();

                specularHighlightsStringBuilder.Append("_SpecularHighlights").Append(subPropertiesSplit).Append(material.GetFloat("_SpecularHighlights").ToString());

                #endregion

                #region Glossy Reflections

                StringBuilder glossyReflectionsStringBuilder = new StringBuilder();

                glossyReflectionsStringBuilder.Append("_GlossyReflections").Append(subPropertiesSplit).Append(material.GetFloat("_GlossyReflections").ToString());

                #endregion

                #region Smoothness Texture Channel

                StringBuilder smoothnessTextureChannelStringBuilder = new StringBuilder();

                smoothnessTextureChannelStringBuilder.Append("_SmoothnessTextureChannel").Append(subPropertiesSplit).Append(material.GetFloat("_SmoothnessTextureChannel").ToString());

                #endregion

                #region Parallax

                StringBuilder parallaxStringBuilder = new StringBuilder();

                parallaxStringBuilder.Append("_Parallax").Append(subPropertiesSplit).Append(material.GetFloat("_Parallax").ToString());

                #endregion

                #region UV Section

                StringBuilder uvSecStringBuilder = new StringBuilder();

                uvSecStringBuilder.Append("_UVSec").Append(subPropertiesSplit).Append(material.GetFloat("_UVSec").ToString());

                #endregion

                #region Render Mode

                StringBuilder renderModeStringBuilder = new StringBuilder();

                renderModeStringBuilder.Append("_Mode").Append(subPropertiesSplit).Append(material.GetFloat("_Mode").ToString());

                #endregion

                #region Src Blend

                StringBuilder srcBlendStringBuilder = new StringBuilder();

                srcBlendStringBuilder.Append("_SrcBlend").Append(subPropertiesSplit).Append(material.GetFloat("_SrcBlend").ToString());

                #endregion

                #region Dst Blend

                StringBuilder dstBlendStringBuilder = new StringBuilder();

                dstBlendStringBuilder.Append("_DstBlend").Append(subPropertiesSplit).Append(material.GetFloat("_DstBlend").ToString());

                #endregion

                #region Z Write

                StringBuilder zWriteStringBuilder = new StringBuilder();

                zWriteStringBuilder.Append("_ZWrite").Append(subPropertiesSplit).Append(material.GetFloat("_ZWrite").ToString());

                #endregion

                shaderPropertiesStringBuilder.Append(bumpScaleStringBuilder).Append(propertiesSplit).Append(glossinessStringBuilder).Append(propertiesSplit).Append(glossMapScaleStringBuilder).Append(propertiesSplit).Append(specularHighlightsStringBuilder).
                    Append(propertiesSplit).Append(glossyReflectionsStringBuilder).Append(propertiesSplit).Append(smoothnessTextureChannelStringBuilder).Append(propertiesSplit).Append(metallicStringBuilder).Append(propertiesSplit).Append(parallaxStringBuilder).
                    Append(propertiesSplit).Append(occlusionStrengthStringBuilder).Append(propertiesSplit).Append(uvSecStringBuilder).Append(propertiesSplit).Append(renderModeStringBuilder).Append(propertiesSplit).Append(srcBlendStringBuilder).Append(propertiesSplit).Append(dstBlendStringBuilder).
                    Append(propertiesSplit).Append(zWriteStringBuilder);

                materialStringBuilder.Append(shaderPropertiesStringBuilder);

                #endregion

                materialDataString = materialStringBuilder.ToString();
            }

            #endregion

            #region Data Getters

            public string GetMaterialDataString() => materialDataString;

            public CallbackData<Material> GetMaterial()
            {
                CallbackData<Material> callbackResults = new CallbackData<Material>(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized"));

                if (callbackResults.Success())
                {
                    var appDataBaseManager = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).data;

                    if (!string.IsNullOrEmpty(materialDataString))
                    {
                        var materialParameters = materialDataString.Split(materialSplit);

                        if(materialParameters != null && materialParameters.Length > 0)
                        {
                            #region Material Parameters

                            #region Info

                            var materialName = materialParameters[0];
                            var shaderName = materialParameters[1];
                            var shaderType = (ShaderType)int.Parse(materialParameters[2]);

                            #endregion

                            #region Color

                            var mainColorString = materialParameters[3];
                            var mainColor = Helpers.ConvertColorStringToColor(mainColorString);

                            var emissionColorString = materialParameters[4];
                            var emissionColor = Helpers.ConvertColorStringToColor(emissionColorString);

                            #endregion

                            #endregion

                            callbackResults.SetResult(appDataBaseManager.GetShaderAssetFromLibrary(shaderName, shaderType));

                            if (callbackResults.Success())
                            {
                                #region Parameters

                                var shader = appDataBaseManager.GetShaderAssetFromLibrary(shaderName, shaderType).data.GetShader();

                                #endregion

                                #region Binding

                                #region Info

                                var material = new Material(shader);
                                material.name = materialName;

                                #endregion

                                #region Color

                                material.SetColor("_Color", mainColor);
                                material.SetColor("_EmissionColor", emissionColor);

                                #endregion

                                #region Textures

                                #region Main Textures

                                if (materialParameters[5] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[5].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_MainTex", texture);
                                    }
                                }

                                #endregion

                                #region Normal Map Textures

                                if (materialParameters[6] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[6].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_BumpMap", texture);
                                    }
                                }

                                #endregion

                                #region Occlusion Map Textures

                                if (materialParameters[7] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[7].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_OcclusionMap", texture);
                                    }
                                }

                                #endregion

                                #region Metallic Gloss Map Textures

                                if (materialParameters[8] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[8].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_MetallicGlossMap", texture);
                                    }
                                }

                                #endregion

                                #region Emission Map Textures

                                if (materialParameters[9] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[9].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_EmissionMap", texture);
                                    }
                                }

                                #endregion

                                #region Height Map Textures

                                if (materialParameters[10] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[10].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_ParallaxMap", texture);
                                    }
                                }

                                #endregion

                                #region Detail Mask Textures

                                if (materialParameters[11] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[11].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_DetailMask", texture);
                                    }
                                }

                                #endregion

                                #region Detail Albedo Mask Textures

                                if (materialParameters[12] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[12].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_DetailAlbedoMap", texture);
                                    }
                                }

                                #endregion

                                #region Detail Normal Textures

                                if (materialParameters[13] != "NULL")
                                {
                                    var textureSplitStringArray = materialParameters[13].Split(textureSplit);

                                    if (textureSplitStringArray != null && textureSplitStringArray.Length == 4)
                                    {
                                        var textureName = textureSplitStringArray[0];
                                        var textureDataArray = Convert.FromBase64String(textureSplitStringArray[1]);
                                        var textureWidth = int.Parse(textureSplitStringArray[2]);
                                        var textureHeight = int.Parse(textureSplitStringArray[3]);

                                        var textureSerializable = new SerializableImage(textureDataArray);

                                        var texture = textureSerializable.GetTexture2DImage(textureWidth, textureHeight);
                                        texture.name = textureName;

                                        if (texture != null)
                                            material.SetTexture("_DetailNormalMap", texture);
                                    }
                                }

                                #endregion

                                #endregion

                                #region Properties

                                var shaderPropertiesArray = materialParameters[14].Split(propertiesSplit);

                                if (shaderPropertiesArray.Length > 0)
                                {
                                    for (int i = 0; i < shaderPropertiesArray.Length - 3; i++)
                                    {
                                        var propertyDataArray = shaderPropertiesArray[i].Split(subPropertiesSplit);

                                        if (propertyDataArray.Length == 2)
                                        {
                                            var propertyName = propertyDataArray[0];
                                            var propertyValue = propertyDataArray[1].ToFloat();

                                            material.SetFloat(propertyName, propertyValue);
                                        }
                                        else
                                        {
                                            callbackResults.result = $"Set Material Properties Failed - Property Array Data With Length : {propertyDataArray.Length} Does Not Match Property Count Limit Of 2.";
                                            callbackResults.data = default;
                                            callbackResults.resultCode = Helpers.ErrorCode;

                                            break;
                                        }
                                    }

                                    material.doubleSidedGI = true;
                                    material.enableInstancing = true;

                                    callbackResults.result = $"Material: {materialName} Of Shader : {shaderName} Type : {shaderType} Created Successfully From : {materialParameters.Length - 3} Parameters.";
                                    callbackResults.data = material;
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = "Failed To Split Material Properties String - Operation Invalid.";
                                    callbackResults.data = default;
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }

                                #endregion

                                #endregion
                            }
                        }
                        else
                        {
                            callbackResults.result = "Failed To Split Material String - Operation Invalid..";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "Get Material Failed - Material Data String Is Null - Operation Invalid.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ShaderAsset
        {
            #region Components

            public string name;

            [Space(5)]
            public Shader shader;

            [Space(5)]
            public ShaderType type;

            #endregion

            #region Constructors

            public ShaderAsset()
            {

            }

            public ShaderAsset(string name, Shader shader, ShaderType type)
            {
                this.name = name;
                this.shader = shader;
                this.type = type;
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetName(string name) => this.name = name;
            public void SetShader(Shader shader) => this.shader = shader;
            public void SetShaderType(ShaderType type) => this.type = type;

            #endregion

            #region Data Getters

            public string GetName() => name;
            public Shader GetShader() => shader;
            public ShaderType GetShaderType() => type;

            #endregion

            #endregion
        }

        [Serializable]
        public class ShaderLibrabry
        {
            #region Components

            public List<ShaderAsset> shaders = new List<ShaderAsset>();

            #endregion

            #region Components

            public void GetShaderAsset(string name, ShaderType type, Action<CallbackData<ShaderAsset>> callback)
            {
                CallbackData<ShaderAsset> callbackResults = new CallbackData<ShaderAsset>();

                if(shaders != null && shaders.Count > 0)
                {
                    var shaderAssetsOfType = shaders.FindAll(shader => shader.GetShaderType() == type);
                    
                    if(shaderAssetsOfType != null && shaderAssetsOfType.Count > 0)
                    {
                        var shaderAsset = shaderAssetsOfType.Find(shader => shader.GetShader().name == name);

                        if(shaderAsset != null)
                        {
                            callbackResults.result = $"Found Shader Asset : {name} Of Type : {type}";
                            callbackResults.data = shaderAsset;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Find Shader Asset : {name} Of Type : {type} - Shader Asset Missing.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Find Shader Assets Of Type : {type} - Shader Assets Not Initialized.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Find Shader Assets - Shader Assets Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public Callback HasAssets()
            {
                Callback callbackResults = new Callback();

                if(shaders != null && shaders.Count > 0)
                {
                    callbackResults.result = $"Shader Asset Library Contains : {shaders.Count} Assets.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "There Are No Shader Assets Initialized Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class SerializableGameObject
        {
            #region Components

            public List<string> meshStringList = new List<string>();
            public byte[] meshBytesArray;

            #endregion

            #region Main

            #region Constructors

            public SerializableGameObject()
            {

            }

            public SerializableGameObject(List<string> meshStringList) => this.meshStringList = meshStringList;
            public SerializableGameObject(byte[] meshBytesDataList) => this.meshBytesArray = meshBytesDataList;

            #endregion

            #region Data Setters

            public void SetMeshStringList(List<string> meshStringList) => this.meshStringList = meshStringList;
            public void SetMeshBytesArray(byte[] meshBytesDataList) => this.meshBytesArray = meshBytesDataList;

            #endregion

            #region Data Getters

            public List<string> GetMeshStringList() => meshStringList;
            public byte[] GetMeshBytesArray() => meshBytesArray;

            #endregion

            #endregion
        }

        [Serializable]
        public class SerializableImage : SerializableData
        {
            #region Components

            public byte[] imageData;

            string imageSplitString = " img|", imageInfoSplit = " inf|";

            #endregion

            #region Constructors

            public SerializableImage()
            {

            }

            public SerializableImage(byte[] imageData) => SetImageData(imageData);

            public SerializableImage(Sprite imageData, Helpers.ImageEncoderType encoderType) => SetImageData(Helpers.ImageToBytesArray(imageData, encoderType));

            public SerializableImage(Helpers.ImageEncoderType encoderType = Helpers.ImageEncoderType.JPG, params Sprite[] images) => SetImageData(encoderType, images);

            public SerializableImage(Helpers.ImageEncoderType encoderType = Helpers.ImageEncoderType.JPG, params Texture2D[] images) => SetImageData(encoderType, images);

            public SerializableImage(Texture imageData, Helpers.ImageEncoderType imageEncoderType) => SetImageData(Helpers.ImageToBytesArray((Texture2D)imageData, imageEncoderType));
        
            public SerializableImage(Texture2D imageData, Helpers.ImageEncoderType imageEncoderType) => SetImageData(Helpers.ImageToBytesArray(imageData, imageEncoderType));

            #endregion

            #region Main

            #region Data Setters

            public void SetImageData(byte[] imageData) => this.imageData = imageData;

            public void SetImageData(Helpers.ImageEncoderType encoderType = Helpers.ImageEncoderType.JPG, params Sprite[] images)
            {
                if (images != null && images.Length > 0)
                {
                    var imageBytesDataList = new List<byte[]>();

                    var imagesBytesStringBuilder = new StringBuilder();

                    for (int i = 0; i < images.Length; i++)
                        imageBytesDataList.Add(Helpers.ImageToBytesArray(images[i], encoderType));

                    if (imageBytesDataList.Count > 0)
                    {
                        for (int i = 0; i < imageBytesDataList.Count; i++)
                        {
                            var imageBytesToString = Convert.ToBase64String(imageBytesDataList[i]);

                            var imageDataStringBuilder = new StringBuilder();
                            imageDataStringBuilder.Append(images[i].name).Append(imageInfoSplit).Append(imageBytesToString).Append(imageInfoSplit).Append(images[i].texture.width).Append(imageInfoSplit).Append(images[i].texture.height);

                            imagesBytesStringBuilder.Append(imageDataStringBuilder).Append(imageSplitString);
                        }

                        imagesBytesStringBuilder.Remove(imagesBytesStringBuilder.Length - imageSplitString.Length, imageSplitString.Length);

                        imageData = Helpers.CompressStringToBytesArray(imagesBytesStringBuilder.ToString());

                    }
                    else
                        throw new ArgumentException("Set Image Data Failed - No Images Found To Create Required Data.");
                }
                else
                    throw new ArgumentException("Set Image Data Failed - No Images Found To Create Required Image Data.");
            }

            public void SetImageData(Helpers.ImageEncoderType encoderType = Helpers.ImageEncoderType.JPG, params Texture2D[] images)
            {
                if (images != null && images.Length > 0)
                {
                    var imageBytesDataList = new List<byte[]>();

                    var imagesBytesStringBuilder = new StringBuilder();

                    for (int i = 0; i < images.Length; i++)
                        imageBytesDataList.Add(Helpers.ImageToBytesArray(images[i], encoderType));

                    if(imageBytesDataList.Count > 0)
                    {
                        for (int i = 0; i < imageBytesDataList.Count; i++)
                        {
                            var imageBytesToString = Convert.ToBase64String(imageBytesDataList[i]);

                            var imageDataStringBuilder = new StringBuilder();
                            imageDataStringBuilder.Append(images[i].name).Append(imageInfoSplit).Append(imageBytesToString).Append(imageInfoSplit).Append(images[i].width).Append(imageInfoSplit).Append(images[i].height);

                            Debug.Log($" ++++++++++++++++++++ Image : {images[i].name} Data : {imageBytesToString}");

                            imagesBytesStringBuilder.Append(imageDataStringBuilder).Append(imageSplitString);
                        }

                        imagesBytesStringBuilder.Remove(imagesBytesStringBuilder.Length - imageSplitString.Length, imageSplitString.Length);

                        imageData = Helpers.CompressStringToBytesArray(imagesBytesStringBuilder.ToString());

                    }
                    else
                        throw new ArgumentException("Set Image Data Failed - No Images Found To Create Required Data.");
                }
                else
                    throw new ArgumentException("Set Image Data Failed - No Images Found To Create Required Image Data.");
            }

            #endregion

            #region Data Getters

            #region Uncompressed

            public byte[] GetImageData() => imageData;

            public Sprite GetSpriteImage(int width = 100, int height = 100) =>
                Helpers.BytesArrayToSprite(imageData, width, height);

            public Texture GetTextureImage(int width = 100, int height = 100) =>
                Helpers.BytesArrayToTexture2D(imageData, width, height);

            public Texture2D GetTexture2DImage(int width = 100, int height = 100) =>
                Helpers.BytesArrayToTexture2D(imageData, width, height);

            public Texture2D GetTexture2DImage(byte[] imageData, int width = 100, int height = 100) =>
               Helpers.BytesArrayToTexture2D(imageData, width, height);

            public Texture2D[] GetTexture2DImages(int width = 100, int height = 100)
            {
                if (imageData != null && imageData.Length > 0)
                {
                    var imageDataString = Encoding.UTF8.GetString(imageData);

                    var imageDataSplitResults = imageDataString.Split(imageSplitString);

                    if (imageDataSplitResults != null && imageDataSplitResults.Length > 0)
                    {
                        for (int i = 0; i < imageDataSplitResults.Length; i++)
                        {
                            Debug.Log($" ++++++++++++++++++++++++++ Image Data At : {i} - Results: {imageDataSplitResults[i]}");

                            var imageInfoDataSplitString = imageDataSplitResults[i].Split(imageInfoSplit);

                            if(imageInfoDataSplitString.Length > 0)
                            {
                                for (int j = 0; j < imageInfoDataSplitString.Length; j++)
                                {
                                    Debug.Log($" ++++++++++++++++++++++++++ Image Data At : {j} - Results: {imageInfoDataSplitString[j]}");
                                }
                            }
                            else
                                throw new ArgumentException($"Get Texture 2D Images Failed - Couldn't Split String : {imageDataSplitResults[i]} Using Seperator : {imageInfoSplit}.");
                        }

                        return null;
                    }
                    else
                        throw new ArgumentException($"Get Texture 2D Images Failed : Couldn't Split Image String : {imageSplitString} Using Split String : {imageSplitString}");
                }
                else
                    throw new ArgumentException($"Get Texture 2D Images Failed : Image Data Is Null.");
            }

            #endregion

            #region Compressed

            public byte[] GetImageDataFromCompressedData() => Helpers.CompressByteArray(imageData);

            public Sprite GetSpriteImageFromCompressedData(int width = 100, int height = 100) => 
                Helpers.BytesArrayToSprite(Helpers.UnCompressByteArray(imageData), width, height);

            public Texture GetTextureImageFromCompressedData(int width = 100, int height = 100) => 
                Helpers.BytesArrayToTexture2D(Helpers.UnCompressByteArray(imageData), width, height);

            public Texture2D GetTexture2DImageFromCompressedData(int width = 100, int height = 100) =>
                Helpers.BytesArrayToTexture2D(Helpers.UnCompressByteArray(imageData), width, height);

            public Texture2D[] GetTexture2DImagesFromCompressedData()
            {
                if (imageData != null && imageData.Length > 0)
                {
                    var uncompressedImageData = GetImageDataFromUnCompressedData();
                    var imageDataUncompressedString = Helpers.UnCompressByteArrayToString(uncompressedImageData);

                    var imageDataSplitResults = imageDataUncompressedString.Split(imageSplitString);

                    if (imageDataSplitResults != null && imageDataSplitResults.Length > 0)
                    {
                        var images = new Texture2D[imageDataSplitResults.Length];

                        for (int i = 0; i < imageDataSplitResults.Length; i++)
                        {
                            Debug.Log($" ++++++++++++++++++ Image Data Results : {imageDataSplitResults[i]}");
                            var imageInfoSplitArray = imageDataSplitResults[i].Split(imageInfoSplit);

                            if (imageInfoSplitArray.Length == 4)
                            {
                                var name = imageInfoSplitArray[0];
                                var imageBytes = Convert.FromBase64String(imageInfoSplitArray[1]);
                                var width = int.Parse(imageInfoSplitArray[2]);
                                var height = int.Parse(imageInfoSplitArray[3]);

                                if (imageBytes != null && imageBytes.Length > 0)
                                {
                                    var image = Helpers.BytesArrayToTexture2D(imageBytes, width, height);
                                    image.name = name;
                                    images[i] = image;
                                }
                                else
                                    throw new ArgumentException($"Get Texture 2D Images Failed : Image Data Is Null.");
                            }
                            else
                                throw new ArgumentException($"Get Texture 2D Images Failed : Image Info Split Array With An Array Length Of : {imageInfoSplitArray.Length}'s Argument Is Out Of Range - Expected A Length Of 4.");
                        }

                        return images;
                    }
                    else
                        throw new ArgumentException($"Get Texture 2D Images Failed : Couldn't Split Image String : {imageSplitString} Using Split String : {imageSplitString}");
                }
                else
                    throw new ArgumentException($"Get Texture 2D Images Failed : Image Data Is Null.");
            }

            public Texture2D GetRandomTexture2DImageFromCompressedData()
            {
                if (imageData != null && imageData.Length > 0)
                {
                    var uncompressedImageData = GetImageDataFromUnCompressedData();
                    var imageDataUncompressedString = Helpers.UnCompressByteArrayToString(uncompressedImageData);

                    var imageDataSplitResults = imageDataUncompressedString.Split(imageSplitString);

                    if (imageDataSplitResults != null && imageDataSplitResults.Length > 0)
                    {
                        var randomIndex = UnityEngine.Random.Range(0, imageDataSplitResults.Length - 1);

                        for (int i = 0; i < imageDataSplitResults.Length; i++)
                        {
                            if (i == randomIndex)
                            {
                                var imageInfoSplitArray = imageDataSplitResults[i].Split(imageInfoSplit);

                                if (imageInfoSplitArray.Length == 4)
                                {
                                    var name = imageInfoSplitArray[0];
                                    var imageBytes = Convert.FromBase64String(imageInfoSplitArray[1]);
                                    var width = int.Parse(imageInfoSplitArray[2]);
                                    var height = int.Parse(imageInfoSplitArray[3]);

                                    if (imageBytes != null && imageBytes.Length > 0)
                                    {
                                        var image = Helpers.BytesArrayToTexture2D(imageBytes, width, height);
                                        image.name = name;
                                        return image;
                                    }
                                    else
                                        throw new ArgumentException($"Get Texture 2D Images Failed : Image Data Is Null.");
                                }
                                else
                                    throw new ArgumentException($"Get Texture 2D Images Failed : Image Info Split Array With An Array Length Of : {imageInfoSplitArray.Length}'s Argument Is Out Of Range - Expected A Length Of 4.");

                                break;
                            }
                        }

                        return null;
                    }
                    else
                        throw new ArgumentException($"Get Texture 2D Images Failed : Couldn't Split Image String : {imageSplitString} Using Split String : {imageSplitString}");
                }
                else
                    throw new ArgumentException($"Get Texture 2D Images Failed : Image Data Is Null.");
            }

            #endregion

            #region Uncompressed

            public byte[] GetImageDataFromUnCompressedData() => Helpers.UnCompressByteArray(imageData);

            #endregion

            #endregion

            #endregion
        }


        [Serializable]
        public class ModelMeshData : PostDataIdentifier
        {
            #region Components

            public string gameObject;

            public string GetMeshString
                => gameObject;

            #endregion

            #region Main

            public string Vector2ArrayToString(VectorData[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                foreach (var data in arrayData)
                    stringBuilder.Append(data.x).Append(" ").Append(data.y).Append(seperator);

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                return stringBuilder.ToString();
            }

            public string Vector3ArrayToString(VectorData[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                foreach (var data in arrayData)
                    stringBuilder.Append(data.x).Append(" ").Append(data.y).Append(" ").Append(data.z).Append(seperator);

                if(stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                return stringBuilder.ToString();
            }

            public string Vector4ArrayToString(VectorData[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                foreach (var data in arrayData)
                    stringBuilder.Append(data.x).Append(" ").Append(data.y).Append(" ").Append(data.z).Append(" ").Append(data.w).Append(seperator);

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                return stringBuilder.ToString();
            }

            public VectorData[] StringToVector2Array(string stringData, string seperator)
            {
                var splitStringResults = stringData.Split(seperator);
                var results = new VectorData[splitStringResults.Length];

                for (int i = 0; i < results.Length; i++)
                {
                    var stringDataResults = splitStringResults[i].Split(" ");

                    if(stringDataResults.Length != 3)
                    {
                        Debug.Log($" =>>>>>> Inalid Operation - String Length : {stringDataResults.Length}");
                    }

                    results[i] = new VectorData(float.Parse(stringDataResults[0]), float.Parse(stringDataResults[1]));
                }

                return results;
            }

            public VectorData[] StringToVector3Array(string stringData, string seperator)
            {
                var splitStringResults = stringData.Split(seperator);
                var results = new VectorData[splitStringResults.Length];

                for (int i = 0; i < results.Length; i++)
                {
                    var stringDataResults = splitStringResults[i].Split(" ");

                    if (stringDataResults.Length != 3)
                    {
                        Debug.Log($" =>>>>>> Inalid Operation - String Length : {stringDataResults.Length}");
                    }

                    results[i] = new VectorData(float.Parse(stringDataResults[0]), float.Parse(stringDataResults[1]), float.Parse(stringDataResults[2]));
                }

                return results;
            }

            public VectorData[] StringToVector4Array(string stringData, string seperator)
            {
                var splitStringResults = stringData.Split(seperator);
                var results = new VectorData[splitStringResults.Length];

                for (int i = 0; i < results.Length; i++)
                {
                    var stringDataResults = splitStringResults[i].Split(" ");

                    if (stringDataResults.Length != 3)
                    {
                        Debug.Log($" =>>>>>> Inalid Operation - String Length : {stringDataResults.Length}");
                    }

                    results[i] = new VectorData(float.Parse(stringDataResults[0]), float.Parse(stringDataResults[1]), float.Parse(stringDataResults[2]), float.Parse(stringDataResults[3]));
                }

                return results;
            }

            public string IntArrayToString(int[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null)
                {

                    foreach (var data in arrayData)
                        stringBuilder.Append(data).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - 1, 1);
                }
                else
                    Debug.LogError("Int Array To String Failed- Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public int[] StringToIntArray(string stringData)
            {
                var splitStringResults = stringData.Split(" ");
                var results = new int[splitStringResults.Length];

                for (int i = 0; i < results.Length; i++)
                    results[i] = int.Parse(splitStringResults[i]);

                return results;
            }

            public string MeshDataToString(MeshData meshData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (meshData.indices != null)
                {
                    Debug.Log($"{meshData.indices.Length} Indices Found.");
                }
                else
                    Debug.Log("Indices Null Or Empty");

                stringBuilder.Append(Vector3ArrayToString(meshData.vertices, "v|")).Append(seperator).Append(IntArrayToString(meshData.triangles, " ")).Append(seperator).
                    Append(Vector3ArrayToString(meshData.normals, "n|")).Append(seperator).Append(Vector2ArrayToString(meshData.uvs, "uv|")).Append(seperator).Append(Vector4ArrayToString(meshData.tangents, "tn|"));

                return stringBuilder.ToString();
            }

            public CallbackData<MeshData> StringToMeshData(string meshString, string seperator)
            {
                CallbackData<MeshData> callbackResults = new CallbackData<MeshData>();

                var splitMeshString = meshString.Split(seperator).ToList();

                if (splitMeshString.Count > 0)
                {
                    var vertices = StringToVector3Array(splitMeshString[0], "v|");
                    var triangles = StringToIntArray(splitMeshString[1]);
                    var normals = StringToVector3Array(splitMeshString[2], "n|");
                    var uvs = StringToVector2Array(splitMeshString[3], "uv|");
                    var tangents = StringToVector4Array(splitMeshString[4], "tn|");
                    var indices = StringToIntArray(splitMeshString[5]);

                    var meshData = new MeshData();
                    meshData.vertices = vertices;
                    meshData.triangles = triangles;
                    meshData.normals = normals;
                    meshData.uvs = uvs;
                    meshData.tangents = tangents;
                    meshData.indices = indices;

                    callbackResults.result = $"Mesh With : {vertices.Length} Vetices Loaded Successfully.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Split Mesh String Using : {seperator}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void SetVertices(VectorData[] verticesData)
            {
               
            }

            public void SetTriangles(int[] trianglesData)
            {
                //triangles = new int[trianglesData.Length];

                //for (int i = 0; i < triangles.Length; i++)
                //    triangles[i] = trianglesData[i];
            }

            public override string ToString()
            {
                return GetMeshString;
            }

            #endregion
        }

        [Serializable]
        public class PostData
        {
            #region Components

            #region Post Data

            public string name;

            public Post post;
            public ModelMeshData content;
            public Telemetry telemetry = new Telemetry();

            #endregion

            #endregion

            #region Main

            #region Data Setters

            public void SetPost(Post post) => this.post = post;
            public void SetContent(ModelMeshData content) => this.content = content;

            public void SetModelMeshData(MeshData meshData)
            {
                content = new ModelMeshData();
                content.gameObject = content.MeshDataToString(meshData, "m|");
            }

            #endregion

            #region Data Getters
            public Post GetPost() => post;
            public ModelMeshData GetContent() => content;

            #endregion

            #endregion
        }

        [Serializable]
        public class Report<T> where T : PostData
        {
            #region Components

            public Profile reporterProfile = new Profile();
            public T reportedInfo = null;

            public string additionalInfo = string.Empty;

            public string reportID = string.Empty;

            #endregion

            #region Main

            #region Constructors

            public Report()
            {

            }

            public Report(Profile reporterProfile, T reportedInfo, string additionalInfo = null, string reportID = null)
            {
                this.reporterProfile = reporterProfile;
                this.reportedInfo = reportedInfo;
                this.additionalInfo = additionalInfo;
                this.reportID = reportID ?? Helpers.GenerateUniqueIdentifier();
            }

            #endregion

            #region Data Setters

            public void SetReporterProfile(Profile reporterProfile) => this.reporterProfile = reporterProfile;

            public void SetReportedInfo(T reportedInfo) => this.reportedInfo = reportedInfo;

            public void SetReportAdditionalInfo(string additionalInfo) => this.additionalInfo = additionalInfo;

            public void SetReportID(string reportID) => this.reportID = reportID;

            #endregion

            #region Data Getters

            public Profile GetReporterProfile() => reporterProfile;

            public T GetReportedInfo() => reportedInfo;

            public string GetReportAdditionalInfo() => additionalInfo;

            public string GetReportID() => reportID;

            #endregion

            #endregion
        }

        [Serializable]
        public class Comment : Post
        {
            #region Components

            public string comment;

            #endregion

            #region Main

            #region Constructors

            public Comment()
            {
            }

            public Comment(string comment, string caption = null)
            {
                this.comment = comment;
                this.caption = caption;
            }

            #endregion

            #region Data Setters

            public void SetComment(string comment) => this.comment = comment;

            #endregion

            #region Data Getters

            public string GetComment() => comment;

            #endregion

            #endregion
        }

        [Serializable]
        public class PostCommentData
        {
            #region Components

            public List<Comment> comments = new List<Comment>();

            #endregion

            #region Main

            #region Constuctors

            public PostCommentData()
            {
            }

            public PostCommentData(params Comment[] commentsArray)
            {
                if(commentsArray != null)
                    for (int i = 0; i < commentsArray.Length; i++)
                        if (!comments.Contains(commentsArray[i]))
                            comments.Add(commentsArray[i]);
            }

            #endregion

            #region Data Setters

            public void SetComments(List<Comment> comments) => this.comments = comments;

            #endregion

            #region Comments

            public void AddComment(Comment comment, Action<CallbackData<Comment>> callback = null)
            {
                CallbackData<Comment> callbackResults = new CallbackData<Comment>();

                if (!GetComments().Contains(comment))
                {
                    GetComments().Add(comment);

                    if (GetComments().Contains(comment))
                    {
                        callbackResults.result = $"{comment.GetComment()} - Comment Has Been Added To Comments List.";
                        callbackResults.data = comment;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Add Comment : {comment.GetComment()} - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"{comment.GetComment()} - Comment Already Exists In The Comments List.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void RemoveComment(Comment comment, Action<CallbackData<Comment>> callback = null)
            {
                CallbackData<Comment> callbackResults = new CallbackData<Comment>();

                if (GetComments().Contains(comment))
                {
                    GetComments().Remove(comment);

                    if (!GetComments().Contains(comment))
                    {
                        callbackResults.result = $"Comment : {comment.GetComment()} Has Been Successfully Removed From Comments List.";
                        callbackResults.data = comment;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Remove Comment : {comment.GetComment()} - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Comment: {comment.GetComment()} Doesn't Exists In The Comments List.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetComment(string commentID, Action<CallbackData<Comment>> callback = null)
            {
                CallbackData<Comment> callbackResults = new CallbackData<Comment>();

                Helpers.StringValueValid(hasValidInfoCallbackResults =>
                {
                    callbackResults.SetResult(hasValidInfoCallbackResults);

                    if (callbackResults.Success())
                    {
                        var targetComment = GetComments().Find(commentTarget => commentTarget.GetIdentifier() == commentID);

                        if (targetComment != null)
                        {
                            callbackResults.result = $"Comment With ID : {commentID} Has Been Found In Comments List.";
                            callbackResults.data = targetComment;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Find Comment With ID : {commentID} - Please Check Here.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Comment With ID : {commentID} Doesn't Exists In The Comments List.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.WarningCode;
                    }


                }, commentID);

                callback?.Invoke(callbackResults);
            }

            public void ClearComments(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                comments.Clear();

                if (comments.Count == 0)
                {
                    callbackResults.result = $"Comments List Cleared.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }          
                else
                {
                    callbackResults.result = $"Failed To Clear Comments List.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Data Getters

            public List<Comment> GetComments() => comments;

            #endregion

            #endregion
        }

        [Serializable]
        public class PostContent : AppComponent
        {
            #region Components

            public MeshData meshData = new MeshData();

            #endregion

            #region Main

            #region Constructors

            public PostContent()
            {

            }

            public PostContent(MeshData meshData)
            {
                this.meshData = meshData;
            }

            #endregion

            #region Mesh Data

            public void SetMeshData(MeshData meshData) => this.meshData = meshData;

            public MeshData GetMeshData() => meshData;

            #endregion

            #region Model

            public GameObject Model(Transform parent = null, bool worldPositionStays = false)
            {
                GameObject model = new GameObject(name);
                model.AddComponent<MeshFilter>().mesh = GetMeshData().GetMesh();
                model.AddComponent<MeshRenderer>();

                if (parent != null)
                    model.transform.SetParent(parent, worldPositionStays);

                return model;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class Post : PostDataIdentifier, IPostData
        {
            #region Components

            #region Post Info

            public string title = string.Empty;
            public string caption = string.Empty;

            public long creationDateTime;
            public long creationExpireyDateTime;

            public Texture2D postThumbnail;

            #endregion

            #region Content Data

            public string likesDataString;
            public string deslikesDataString;
            public string commentsDataString;

            private Dictionary<string, PostCommentData> comments = new Dictionary<string, PostCommentData>();
            private List<string> likes = new List<string>();
            private List<string> dislikes = new List<string>();

            #endregion

            #region Post Reports

            private List<Report<PostData>> reports = new List<Report<PostData>>();
            private PostDataContentStatus status = PostDataContentStatus.None;

            #endregion

            #endregion

            #region Main


            #region Constructors

            public Post()
            {

            }

            public Post(string title, string caption)
            {
                this.title = title;
                this.caption = caption;
            }

            #endregion

            public void SetTitle(string title) => this.title = title;
            public void SetCaption(string caption) => this.caption = caption;
            public void SetStatus(PostDataContentStatus status) => this.status = status;
            public void InitializeCreationDateTime() => creationDateTime = DateTime.UtcNow.Ticks;
            public void SetCreationExpireyDateTime(DateTime dateTime) => creationExpireyDateTime = dateTime.Ticks;

            public void SetPostThumbnail(Texture2D postThumbnail) => this.postThumbnail = postThumbnail;

            public string GetTitle() => title;
            public string GetCaption() => caption;

            public string GetIdentifier() => uniqueIdentifier ?? Helpers.GenerateUniqueIdentifier();
            public PostDataContentStatus GetStatus() => status;

            public DateTimeComponent GetCreationDateTime() => new DateTimeComponent(new DateTime(creationDateTime));
            public DateTimeComponent GetCreationExpireyDateTime() => new DateTimeComponent(new DateTime(creationExpireyDateTime));

            public Texture2D GetPostThumbnail() => postThumbnail;

            #region Likes

            public void Like(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                GetIsLiked(likedCallbackResults =>
                {
                    callbackResults.SetResult(likedCallbackResults);

                    if (callbackResults.Success())
                        RemoveLike(profile, dislikedCallbackResults => { callbackResults.SetResultsData(dislikedCallbackResults); });
                    else
                        AddLike(profile, likedCallbackResults => { callbackResults.SetResultsData(likedCallbackResults); });
                });

                callback?.Invoke(callbackResults);
            }

            public void GetIsLiked(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                callback.Invoke(callbackResults);
            }

            public List<string> GetLikes() => likes;

            public int GetLikeCount() => likes.Count;

            protected void AddLike(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (!GetLikes().Contains(profile.GetUniqueIdentifier()))
                {
                    GetLikes().Add(profile.GetUniqueIdentifier());

                    if (GetLikes().Contains(profile.GetUniqueIdentifier()))
                    {
                        callbackResults.result = "Post Liked. Like Added To Likes List.";
                        callbackResults.data = GetLikeCount();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed To Like Post. Couldn't Add Like - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Post Already Liked. Couldn't Add Like.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void RemoveLike(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (GetLikes().Contains(profile.GetUniqueIdentifier()))
                {
                    GetLikes().Remove(profile.GetUniqueIdentifier());

                    if (!GetLikes().Contains(profile.GetUniqueIdentifier()))
                    {
                        callbackResults.result = "Like Removed. Like Removed From Likes List.";
                        callbackResults.data = GetLikeCount();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed To Remove Like From Post. Couldn't Remove Like - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Profile Not Found In Liked List.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Dislikes

            public void Dislike(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                GetIsDisiked(dislikedCallbackResults =>
                {
                    callbackResults.SetResult(dislikedCallbackResults);

                    if (callbackResults.Success())
                        RemoveDisike(profile, dislikedCallbackResults => { callbackResults.SetResultsData(dislikedCallbackResults); });
                    else
                        AddDislike(profile, likedCallbackResults => { callbackResults.SetResultsData(likedCallbackResults); });
                });

                callback?.Invoke(callbackResults);
            }

            public void GetIsDisiked(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                callback.Invoke(callbackResults);
            }

            public List<string> GetDislikes() => dislikes;

            public int GetDislikeCount() => dislikes.Count;

            protected void AddDislike(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (!GetDislikes().Contains(profile.GetUniqueIdentifier()))
                {
                    GetDislikes().Add(profile.GetUniqueIdentifier());

                    if (GetDislikes().Contains(profile.GetUniqueIdentifier()))
                    {
                        callbackResults.result = "Post Disliked. Dislike Added To Dislikes List.";
                        callbackResults.data = GetLikeCount();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed To Dislike Post. Couldn't Add Dislike - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Post Already Disliked. Couldn't Dislike Post.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void RemoveDisike(Profile profile, Action<CallbackData<int>> callback = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (GetDislikes().Contains(profile.GetUniqueIdentifier()))
                {
                    GetDislikes().Remove(profile.GetUniqueIdentifier());

                    if (!GetDislikes().Contains(profile.GetUniqueIdentifier()))
                    {
                        callbackResults.result = "Dislike Removed. Dislike Removed From Dislikes List.";
                        callbackResults.data = GetDislikeCount();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed To Remove A Dislike From Post. Couldn't Remove Dislike - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Profile Not Found In Disliked List.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Comments

            public Dictionary<string, PostCommentData> GetComments() => comments;

            public int GetCommentCount() => comments.Count;

            protected void AddNewCommentData(Profile profile, Comment comment, Action<CallbackData<PostCommentData>> callback = null)
            {
                CallbackData<PostCommentData> callbackResults = new CallbackData<PostCommentData>();

                if (comment != null)
                {
                    PostCommentData commentData = new PostCommentData(comment);

                    GetComments().Add(profile.GetUniqueIdentifier(), commentData);
                    GetHasCommented(profile, hasCommentedCallbackResults => { callbackResults.SetResult(hasCommentedCallbackResults); });
                }
                else
                {
                    callbackResults.result = "Failed To Add New Comment Data - Comment Value Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void RemoveCommentData(Profile profile, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetHasCommented(profile, hasCommentedCallbackResults =>
                {
                    callbackResults.SetResult(hasCommentedCallbackResults);

                    if (callbackResults.Success())
                        GetComments().Remove(profile.GetUniqueIdentifier());

                    if (!GetComments().Keys.Contains(profile.GetUniqueIdentifier()))
                        callbackResults.result = "Comment Data Has Been Removed Successfully.";
                    else
                        callbackResults.SetResults("Failed To Remove Comment Data - Please Check Here.", Helpers.ErrorCode);
                });

                callback?.Invoke(callbackResults);
            }

            protected void GetHasCommented(Profile profile, Action<CallbackData<PostCommentData>> callback)
            {
                CallbackData<PostCommentData> callbackResults = new CallbackData<PostCommentData>();

                if (GetComments().Keys.Contains(profile.GetUniqueIdentifier()))
                {
                    if (GetComments().TryGetValue(profile.GetUniqueIdentifier(), out PostCommentData commentData))
                    {
                        callbackResults.result = $"Profile Has Commented To Post ID : {GetIdentifier()}";
                        callbackResults.data = commentData;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Post Comment Data - Please Chec Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Profile Has Not Commented To Post ID : {GetIdentifier()}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback.Invoke(callbackResults);
            }

            public void Comment(Profile profile, Comment comment, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetHasCommented(profile, hasCommentedCallbackResults =>
                {
                    callbackResults.SetResult(hasCommentedCallbackResults);

                    if (callbackResults.Success())
                    {
                        var commentsData = hasCommentedCallbackResults.data;
                        commentsData.AddComment(comment, commentAddedCallbackResults => { callbackResults.SetResult(commentAddedCallbackResults); });
                    }
                    else
                        AddNewCommentData(profile, comment, newCommentAddedCallbackResults => { callbackResults.SetResult(newCommentAddedCallbackResults); });
                });

                callback?.Invoke(callbackResults);
            }

            public void DeleteComment(Profile profile, Comment comment, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetHasCommented(profile, hasCommentedCallbackResults =>
                {
                    callbackResults.SetResult(hasCommentedCallbackResults);

                    if (callbackResults.Success())
                    {
                        var commentsData = hasCommentedCallbackResults.data;
                        commentsData.RemoveComment(comment, commentRemovedCallbackResults => { callbackResults.SetResult(commentRemovedCallbackResults); });
                    }
                });

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Reports

            public void AddReport(Report<PostData> report, Action<CallbackData<Report<PostData>>> callback = null)
            {
                CallbackData<Report<PostData>> callbackResults = new CallbackData<Report<PostData>>();

                if (!GetReports().Contains(report))
                {
                    GetReports().Add(report);

                    if (GetReports().Contains(report))
                    {
                        callbackResults.result = $"Report Id : {report.GetReportID()} - Has Been Added Successfully.";
                        callbackResults.data = report;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Add Report Id : {report.GetReportID()} - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Add Report Id : {report.GetReportID()} - Report Already Exists In Reports List.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void RemoveReport(Report<PostData> report, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (GetReports().Contains(report))
                {
                    GetReports().Remove(report);

                    if (!GetReports().Contains(report))
                    {
                        callbackResults.result = $"Report Id : {report.GetReportID()} - Has Been Removed Successfully.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Remove Report Id : {report.GetReportID()} - Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Remove Report Id : {report.GetReportID()} - Report Doesn't Exists In Reports List.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ClearReports(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetReports().Clear();
                SetStatus(PostDataContentStatus.None);

                if (!IsReported())
                {
                    callbackResults.result = $"Reports Cleared Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Clear Reports - Please Check Here.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            #region Reports Getters

            public List<Report<PostData>> GetReports() => reports;
            public int GetReportsCount() => GetReports().Count;
            public bool IsReported() => GetReportsCount() > 0 && GetStatus() == PostDataContentStatus.Reported;

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public class SerializableAsset : AppComponent
        {
            #region Components

            public List<MeshData> subMeshData = new List<MeshData>();

            #endregion

            #region Main

            public SerializableAsset()
            {

            }


            #endregion
        }

        [Serializable]
        public class  MeshData
        {
            #region Components

            public VectorData[] vertices;
            public int[] triangles;
            public VectorData[] normals;
            public VectorData[] uvs;   
            public VectorData[] tangents;
            public int[] indices;

            public MeshTopology topology;

            public int topologyInt;
            public string topologyString;

            #endregion

            #region Main

            public MeshData()
            {

            }

            public MeshData(VectorData[] vertices = null, int[] triangles = null, VectorData[] normals = null, VectorData[] uvs = null, VectorData[] tangents = null)
            {
                this.vertices = vertices;
                this.triangles = triangles;
                this.normals = normals;
                this.uvs = uvs;
                this.tangents = tangents;
            }

            public MeshData(List<VectorData> vertices = null, List<int> triangles = null, List<VectorData> normals = null, List<VectorData> uvs = null, List<VectorData> tangents = null)
            {
                this.vertices = vertices.ToArray();
                this.triangles = triangles.ToArray();
                this.normals = normals.ToArray();
                this.uvs = uvs.ToArray();
                this.tangents = tangents.ToArray();
            }

            //public SerializableMeshData(Mesh mesh)
            //{
            //    #region Vertices

            //    mesh.MarkDynamic();
            //    mesh.Optimize();
            //    mesh.OptimizeIndexBuffers();
            //    mesh.OptimizeReorderVertexBuffer();

            //    vertices = new SerializableVector[mesh.vertexCount];

            //    for (int i = 0; i < mesh.vertexCount; i++)
            //        vertices[i] = mesh.vertices[i].ToSerializableVector();

            //    #endregion

            //    #region Triangles

            //    triangles = new int[mesh.triangles.Length];

            //    for (int i = 0; i < mesh.triangles.Length; i++)
            //        triangles[i] = mesh.triangles[i];

            //    #endregion

            //    #region Normals

            //    normals = new SerializableVector[mesh.normals.Length];

            //    for (int i = 0; i < mesh.normals.Length; i++)
            //        normals[i] = mesh.normals[i].ToSerializableVector();

            //    #endregion

            //    #region UVs

            //    uvs = new SerializableVector[mesh.uv.Length];

            //    for (int i = 0; i < mesh.normals.Length; i++)
            //        normals[i] = mesh.normals[i].ToSerializableVector();

            //    #endregion

            //    #region Tangents

            //    tangents = new SerializableVector[mesh.tangents.Length];

            //    for (int i = 0; i < mesh.tangents.Length; i++)
            //        tangents[i] = mesh.tangents[i].ToSerializableVector();

            //    #endregion

            //}

            //public SerializableMeshData(Mesh mesh) => ConvertToSerializableMeshData(mesh);

            #region Vector To Data

            async Task<List<VectorData>> GetSerializableVectorDataAsync(List<Vector2> data)
            {
                var serializableVectors = new List<VectorData>();

                for (int i = 0; i < data.Count; i++)
                {
                    serializableVectors.Add(new VectorData(data[i]));
                    await Task.Yield();
                }

                return serializableVectors;
            }

            async Task<List<VectorData>> GetSerializableVectorDataAsync(List<Vector3> data)
            {
                var serializableVectors = new List<VectorData>();

                for (int i = 0; i < data.Count; i++)
                {
                    serializableVectors.Add(new VectorData(data[i]));
                    await Task.Yield();
                }

                return serializableVectors;
            }

            async Task<List<VectorData>> GetSerializableVectorDataAsync(List<Vector4> data)
            {
                var serializableVectors = new List<VectorData>();

                for (int i = 0; i < data.Count; i++)
                {
                    serializableVectors.Add(new VectorData(data[i]));
                    await Task.Yield();
                }

                return serializableVectors;
            }

            #endregion

            #region Data To Vector

            async Task<List<Vector2>> GetVector2ListFromVectorDataListAsync(List<VectorData> data)
            {
                var results = new List<Vector2>();

                for (int i = 0; i < data.Count; i++)
                {
                    results.Add(new Vector2(data[i].x, data[i].y));
                    await Task.Yield();
                }

                return results;
            }

            async Task<List<Vector3>> GetVector3ListFromVectorDataListAsync(List<VectorData> data)
            {
                var results = new List<Vector3>();

                for (int i = 0; i < data.Count; i++)
                {
                    results.Add(new Vector3(data[i].x, data[i].y, data[i].z));
                    await Task.Yield();
                }

                return results;
            }

            async Task<List<Vector4>> GetVector4ListFromVectorDataListAsync(List<VectorData> data)
            {
                var results = new List<Vector4>();

                for (int i = 0; i < data.Count; i++)
                {
                    results.Add(new Vector4(data[i].x, data[i].y, data[i].z, data[i].w));
                    await Task.Yield();
                }

                return results;
            }

            #endregion

            async Task<List<int>> GetIntDataAsync(List<int> data)
            {
                var results = new List<int>();

                for (int i = 0; i < data.Count; i++)
                {
                    results.Add(data[i]);
                    await Task.Yield();
                }

                return results;
            }

            async Task<int[]> CreateSerializableIntDataAsync(int[] intData, int iterations, IProgress<int> progress)
            {
                var intSublist = Helpers.CreateSubListData(intData, iterations);

                var intDataTasks = new List<Task<List<int>>>();

                for (int i = 0; i < intSublist.Count; i++)
                {
                    intDataTasks.Add(GetIntDataAsync(intSublist[i]));

                    var percentageCompleted = (i * 100) / intSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(intDataTasks);

                var intSubListResults = new List<List<int>>();

                for (int i = 0; i < intDataTasks.Count; i++)
                    intSubListResults.Add(intDataTasks[i].Result);

                return Helpers.MergeSubListData(intSubListResults).ToArray();
            }

            #region Vector To Data

            async Task<VectorData[]> Vector2ArrayToVector2DataArrayAsync(Vector2[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<VectorData>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetSerializableVectorDataAsync(vectorSublist[i]));

                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<VectorData>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }

            async Task<VectorData[]> Vector3ArrayToVector3DataArrayAsync(Vector3[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<VectorData>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetSerializableVectorDataAsync(vectorSublist[i]));
                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<VectorData>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }

            async Task<VectorData[]> Vector4ArrayToVector4DataArrayAsync(Vector4[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<VectorData>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetSerializableVectorDataAsync(vectorSublist[i]));
                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<VectorData>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }

            #endregion

            #region Data To Vector

            async Task<Vector2[]> Vector2DataArrayToVector2ArrayAsync(VectorData[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<Vector2>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetVector2ListFromVectorDataListAsync(vectorSublist[i]));
                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<Vector2>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }

            async Task<Vector3[]> Vector3DataArrayToVector3ArrayAsync(VectorData[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<Vector3>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetVector3ListFromVectorDataListAsync(vectorSublist[i]));
                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<Vector3>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }


            async Task<Vector4[]> Vector4DataArrayToVector4ArrayAsync(VectorData[] vectorData, int iterations, IProgress<int> progress)
            {
                var vectorSublist = Helpers.CreateSubListData(vectorData, iterations);

                var vectorDataTasks = new List<Task<List<Vector4>>>();

                for (int i = 0; i < vectorSublist.Count; i++)
                {
                    vectorDataTasks.Add(GetVector4ListFromVectorDataListAsync(vectorSublist[i]));
                    var percentageCompleted = (i * 100) / vectorSublist.Count;
                    progress.Report(percentageCompleted);
                }

                await Task.WhenAll(vectorDataTasks);

                var vectorSubListResults = new List<List<Vector4>>();

                for (int i = 0; i < vectorDataTasks.Count; i++)
                    vectorSubListResults.Add(vectorDataTasks[i].Result);

                return Helpers.MergeSubListData(vectorSubListResults).ToArray();
            }

            #endregion

            public async Task<Mesh> ConvertMeshDataToMesh(MeshData meshData)
            {
                Mesh mesh = new Mesh();

                var sw = new System.Diagnostics.Stopwatch();

                sw.Start();

                Debug.Log($"============>>>>>>>>> Getting Mesh Data");

                var vertsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Verts Progress : {progress}");
                });

                vertsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var trisProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Tris Progress : {progress}");
                });

                trisProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var normalsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Normals Progress : {progress}");
                });

                normalsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var uvsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> UVs Progress : {progress}");
                });

                uvsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var tangentsProgress = new Progress<int>(progress =>
                {

                });

                tangentsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                //var indicesProgress = new Progress<int>(progress =>
                //{

                //});

                //indicesProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var verticesData = Vector3DataArrayToVector3ArrayAsync(meshData.vertices, 1000, vertsProgress);
                var trianglesData = CreateSerializableIntDataAsync(meshData.triangles, 2000, trisProgress);
                var normalsData = Vector3DataArrayToVector3ArrayAsync(meshData.normals, 1000, normalsProgress);
                var uvsData = Vector2DataArrayToVector2ArrayAsync(meshData.uvs, 1000, uvsProgress);
                var tangentsData = Vector4DataArrayToVector4ArrayAsync(meshData.tangents, 1000, tangentsProgress);
                //var indicesData = CreateSerializableIntDataAsync(meshData.indices, 2000, indicesProgress);

                await Task.WhenAll(verticesData, trianglesData, normalsData, uvsData, tangentsData);

                Debug.Log($" ==================>>>>>>>>>>>> Load Completed - Creating Mesh");

                mesh.SetVertices(verticesData.Result);
                mesh.SetTriangles(triangles, 0);
                mesh.SetNormals(normalsData.Result);
                mesh.SetUVs(0, uvsData.Result);
                mesh.SetTangents(tangentsData.Result);
               // mesh.SetIndices(indicesData.Result, (MeshTopology)topologyInt, 0);

                mesh.RecalculateNormals();
                mesh.RecalculateBounds();
                mesh.RecalculateTangents();

                return mesh;
            }

            public async Task<MeshData> ConvertToSerializableMeshDataAsync(Mesh targetMesh)
            {
                #region Mesh Data

                var sw = new System.Diagnostics.Stopwatch();

                sw.Start();

                Debug.Log($"============>>>>>>>>> Getting Mesh Data");

                var vertsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Verts Progress : {progress}");
                });

                vertsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var trisProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Tris Progress : {progress}");
                });

                trisProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var normalsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> Normals Progress : {progress}");
                });

                normalsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var uvsProgress = new Progress<int>(progress =>
                {
                    Debug.Log($"============>>>>>>>>> UVs Progress : {progress}");
                });

                uvsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var tangentsProgress = new Progress<int>(progress =>
                {
                  
                });

                tangentsProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                //var indicesProgress = new Progress<int>(progress =>
                //{

                //});

                //indicesProgress.ProgressChanged += SerializableMeshData_ProgressChanged;

                var verticesData = Vector3ArrayToVector3DataArrayAsync(targetMesh.vertices, 1000, vertsProgress);
                var trianglesData = CreateSerializableIntDataAsync(targetMesh.triangles, 2000, trisProgress);
                var normalsData = Vector3ArrayToVector3DataArrayAsync(targetMesh.normals, 1000, normalsProgress);
                var uvsData = Vector2ArrayToVector2DataArrayAsync(targetMesh.uv, 1000, uvsProgress);
                var tangentsData = Vector4ArrayToVector4DataArrayAsync(targetMesh.tangents, 1000, tangentsProgress);
                //var indicesData = CreateSerializableIntDataAsync(targetMesh.GetIndices(0), 2000, indicesProgress);

                topology = targetMesh.GetTopology(0);
                topologyInt = (int)targetMesh.GetTopology(0);
                topologyString = targetMesh.GetTopology(0).ToString();

                await Task.WhenAll(verticesData, trianglesData, normalsData, uvsData, tangentsData);

                vertices = verticesData.Result;
                triangles = trianglesData.Result;
                normals = normalsData.Result;
                uvs = uvsData.Result;
                tangents = tangentsData.Result;

                Debug.Log($"============>>>>>>>>> Mesh Data Completed With : {vertices.Length} Vertices : {triangles.Length} Triangles : {normals.Length} Normals : {uvs.Length} UVs - And : {tangents.Length} Tangents And It Took : {sw.ElapsedMilliseconds / 1000} Seconds To Complete - .");

                #endregion

                return this;
            }

            private void SerializableMeshData_ProgressChanged(object sender, int progress)
            {
                Debug.Log($"============>>>>>>>>> Tangents Progress : {progress / 5}");
            }

            public Mesh GetMesh()
            {
                Mesh mesh = new Mesh();

                //mesh.name = name;

                #region Vertices

                List<Vector3> verts = new List<Vector3>();

                for (int i = 0; i < vertices.Length; i++)
                    verts.Add(vertices[i].ToVector3());

                mesh.SetVertices(verts);

                #endregion

                #region Triangles

                mesh.SetTriangles(triangles, 0);

                #endregion

                #region Normals

                List<Vector3> norms = new List<Vector3>();

                for (int i = 0; i < normals.Length; i++)
                    norms.Add(normals[i].ToVector3());

                mesh.SetNormals(norms);

                mesh.RecalculateNormals();

                #endregion

                #region Uvs

                List<Vector2> uv = new List<Vector2>();

                for (int i = 0; i < uvs.Length; i++)
                    uv.Add(uvs[i].ToVector2());

                mesh.SetUVs(0, uv);

                #endregion

                #region Tangents

                mesh.RecalculateTangents();

                #endregion

                mesh.RecalculateBounds();

                return mesh;
            }

            #endregion
        }

        [Serializable]
        public class VectorData
        {
            #region Components

            public float x, y, z, w;

            #endregion

            #region Main

            public VectorData()
            {

            }

            public VectorData(float x, float y)
            {
                this.x = x;
                this.y = y;
            }

            public VectorData(float x, float y, float z)
            {
                this.x = x;
                this.y = y;
                this.z = z;
            }

            public VectorData(float x, float y, float z, float w)
            {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
            }

            public VectorData(Vector2 vector)
            {
                x = vector.x;
                y = vector.y;
            }

            public VectorData(Vector3 vector)
            {
                x = vector.x;
                y = vector.y;
                z = vector.z;
            }

            public VectorData(Vector4 vector)
            {
                x = vector.x;
                y = vector.y;
                z = vector.z;
                w = vector.w;
            }

            public override string ToString()
            {
                return $"{x}:{y}:{z}";
            }

            public Vector2 ToVector2() => new Vector2(x, y);
            public Vector3 ToVector3() => new Vector3(x, y, z);
            public Vector4 ToVector4() => new Vector4(x, y, z, w);

            public VectorData FromVector(Vector2 vector) => new VectorData(vector.x, vector.y);
            public VectorData FromVector(Vector3 vector) => new VectorData(vector.x, vector.y, vector.z);
            public VectorData FromVector(Vector4 vector) => new VectorData(vector.x, vector.y, vector.z, vector.w);

            #endregion
        }

        #endregion

        #region Permissions

        [Serializable]
        public class PermissionInfo : AppComponent
        {
            #region Components

            [Space(5)]
            public string title;

            [Space(5)]
            public string message;

            [Space(5)]
            public PermissionType type;

            [HideInInspector]
            public bool granted;

            #endregion

            #region Main

            #region Data Setters

            public void Granted() => granted = true;

            #endregion

            #region Data Getters

            public string Title => title;
            public string Message => message;

            public PermissionType Permission => type;
            public bool IsGranted => granted;

            #endregion

            #endregion
        }

        #endregion

        #region Profile

        [Serializable]
        public class Profile : PostDataIdentifier
        {
            #region Components

            #region User Login Info

            public string userName;
            public string userEmail;
            public string userPassword;

            public string userProfilePictureURL;

            #endregion

            #region Profile Info

            public int width;
            public int height;

            #endregion

            #endregion

            #region Main

            public Profile()
            {
            }

            public Profile(string userName, string userEmail, string userPassword, string userProfilePictureURL = null)
            {
                this.userName = userName;
                this.userEmail = userEmail;
                this.userPassword = userPassword;
                this.userProfilePictureURL = userProfilePictureURL;
            }

            #region Info Setters

            public void SetUserName(string userName) => this.userName = userName;
            public void SetUserEmail(string userEmail) => this.userEmail = userEmail;
            public void SetUserPassword(string userPassword) => this.userPassword = userPassword;
            public void SetUserProfilePictureURL(string userProfilePictureURL) => this.userProfilePictureURL = userProfilePictureURL;

            public void SetProfilePictureDimensions(int width, int height)
            {
                this.width = width;
                this.height = height;
            }

            #endregion

            #region Info Getters

            public string GetUserName()
            {
                return userName;
            }

            public string GetUserEmail()
            {
                return userEmail;
            }

            public string GetUserPassword()
            {
                return userPassword;
            }

            public string GetUserProfilePictureURL()
            {
                return userProfilePictureURL;
            }

            public (int width, int hieght) GetProfilePictureDimensions() => (width, height);

            #endregion

            #endregion
        }

        #endregion

        #region

        [Serializable]
        public class Telemetry
        {
            #region Components

            public ProfileType profileType;

            #endregion

            #region Main

            public Telemetry()
            {

            }

            public Telemetry(ProfileType profileType)
            {
                this.profileType = profileType;
            }

            public void SetProfileType(ProfileType profileType) => this.profileType = profileType;

            public ProfileType GetProfileType()
            {
                return profileType;
            }

            #endregion
        }

        #endregion

        #region Debugging

        [Serializable]
        public struct MonoLogInfo
        {
            #region Components

            public string attributeName;

            [Space(5)]
            public LogInfoChannel logType;

            [Space(5)]
            public string logColorValue;

            #endregion
        }

        [Serializable]
        public struct LogCatAttributes
        {
            #region Components

            [Space(10)]
            public string debugClassLogCat;

            #endregion

            #region Main

            public bool HasDebugLogCat()
            {
                return !string.IsNullOrEmpty(debugClassLogCat);
            }

            public string GetDebugLogCat(string log)
            {
                return debugClassLogCat + log;
            }

            #endregion
        }

        [Serializable]
        public struct DebugMonoLogHeaderAttributes
        {
            #region Components

            [Header("Debugging : Log Info Attributes")]
            [Space(10)]
            [SerializeField]
            public LogInfoChannel enabledInfoLogs;

            [Space(10)]
            [Header("Debugging : Exceptions Attributes")]
            [Space(10)]
            [SerializeField]
            public LogExceptionType enabledExceptionLogs;

            [Space(10)]
            [Header("Debugging : Log Cat Attributes")]
            [Space(10)]
            [SerializeField]
            public LogCatAttributes logCatInfo;

            #endregion

            #region Main

            public LogInfoChannel GetEnabledLogInfoType()
            {
                return enabledInfoLogs;
            }

            public LogExceptionType GetEnabledLogExceptionType()
            {
                return enabledExceptionLogs;
            }

            public LogCatAttributes GetLogCatInfoAttributes()
            {
                return logCatInfo;
            }

            #endregion
        }

        [Serializable]
        public struct MonoLogAttributes
        {
            #region Components

            public string attributeName;

            [Space(5)]
            public LogAttributeType attributeType;

            [Space(5)]
            public string attributeColorValue;

            [Space(5)]
            public bool isBoldFontWeight;

            #endregion
        }

        #endregion

        #region AR Data Types

        public enum ARFocusType
        {
            Finding,
            Found
        }

        public enum WidgetLayoutViewType
        {
            None,
            DefaultView,
            ItemView,
            ListView
        }

        #endregion

        #region AR Data Structs

        [Serializable]
        public struct ARFocusContent
        {
            #region Components

            public GameObject value;

            [Space(5)]
            public GameObject icon;

            [Space(5)]
            public SceneARSessionState sessionState;

            SceneARSessionState previousSessionState;

            #endregion

            #region Main

            public void Show()
            {
                if (icon)
                {
                    if (icon.activeSelf == true)
                        return;

                    icon.SetActive(true);
                }
                else
                    Debug.LogWarning("--> RG_Unity - Show : AR Focus Content Value Is Null.");
            }

            public void Hide()
            {
                if (icon)
                {
                    if (icon.activeSelf == false)
                        return;

                    icon.SetActive(false);
                }
                else
                    Debug.LogWarning("--> RG_Unity - Show : AR Focus Content Value Is Null.");
            }

            public void SetPose(ARSceneTrackedPose trackedPose)
            {
                if (value == null)
                    return;

                value.transform.position = trackedPose.position;
                value.transform.rotation = trackedPose.rotation;
            }

            public void SetSessionState(SceneARSessionState state)
            {
                previousSessionState = sessionState;
                sessionState = state;
            }

            public SceneARSessionState GetSessionState()
            {
                return sessionState;
            }

            public void OnSessionStateChanged()
            {
                if (sessionState == previousSessionState)

                    switch (sessionState)
                    {
                        case SceneARSessionState.AssetPlaced:

                            break;
                    }
            }

            #endregion
        }

        [Serializable]
        public struct ARSceneTrackingData
        {
            public ARSession session;

            [Space(5)]
            public ARRaycastManager rayCastManager;

            [Space(5)]
            public ARFocusContent focusContent;

            [Space(5)]
            public float trackingDistance;

            [Space(5)]
            public float groundOffSet;

            [Space(5)]
            public TrackableType trackableTypes;

            [Space(5)]
            public bool initializeOnStart;

            [HideInInspector]
            public List<ARRaycastHit> hitInfoList;

            [HideInInspector]
            public Vector3 screenCenter;

            public ARSceneTrackedPose trackedPose;
        }

        public struct ARSceneTrackedPose
        {
            public Vector3 position;
            public Quaternion rotation;
        }

        #endregion

        #region UI Image Data

        [Serializable]
        public class UIImageDisplayer
        {
            #region Components

            public string name;

            [Space(5)]
            public Image value;

            [Space(5)]
            public UIImageDisplayerType imageDisplayerType;

            #endregion

            #region Main

            public void SetUIImage(UIImageType imageType, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                IsInitialized(initializationCallback =>
                {
                    if (initializationCallback.Success())
                    {
                        value.sprite = AppDatabaseManager.Instance.GetImageFromLibrary(imageType).value;

                        if (value?.sprite == AppDatabaseManager.Instance.GetImageFromLibrary(imageType).value)
                        {
                            callbackResults.result = $"UI Image Displayer Named : {name} - Of Type : {imageDisplayerType} Has Been Set Successfully";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"UI Image Displayer Named : {name} - Of Type : {imageDisplayerType} Couldn't Set UI Image Data For Some Weired Reasons - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        callbackResults = initializationCallback;
                });

                callback.Invoke(callbackResults);
            }

            void IsInitialized(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (value != null)
                {
                    if (value.sprite != null)
                    {
                        callbackResults.result = $"UI Image Displayer : {name} Of Type {imageDisplayerType}'s Has Been Initialized Successfully.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"UI Image Displayer : {name} Of Type {imageDisplayerType}'s Value Sprite Component Is Missing / Null / Not Assigned In The Inspector Panel.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"UI Image Displayer : {name} Of Type {imageDisplayerType}'s Value Is Missing / Null / Not Assigned In The Inspector Panel.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class UIImageData : AppComponent
        {
            #region Components

            [Space(5)]
            public Sprite value;

            [Space(5)]
            public UIImageType imageType;

            #endregion

            #region Main

            public void SetUIImage(UIImageType imageType, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                IsInitialized(initializationCallback => 
                {
                    if(initializationCallback.Success())
                    {
                        value = AppDatabaseManager.Instance.GetImageFromLibrary(imageType).value;

                        if(value == AppDatabaseManager.Instance.GetImageFromLibrary(imageType).value)
                        {
                            callbackResults.result = $"UI Image Data Set Successfully";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Couldn't Set UI Image Data For Some Wiered Reasons - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        callbackResults = initializationCallback;
                });

                callback.Invoke(callbackResults);
            }

            void IsInitialized(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if(value != null)
                {
                    callbackResults.result = $"UI Image Displayer : {name} Of Type {imageType}'s Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"UI Image Displayer : {name} Of Type {imageType}'s Value Is Missing / Null / Not Assigned In The Inspector Panel.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion
        }

        #endregion

        #region File Data

        [Serializable]
        public class AppRestriction : IRestrictionData
        {
            #region Components

            public string name;

            [Space(5)]
            public AppRestrictionType restrictionType;

            #endregion

            #region Main

            public AppRestrictionType GetAppRestrictionType()
            {
                return restrictionType;
            }

            #endregion
        }

        [Serializable]
        public class ProjectRestriction : AppRestriction
        {
            #region Components

            public Compatibility projectSupportType;

            #endregion

            #region Main

            public void SetRestrictionType(AppRestrictionType restrictionType) => this.restrictionType = restrictionType;

            public void SetProjectSupportType(Compatibility supportType) => projectSupportType = supportType;

            public Compatibility GetProjectSupportType()
            {
                return projectSupportType;
            }

            #endregion
        }

        [Serializable]
        public class AppInfoData
        {
            #region Components

            [Header("App Restrictions")]
            [Space(5)]
            public List<ProjectRestriction> appRestrictions = new List<ProjectRestriction>();

            #endregion

            #region Main

            public List<ProjectRestriction> GetAppRestriction()
            {
                return appRestrictions;
            }

            #endregion
        }

        [Serializable]
        public class FileData : AppComponent
        {
            #region Components

            [Space(5)]
            public SelectableWidgetType dataType;

            [Space(5)]
            public FileExtensionType extension;

            #endregion
        }

        #endregion

        #region Folder Structure

        [Serializable]
        public class ProjectRootStructureData : SerializableData
        {
            #region Components

            public ProjectStructureData rootProjectStructure;
            public ProjectCreationTemplateData projectCreationTemplateData;

            #endregion

            #region Main

            public ProjectRootStructureData()
            {

            }

            public ProjectRootStructureData(ProjectStructureData root) => rootProjectStructure = root;

            public ProjectStructureData GetProjectStructureData()
            {
                return rootProjectStructure;
            }

            public ProjectCreationTemplateData GetProjectCreationTemplateData()
            {
                return projectCreationTemplateData;
            }

            #endregion
        }

        [Serializable]
        public struct ProjectCreationTemplateData
        {
            #region Components

            public ProjectInfo projectInfo;

            #endregion

            #region Main

            public void SetProjectInfo(ProjectInfo projectInfo) => this.projectInfo = projectInfo;

            public ProjectInfo GetProjectInfo()
            {
                return projectInfo;
            }

            #endregion
        }

        [Serializable]
        public class Project
        {
            #region Components

            public string name;
            public UIScreenWidget widget;
            public ProjectStructureData structureData;

            #endregion
        }

        [Serializable]
        public class ProjectCategoryInfo : AppComponent
        {
            #region Components

            [Space(5)]
            public Color color;

            [Space(5)]
            public ProjectCategoryType type;

            #endregion

            #region Main

            public ProjectCategoryInfo()
            {

            }

            public ProjectCategoryInfo(Color color, ProjectCategoryType type)
            {
                this.color = color;
                this.type = type;
            }

            public Color GetColor()
            {
                return color;
            }

            public ProjectCategoryType GetProjectCategoryType()
            {
                return type;
            }

            #endregion
        }

        [Serializable]
        public class ProjectInfo
        {
            #region Components

            public string name;

            [HideInInspector]
            public ProjectCategoryType categoryType = ProjectCategoryType.Project_All;

            [HideInInspector]
            public ProjectTamplateType templateType;

            [HideInInspector]
            public SortType sortType = SortType.Ascending;

            #endregion

            #region Main

            public ProjectInfo()
            {

            }

            public ProjectInfo(string name, ProjectCategoryType categoryType)
            {
                this.name = name;
                this.categoryType = categoryType;
            }

            public ProjectInfo(string name, ProjectCategoryType categoryType = ProjectCategoryType.Project_3D, ProjectTamplateType templateType = ProjectTamplateType.Default, SortType sortType = SortType.Ascending)
            {
                this.name = name;
                this.categoryType = categoryType;
                this.templateType = templateType;
                this.sortType = sortType;
            }

            #region Set Types

            public void SetCategoryType(ProjectCategoryType categoryType) => this.categoryType = categoryType;

            public void SetSortType(SortType sortType) => this.sortType = sortType;

            public void SetTamplateType(ProjectTamplateType templateType) => this.templateType = templateType;

            #endregion

            #region Get Types

            public ProjectCategoryType GetCategoryType()
            {
                return categoryType;
            }

            public ProjectTamplateType GetTamplateType()
            {
                return templateType;
            }

            public SortType GetSortType()
            {
                return sortType;
            }

            public void GetSortType(Action<CallbackData<SortType>> callback)
            {
                CallbackData<SortType> callbackResults = new CallbackData<SortType>();

                callbackResults.result = $"Found Sort Type : {sortType}";
                callbackResults.data = sortType;
                callbackResults.resultCode = Helpers.SuccessCode;

                callback.Invoke(callbackResults);
            }

            public void GetCategoryType(Action<CallbackData<Enum>> callback)
            {
                CallbackData<Enum> callbackResults = new CallbackData<Enum>();

                if (ScreenUIManager.Instance != null)
                {
                    if (ScreenUIManager.Instance.HasCurrentScreen().Success())
                    {
                        switch (ScreenUIManager.Instance.GetCurrentScreenType().GetData())
                        {
                            case ScreenType.ProjectCreationScreen:

                                callbackResults.result = $"Found Filter Of Type : {categoryType}.";
                                callbackResults.data = categoryType;
                                callbackResults.resultCode = Helpers.SuccessCode;

                                break;

                            case ScreenType.ProjectDashboardScreen:

                                callbackResults.result = $"Found Filter Of Type : {categoryType}.";
                                callbackResults.data = categoryType;
                                callbackResults.resultCode = Helpers.SuccessCode;

                                break;
                        }
                    }
                    else
                    {
                        callbackResults.result = ScreenUIManager.Instance.HasCurrentScreen().result;
                        callbackResults.data = default;
                        callbackResults.resultCode = ScreenUIManager.Instance.HasCurrentScreen().resultCode;
                    }
                }
                else
                {
                    callbackResults.result = "Screen UI Manager Instance Is Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ProjectStructureData : SerializableData
        {
            #region Components

            [Space(5)]
            public Folder rootFolder = new Folder();

            [Space(5)]
            public List<string> excludedSystemFiles = new List<string>();

            [Space(5)]
            public List<string> excludedSystemFolders = new List<string>();

            [Space(5)]
            public DynamicWidgetsContainer mainFolderDynamicWidgetsContainer = null;

            [Space]
            public LayoutViewType layoutViewType;

            [Space]
            public PaginationViewType paginationViewType;

            [Space(5)]
            public List<FolderLayoutView> layouts = new List<FolderLayoutView>();

            [HideInInspector]
            public List<Folder> folders = new List<Folder>();

            [HideInInspector]
            public bool inverseSelect = false;

            [HideInInspector]
            public ProjectInfo projectInfo = new ProjectInfo();

            #endregion

            #region Main

            //public void Initialize(Folder folder) => OpenFolderStructure(folder, initialFOlderStructure);

            //public void SetCurrentSelectedFolder(Folder folder) => currentFolder = folder;

            public Folder GetRootFolder()
            {
                return rootFolder;
            }

            public List<string> GetExcludedSystemFileData()
            {
                return excludedSystemFiles;
            }

            public List<string> GetExcludedSystemFolderData()
            {
                return excludedSystemFolders;
            }

            public List<FolderLayoutView> GetFolderLayoutViewList()
            {
                return layouts;
            }

            public void SetInverseSelect(bool value) => inverseSelect = value;

            public bool InverseSelect()
            {
                return inverseSelect;
            }

            public DynamicWidgetsContainer GetMainFolderDynamicWidgetsContainer()
            {
                return mainFolderDynamicWidgetsContainer;
            }

            public void AddFolder(Folder folder)
            {
                if (!folders.Contains(folder))
                    folders.Add(folder);
                else
                    Debug.LogWarning("--> Failed : Folder Already Exists In Folders.");
            }

            public void RemodeFolder(Folder folder)
            {
                if (folders.Contains(folder))
                    folders.Remove(folder);
                else
                    Debug.LogWarning("--> Failed : Folder Doesn't Exists In Folders.");
            }

            public void RemoveFolders()
            {
                if (folders.Count > 0)
                    foreach (var folder in folders)
                        folders.Remove(folder);
                else
                    Debug.LogWarning("--> Failed : No Folders Found To Remove.");
            }

            public List<Folder> GetFolders()
            {
                return folders;
            }

            #region Sort & Filter

            public void SetFilterType(Enum filterType, Action<CallbackData<Enum>> callback = null)
            {
                CallbackData<Enum> callbackResults = new CallbackData<Enum>();

                Helpers.GetComponent(ScreenUIManager.Instance, validComponentCallbackResults => 
                {
                    callbackResults.result = validComponentCallbackResults.result;
                    callbackResults.resultCode = validComponentCallbackResults.resultCode;

                    if (callbackResults.Success())
                    {
                        if (ScreenUIManager.Instance.HasCurrentScreen().Success())
                        {
                            if (ScreenUIManager.Instance.GetCurrentScreenType().GetData() == ScreenType.ProjectCreationScreen)
                            {
                                GetProjectInfo().SetCategoryType((ProjectCategoryType)filterType);

                                callbackResults.result = $"Project Category Type Set To : {GetProjectInfo().GetCategoryType()}";
                                callbackResults.data = GetProjectInfo().GetCategoryType();
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = ScreenUIManager.Instance.HasCurrentScreen().result;
                                callbackResults.data = default;
                                callbackResults.resultCode = ScreenUIManager.Instance.HasCurrentScreen().resultCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = "Current Screen Is Not Yet Initialized / Not Found - Missing.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        callbackResults.data = default;
                });

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Content Types

            #region Set Content Types

            public void SetLayoutViewType(LayoutViewType viewType) => layoutViewType = viewType;

            public void SetProjectInfo(ProjectInfo projectInfo) => this.projectInfo = projectInfo;

            public void SetPaginationViewType(PaginationViewType paginationView) => paginationViewType = paginationView;

            #endregion

            #region Get Content Types

            public LayoutViewType GetLayoutViewType()
            {
                return layoutViewType;
            }

            public PaginationViewType GetPaginationViewType()
            {
                return paginationViewType;
            }

            public FolderLayoutView GetFolderLayoutView(LayoutViewType viewType)
            {
                return layouts.Find(layout => layout.viewType == viewType);
            }

            public ProjectInfo GetProjectInfo()
            {
                return projectInfo;
            }

            public void GetProjectInfo(Action<CallbackData<ProjectInfo>> callback)
            {
                CallbackData<ProjectInfo> callbackResults = new CallbackData<ProjectInfo>();

                if(projectInfo != null)
                {
                    callbackResults.result = "Project Info Found.";
                    callbackResults.data = projectInfo;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Project Info Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            #endregion

            #endregion
        }


        [Serializable]
        public class Folder : SerializableData
        {
            #region Components

            public StorageType directoryType;

            [HideInInspector]
            public DefaultUIWidgetActionState defaultWidgetActionState;

            [HideInInspector]
            public Folder rootFolder;

            //[HideInInspector]
            //public string directory;

            List<string> validFilePath = new List<string>();

            [HideInInspector]
            public AssetCategoryType categoryType;

            [HideInInspector]
            public bool isRootFolder;

            #endregion

            #region Main

            public Folder()
            {

            }

            public Folder(string name) => this.name = name;

            public bool IsRootFolder()
            {
                if (directoryType == StorageType.Project_Structure || directoryType == StorageType.Default_App_Storage)
                    isRootFolder = true;
                else
                    isRootFolder = false;

                return isRootFolder;
            }

            public StorageDirectoryData GetDirectoryData()
            {
                return storageData;
            }

            public int GetFileCount()
            {
                int fileCount = 0;

                if (Directory.Exists(storageData.projectDirectory))
                {

                    validFilePath = new List<string>();
                    string[] files = Directory.GetFiles(storageData.projectDirectory);

                    if (files.Length > 0)
                        foreach (var file in files)
                            if (!file.Contains(".meta"))
                                if (!validFilePath.Contains(file))
                                    validFilePath.Add(file);

                    fileCount = validFilePath.Count;
                }
                else
                    Debug.LogError($"Directory : {storageData.projectDirectory} Not Valid / Doesn't Exist Or Make Sense Anymore!");

                return fileCount;
            }

            #region Content Types

            #region Set Content Types

            public void SetCategoryType(AssetCategoryType categoryType) => this.categoryType = categoryType;

            #endregion

            #region Get Content Types

            public AssetCategoryType GetCategoryType()
            {
                if (Directory.Exists(storageData.projectDirectory))
                {
                    string[] files = Directory.GetFiles(storageData.projectDirectory);

                    Helpers.StringValueValid(filesValidCallbackResults => 
                    {
                        if(filesValidCallbackResults.Success())
                        {
                            validFilePath = new List<string>();

                            foreach (var file in files)
                                if (!file.Contains(".meta"))
                                    if (!validFilePath.Contains(file))
                                        validFilePath.Add(file);

                            Helpers.StringValueValid(filesValidCallbackResults => 
                            {
                                if (filesValidCallbackResults.Success())
                                {
                                    List<AssetData> loadedAssetsData = new List<AssetData>();

                                    foreach (var validFile in validFilePath)
                                    {
                                        StorageDirectoryData storageData = new StorageDirectoryData
                                        {

                                        };

                                        AppDatabaseManager.Instance.LoadData<AssetData>(storageData, assetsLoadedCallbackResults => 
                                        {
                                            if(assetsLoadedCallbackResults.Success())
                                            {
                                                if (!loadedAssetsData.Contains(assetsLoadedCallbackResults.data))
                                                    loadedAssetsData.Add(assetsLoadedCallbackResults.data);
                                            }
                                            else
                                                Debug.LogError(assetsLoadedCallbackResults.result);
                                        });
                                    }

                                    Helpers.SerializableComponentValid<AssetData>(loadedAssetsData, validComponentsCallbackResults => 
                                    {
                                        if(validComponentsCallbackResults.Success())
                                        {
                                            foreach (var data in validComponentsCallbackResults.data)
                                            {
                                                if(data.GetCategoryType() != categoryType)
                                                {
                                                    categoryType = AssetCategoryType.None;
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                            Debug.LogError(validComponentsCallbackResults.result);
                                    });
                                }
                                else
                                    Debug.LogError(filesValidCallbackResults.result);
                            }, Helpers.GetArray(validFilePath));
                        }
                        else
                            Debug.LogError(filesValidCallbackResults.result);
                    }, files);
                }
                else
                    Debug.LogError($"Directory : {storageData.projectDirectory} Not Valid / Doesn't Exist Or Make Sense Anymore!");

                return categoryType;
            }

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public class Folder<T>
        {
            #region Components

            public string name;

            [Space(5)]
            public Dictionary<string, T> files = new Dictionary<string, T>();

            [Space(5)]
            public StorageDirectoryData directoryData;

            #endregion

            #region Main

            public void AddFile(string fileName, T file)
            {
                if (files.ContainsKey(fileName))
                    files.Add(fileName, file);
            }

            public void AddFiles(Dictionary<string, T> files)
            {
                if (files.Count > 0)
                    foreach (var file in files)
                        if (this.files.ContainsKey(file.Key))
                            this.files.Add(file.Key, file.Value);
            }

            public int GetContentCount()
            {
                return files.Count;
            }

            #endregion
        }


        [Serializable]
        public struct FolderLayoutView
        {
            public string name;

            [Space(5)]
            public LayoutView layout;

            [Space(5)]
            public RectOffset padding;

            [Space(5)]
            public LayoutViewType viewType;
        }

        [Serializable]
        public struct UIWidgetInfo
        {
            #region Components

            public string widgetName;
            public Vector2 position;
            public UIScreenDimensions dimensions;
            public InputUIState selectionState;

            #endregion

            #region Main

            public string GetWidgetName()
            {
                return widgetName;
            }

            public Vector2 GetWidgetScreenPosition()
            {
                return position;
            }

            public UIScreenDimensions GetWidgetUIScreenDimensions()
            {
                return dimensions;
            }

            public InputUIState GetSelectionState()
            {
                return selectionState;
            }

            #endregion
        }

        [Serializable]
        public class FolderNavigationCommand : ICommand
        {
            public Folder folder;
            public FolderStructureType structureType;
            public UIWidgetInfo folderWidgetInfo;

            public FolderNavigationCommand(Folder folder, UIWidgetInfo folderWidgetInfo, FolderStructureType structureType)
            {
                this.folder = folder;
                this.structureType = structureType;
                this.folderWidgetInfo = folderWidgetInfo;
            }

            public void Execute() => AppDatabaseManager.Instance.OpenUIFolderStructure(folder, folderWidgetInfo, structureType);

            public void Undo()
            {
                throw new NotImplementedException();
            }
        }


        [Serializable]
        public struct LayoutView
        {
            public Vector2 itemViewSize;

            [Space(5)]
            public Vector2 itemViewSpacing;
        }

        #region Pagination

        [Serializable]
        public class PaginationComponent
        {
            #region Components

            public PaginationViewType viewType;

            [Space(5)]
            public int itemView_ItemsPerPage;

            [Space(5)]
            public int listView_ItemsPerPage;

            [Space(5)]
            public List<List<UIScreenWidget>> pages = new List<List<UIScreenWidget>>();

            public int CurrentPageIndex { get; set; }

            List<UIScreenWidget> itemList = new List<UIScreenWidget>();
            List<UIScreenWidget> currentPage = new List<UIScreenWidget>();

            Widget paginationWidget;

            #endregion

            #region Main

            public void Initialize()
            {
                paginationWidget = ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.PagerNavigationWidget);
            }

            public void Paginate(List<UIScreenWidget> source, int itemsPerPage)
            {
                itemList = source;
                pages = AppDataExtensions.GetSubList(itemList, itemsPerPage);

                foreach (var item in itemList)
                    item.Hide();
            }

            public void GoToPage(int pageIndex, bool fromInputField = false, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                foreach (var item in itemList)
                    if (item != null)
                        item.Hide();

                if (pageIndex >= pages.Count)
                    pageIndex = pages.Count - 1;

                currentPage = pages[pageIndex];

                foreach (var item in currentPage)
                    item.Show();

                if (fromInputField)
                    CurrentPageIndex = pageIndex;

                // Pagination Widget

                if (paginationWidget)
                {
                    #region UI Text / Input Value

                    if (!fromInputField)
                    {
                        int pageNumber = CurrentPageIndex + 1;
                        paginationWidget.SetActionInputFieldValueText(InputFieldActionType.InputPageNumberField, pageNumber);
                    }

                    if (fromInputField && pageIndex >= pages.Count)
                    {
                        paginationWidget.SetActionInputFieldPlaceHolderText(InputFieldActionType.InputPageNumberField, pages.Count - 1);
                    }

                    string pageCount = $"of  {pages.Count} - {itemList.Count} Item(s)";
                    paginationWidget.SetUITextDisplayerValue(ScreenTextType.PageCountDisplayer, pageCount);

                    #endregion

                    #region UI Buttons State

                    paginationWidget.SetActionButtonState(InputActionButtonType.PreviousNavigationButton, InputUIState.Enabled);
                    paginationWidget.SetActionButtonState(InputActionButtonType.NextNavigationButton, InputUIState.Enabled);

                    if (CurrentPageIndex == 0)
                        paginationWidget.SetActionButtonState(InputActionButtonType.PreviousNavigationButton, InputUIState.Disabled);

                    if (CurrentPageIndex >= pages.Count - 1)
                        paginationWidget.SetActionButtonState(InputActionButtonType.NextNavigationButton, InputUIState.Disabled);

                    //ScreenUIManager.Instance.Refresh();

                    callbackResults.result = $"Go To Page : {pageIndex} Success. Page Found.";
                    callbackResults.resultCode = Helpers.SuccessCode;

                    #endregion
                }

                if (paginationWidget == null || currentPage == null)
                {
                    callbackResults.result = $"Go To Page : {pageIndex} Failed. Page Not Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public int GetPageCount()
            {
                return pages.Count;
            }

            public int GetItemsCount()
            {
                return itemList.Count;
            }

            public void GetItemPageIndex(string itemName, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                bool pageIndexFound = false;

                if (pages.Count > 0)
                {
                    for (int pageIndex = 0; pageIndex < pages.Count; pageIndex++)
                    {
                        var page = pages[pageIndex];

                        if (page.Count > 0)
                        {
                            for (int itemIndex = 0; itemIndex < page.Count; itemIndex++)
                            {
                                if (page[itemIndex].name == itemName)
                                {
                                    pageIndexFound = true;

                                    callbackResults.result = $"Success - Item Page Index Found At : {pageIndex}";
                                    callbackResults.data = pageIndex;
                                    callbackResults.resultCode = (pageIndexFound)? Helpers.SuccessCode : Helpers.ErrorCode;

                                    break;
                                }
                                else
                                    continue;
                            }
                        }
                    }

                    if (!pageIndexFound)
                    {
                        callbackResults.result = $"Failed : Page Index Not Found For : {itemName}.";
                        callbackResults.data = default;
                        callbackResults.resultCode = (pageIndexFound)? Helpers.SuccessCode : Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Failed : No Pages Found.";
                    callbackResults.data = default;
                    callbackResults.resultCode = (pageIndexFound)? Helpers.SuccessCode : Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public bool ItemExistInCurrentPage(UIScreenWidget itemToCheck)
            {
                bool itemExist = false;

                if (currentPage != null && currentPage.Count > 0)
                {
                    foreach (var item in currentPage)
                    {
                        if (item == itemToCheck)
                        {
                            itemExist = true;
                            break;
                        }
                        else
                            continue;
                    }
                }
                else
                    Debug.LogError("==> Current Page Is Null.");

                return itemExist;
            }

            public bool ItemExistInCurrentPage(string itemToCheck)
            {
                bool itemExist = false;

                if (currentPage != null && currentPage.Count > 0)
                {
                    foreach (var item in currentPage)
                    {
                        if (item.name == itemToCheck)
                        {
                            Debug.LogError("==> Asset Exist In Current Page.");
                            itemExist = true;
                            break;
                        }
                        else
                            continue;
                    }
                }
                else
                    Debug.LogError("==> Current Page Is Null.");

                return itemExist;
            }

            public List<UIScreenWidget> GetPage(int pageIndex)
            {
                return pages[pageIndex];
            }

            public List<UIScreenWidget> GetCurrentPage()
            {
                return currentPage;
            }

            public List<UIScreenWidget> GoToPageIndex(int pageIndex)
            {
                CurrentPageIndex = pageIndex;

                return pages[pageIndex];
            }

            public void NextPage()
            {
                if (CurrentPageIndex < pages.Count - 1)
                    CurrentPageIndex++;
                else
                    CurrentPageIndex = pages.Count - 1;

                GoToPage(CurrentPageIndex);
            }

            public void PreviousPage()
            {
                if (CurrentPageIndex > 0)
                    CurrentPageIndex--;
                else
                    CurrentPageIndex = 0;

                GoToPage(CurrentPageIndex);
            }

            public void GetSlotAvailablePageNumber(int itemsPerPage, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (pages != null && pages.Count > 0)
                {
                    bool available = false;
                    int pageID = 0;

                    foreach (var page in pages)
                    {
                        if (page.Count != itemsPerPage)
                        {
                            available = true;
                            pageID = pages.IndexOf(page);

                            break;
                        }
                    }

                    if (pageID == 0 && pages.Count > 1)
                        pageID = pages.Count - 1;

                    if (available)
                    {
                        callbackResults.result = "Slot Found.";
                        callbackResults.data = pageID;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Slot Not Found.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Pages Not Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetSlotAvailableOnScroller(List<UIScreenWidget> itemList, Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (itemList.Count % 2 == 0)
                {
                    callbackResults.result = "No Slot Available - Recalculate Content Container";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }
                else
                {
                    callbackResults.result = "Slot Available";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public struct PageItem<T>
        {
            public string name;
            public T item;
            public int pageID;
        }

        #endregion

        #endregion

        #region Scroller

        [Serializable]
        public class UIScroller<T> where T : DataPackets
        {
            #region Components

            public ScrollRect value;

            [Space(5)]
            public ScrollRect.MovementType movementType;

            [Space(5)]
            public OrientationType orientation;

            [Space(5)]
            public bool resetScrollerPositionOnHide;

            [Space(5)]
            public bool enableScrollBar;

            [Space(5)]
            public UIScrollBar scrollBarComponent = new UIScrollBar();

            [Space(5)]
            public bool fadeUIScrollBar;

            [Space(5)]
            public RectTransform dragViewPort;

            [Space(5)]
            public T dataPackets;

            #endregion

            #region main

            public void Update()
            {
                if (enableScrollBar)
                    scrollBarComponent.Update(value);
            }

            public void ScrollToTop()
            {
                value.verticalNormalizedPosition = 0;
            }

            public void ScrollToBottom()
            {
                value.verticalNormalizedPosition = 1;
            }

            public bool IsScrollBarEnabled()
            {
                return enableScrollBar;
            }

            public UIScrollBar GetUIScrollBarComponent()
            {
                return scrollBarComponent;
            }

            public bool GetFadeUIScrollBar()
            {
                return fadeUIScrollBar;
            }

            public void OnScrollbarFadeIn()
            {
                Debug.LogError("==> Fade In");

                if (fadeUIScrollBar)
                {
                    GetUIScrollBarComponent().SetIsFading();
                    scrollBarComponent.OnScrollbarFadeInUpdate();
                }
                else
                    return;
            }

            public void OnScrollbarFadeOut()
            {
                if (fadeUIScrollBar)
                    scrollBarComponent.OnScrollbarFadeOutUpdate();
                else
                    return;
            }

            public void Initialized(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (value != null)
                {
                    if (enableScrollBar)
                    {
                        if (scrollBarComponent.value != null)
                        {
                            scrollBarComponent.Initialize(fadeUIScrollBar);

                            callbackResults.result = "Initialized Success : Scroller Value & Scrollbar Value Components Assigned";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Initialized Failed : Scrollbar Is Enabled But Scrollbar Value Is Not Assigned";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "Initialized Success : Scroller Value & Scrollbar Value Components Assigned";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }
                else
                {
                    callbackResults.result = "Initialized Failed : Scroller Value & Scrollbar Components Not Assigned";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void Initialize() => OnInitializeScrollBarComponent();

            public RectTransform GetDragViewPort()
            {
                return dragViewPort;
            }

            void OnInitializeScrollBarComponent()
            {
                if (enableScrollBar)
                {
                    switch (scrollBarComponent.GetLayoutDirection())
                    {
                        case UILayoutDirection.Horizontal:

                            Initialized(isInitializedCallback =>
                            {
                                if (Helpers.IsSuccessCode(isInitializedCallback.resultCode))
                                {
                                    scrollBarComponent.Show();
                                    value.horizontalScrollbar = GetUIScrollBarComponent().value;
                                }
                                else
                                    Debug.LogWarning($"Initialize's Initialized Failed With Results : {isInitializedCallback.result}");
                            });

                            break;

                        case UILayoutDirection.Vertical:

                            Initialized(isInitializedCallback =>
                            {
                                if (Helpers.IsSuccessCode(isInitializedCallback.resultCode))
                                {
                                    scrollBarComponent.Show();
                                    value.verticalScrollbar = GetUIScrollBarComponent().value;
                                }
                                else
                                    Debug.LogWarning($"Initialize's Initialized Failed With Results : {isInitializedCallback.result}");
                            });

                            break;
                    }

                    if (fadeUIScrollBar)
                        scrollBarComponent.Initialize(fadeUIScrollBar);
                    else
                        Debug.LogWarning("==> fadeUIScrollBar Not Enabled");
                }
                else
                    scrollBarComponent.Hide();
            }

            public void ResetPosition(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                Vector3 scrollerValue = value.content.localPosition;

                scrollerValue.x = (orientation == OrientationType.Horizontal)? scrollerValue.x = 0 : scrollerValue.x;
                scrollerValue.y = (orientation == OrientationType.Vertical) ? scrollerValue.y = 0 : scrollerValue.y;

                value.content.localPosition = scrollerValue;

                bool isReset = (orientation == OrientationType.Horizontal) ? scrollerValue.x == 0 : scrollerValue.y == 0;

                if (value != null && isReset)
                {
                    callbackResults.result = "Scroller Reset.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Scroller Not Reset Reset.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        public enum UILayoutDirection
        {
            Horizontal,
            Vertical
        }

        [Serializable]
        public class UIScrollBarHandle
        {
            #region Components

            public RectTransform value;

            [Space(5)]
            public int padding;

            int paddingStart = 0,
                  paddingEnd = 0;

            RectOffset rectOffset = new RectOffset();

            #endregion

            #region Main

            public void Update(UILayoutDirection layoutDirection, float scrollDistance)
            {
                if (value && padding > 0)
                {
                    float distanceScrolled = Mathf.Clamp01(scrollDistance);
                    paddingStart = Mathf.RoundToInt(padding * distanceScrolled);
                    paddingEnd = Mathf.RoundToInt(padding * -distanceScrolled);
                    int calculatedPaddingEnd = padding + paddingEnd;

                    if (layoutDirection == UILayoutDirection.Horizontal)
                    {
                        rectOffset.left = paddingStart;
                        rectOffset.right = calculatedPaddingEnd;
                    }

                    if (layoutDirection == UILayoutDirection.Vertical)
                    {
                        rectOffset.top = paddingStart;
                        rectOffset.bottom = calculatedPaddingEnd;
                    }

                    UpdateHandle(layoutDirection, rectOffset);
                }
                else
                    Debug.LogWarning("--> UIScrollBarHandle Update Failed : Handle Value Is Missing / Null Or Padding Is Set To 0.");
            }

            void UpdateHandle(UILayoutDirection layoutDirection, RectOffset rectOffset)
            {
                if (layoutDirection == UILayoutDirection.Horizontal)
                {
                    value.offsetMin = new Vector2(Mathf.Abs(rectOffset.left), value.offsetMin.y);
                    value.offsetMax = new Vector2(-Mathf.Abs(rectOffset.right), value.offsetMax.y);
                }

                if (layoutDirection == UILayoutDirection.Vertical)
                {
                    value.offsetMin = new Vector2(value.offsetMin.x, Mathf.Abs(rectOffset.bottom));
                    value.offsetMax = new Vector2(value.offsetMax.x, Mathf.Abs(rectOffset.top));
                }
            }

            #endregion
        }

        [Serializable]
        public class UIScrollBar
        {
            #region Components

            [Space(5)]
            public Scrollbar value;

            [Space(5)]
            public UILayoutDirection layoutDirection;

            [Space(5)]
            public bool updateHandle;

            [Space(5)]
            public UIScrollBarHandle scrollBarHandle;

            [Space(5)]
            public UIFaderComponent scrollBarUIFaderComponent;

            bool hideOnOutOfFocus;
            bool isFading = false;

            float visibleStateValue = 1.0f;
            float hiddenStateValue = 0.0f;

            UIScreenWidgetVisibilityState scrollBarVisibilityState;

            #endregion

            #region Main

            public void Update(ScrollRect scroller)
            {
                if (updateHandle)
                    scrollBarHandle.Update(layoutDirection, (layoutDirection == UILayoutDirection.Horizontal) ? scroller.horizontalNormalizedPosition : scroller.verticalNormalizedPosition);
            }

            public void Initialize(bool hideOnOutOfFocus)
            {
                if (value != null)
                {
                    if (hideOnOutOfFocus)
                    {
                        if (scrollBarUIFaderComponent.value == null)
                        {
                            if (value.gameObject.GetComponent<CanvasGroup>() == null)
                                value.gameObject.AddComponent<CanvasGroup>();

                            if (value.gameObject.GetComponent<CanvasGroup>() != null)
                                scrollBarUIFaderComponent.value = value.gameObject.GetComponent<CanvasGroup>();
                        }
                    }

                    this.hideOnOutOfFocus = hideOnOutOfFocus;
                }
                else
                    Debug.LogWarning("--> Initialize Failed : Scrollbar Value Missing.");
            }

            public Scrollbar GetScrollbar()
            {
                if (value == null)
                    Debug.LogWarning("--> Initialize Failed : Scrollbar Value Missing.");

                return value ?? null;
            }

            public void GetScrollbarFaderAlphaValue(Action<CallbackData<float>> callback)
            {
                CallbackData<float> callbackResults = new CallbackData<float>();

                if (hideOnOutOfFocus)
                {
                    if (scrollBarUIFaderComponent != null)
                    {
                        callbackResults.result = "Success";
                        callbackResults.data = scrollBarUIFaderComponent.GetFaderAlphaValue();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed : UIScrollbar scrollbarFaderCanvasgroupComponent Is Missing / Null.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Failed : UIScrollbar Variable Not Set To 'fadeOnOutOfFocus'";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetIsFading() => this.isFading = true;

            public void OnScrollbarFadeInUpdate()
            {
                if (hideOnOutOfFocus)
                {
                    if (isFading)
                    {
                        float fadeValue = scrollBarUIFaderComponent.GetFaderAlphaValue();
                        fadeValue = Mathf.Lerp(fadeValue, visibleStateValue, AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScrollbarFadeInSpeed).value * Time.smoothDeltaTime);

                        scrollBarUIFaderComponent.SetFaderAlphaValue(fadeValue);

                        float fadeDistance = scrollBarUIFaderComponent.GetFaderAlphaValue() - visibleStateValue;

                        if (fadeDistance <= visibleStateValue)
                        {
                            scrollBarUIFaderComponent.SetFaderAlphaValue(visibleStateValue);
                            SetVisibilityState(UIScreenWidgetVisibilityState.Visible);
                            isFading = false;
                        }
                    }
                }
                else
                    Debug.LogWarning("--> OnScrollbarFadeIn Failed : UIScrollbar scrollbarFaderCanvasgroupComponent Is Missing / Null.");
            }

            public void OnScrollbarFadeOutUpdate()
            {
                if (hideOnOutOfFocus)
                {
                    if (isFading)
                    {
                        float fadeValue = scrollBarUIFaderComponent.GetFaderAlphaValue();
                        fadeValue = Mathf.Lerp(fadeValue, hiddenStateValue, AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScrollbarFadeInSpeed).value * Time.smoothDeltaTime);

                        scrollBarUIFaderComponent.SetFaderAlphaValue(fadeValue);

                        float fadeDistance = scrollBarUIFaderComponent.GetFaderAlphaValue() - hiddenStateValue;

                        if (fadeDistance <= hiddenStateValue)
                        {
                            scrollBarUIFaderComponent.SetFaderAlphaValue(hiddenStateValue);
                            SetVisibilityState(UIScreenWidgetVisibilityState.Hidden);
                            isFading = false;
                        }
                    }
                }
                else
                    Debug.LogWarning("--> OnScrollbarFadeIn Failed : UIScrollbar scrollbarFaderCanvasgroupComponent Is Missing / Null.");
            }

            public void SetVisibilityState(UIScreenWidgetVisibilityState visibilityState)
            {
                switch (visibilityState)
                {
                    case UIScreenWidgetVisibilityState.Visible:

                        scrollBarUIFaderComponent.SetFaderAlphaValue(visibleStateValue);
                        GetScrollbar().interactable = true;

                        break;

                    case UIScreenWidgetVisibilityState.Hidden:

                        scrollBarUIFaderComponent.SetFaderAlphaValue(hiddenStateValue);
                        GetScrollbar().interactable = false;

                        break;
                }

                this.scrollBarVisibilityState = visibilityState;
            }

            public UIScreenWidgetVisibilityState GetScrollBarVisibilityState()
            {
                return scrollBarVisibilityState;
            }

            public UIFaderComponent GetScrollBarFader()
            {
                return scrollBarUIFaderComponent;
            }

            public UILayoutDirection GetLayoutDirection()
            {
                return layoutDirection;
            }

            public void Show()
            {
                if (value != null)
                    value.gameObject.SetActive(true);
                else
                    Debug.LogWarning("--> Show ScrollBar Failed : ScrollBar Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (value != null)
                    value.gameObject.SetActive(false);
                else
                    Debug.LogWarning("--> Hide ScrollBar Failed : ScrollBar Value Is Missing / Null.");
            }

            #endregion
        }

        [Serializable]
        public class UIFaderComponent
        {
            #region Component

            public CanvasGroup value;

            #endregion

            #region Main

            public void SetFaderAlphaValue(float value) => this.value.alpha = value;

            public float GetFaderAlphaValue()
            {
                return value.alpha;
            }

            #endregion
        }

        #endregion

        #region Selection

        public struct UIStateData
        {
            public FocusedSelectionType selectionType;
            public InputUIState state;
            public Color color;
        }

        [Serializable]
        public class LockStateDataComponent<T> where T : AppMonoBaseClass
        {
            #region Components

            [Space(5)]
            public string name;

            [Space(5)]
            public bool isLockable;

            [Space(5)]
            public LockState initialLockState;

            [Space(5)]
            public UIImageDisplayer lockStateDisplayer;

            private LockState currentLockState;

            #endregion

            #region Main

            public void Init(T fromClass, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                SetLockState(initialLockState, fromClass, lockStateCallback =>
                {
                    callback = lockStateCallback;
                });

                callback?.Invoke(callbackResults);
            }

            void IsInitialized(T fromClass, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (isLockable && lockStateDisplayer.value != null && lockStateDisplayer.imageDisplayerType == UIImageDisplayerType.LockIcon)
                {
                    callbackResults.result = $"Lock State Component Has Been Initialized Successfully From Class : {fromClass.name}.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    if (!isLockable)
                    {
                        callbackResults.result = $"Lock State Component Has Not Been Initialized Successfully From Class : {fromClass.name} - UI Screen Asset Is Not Set To Lockable.";
                        callbackResults.resultCode = Helpers.WarningCode;

                        callback?.Invoke(callbackResults);
                    }

                    if (lockStateDisplayer.value == null)
                    {
                        callbackResults.result = $"Lock State Component Has Not Been Initialized Successfully From Class : {fromClass.name}. - Lock State Component Displayer Value Not Found / Missing / Null / Not Assigned In The Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;

                        callback?.Invoke(callbackResults);
                    }

                    if (lockStateDisplayer.imageDisplayerType != UIImageDisplayerType.LockIcon)
                    {
                        callbackResults.result = $"Lock State Component Has Not Been Initialized Successfully From Class : {fromClass.name}. - Lock State Component Displayer Is Set To : {lockStateDisplayer.imageDisplayerType}. Expected Image Displayer Type Is :  {UIImageDisplayerType.LockIcon}.";
                        callbackResults.resultCode = Helpers.ErrorCode;

                        callback?.Invoke(callbackResults);
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public void SetLockState(LockState state, T fromClass = null, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                IsInitialized(fromClass, initializationCallback =>
                {
                    if (initializationCallback.Success())
                    {
                        if(state != LockState.Default)
                        {
                            if (state == LockState.Locked)
                            {
                                lockStateDisplayer.SetUIImage(UIImageType.LockedIcon, lockStateCallback => 
                                {
                                    callbackResults = lockStateCallback;
                                });
                            }

                            if (state == LockState.Unlocked)
                            {
                                lockStateDisplayer.SetUIImage(UIImageType.UnlockedIcon, lockStateCallback =>
                                {
                                    callbackResults = lockStateCallback;
                                });
                            }
                        }
                        else
                        {
                            lockStateDisplayer.SetUIImage(UIImageType.Null_TransparentIcon, lockStateCallback =>
                            {
                                callbackResults = lockStateCallback;
                            });
                        }

                        currentLockState = state;
                    }
                    else
                        callbackResults = initializationCallback;
                });

                callback?.Invoke(callbackResults);
            }

            public LockState GetLockState()
            {
                return currentLockState;
            }

            public bool IsLockable()
            {
                return isLockable;
            }

            #endregion
        }

        [Serializable]
        public struct UISelectionStateComponent
        {
            #region Components

            [Space(5)]
            [Header("Selection Visualization Components")]

            [Space(5)]
            public UIImageDisplayer selectionFrame;

            [Space(5)]
            public UIImageDisplayer selectionTint;

            [Space(5)]
            public RectTransform uiSelectionContentContainer;

            #endregion

            #region Main

            public UIImageDisplayer GetSelectionFrameWidget()
            {
                return selectionFrame;
            }

            public UIImageDisplayer GetSelectionTintWidget()
            {
                return selectionTint;
            }

            public RectTransform GetUISelectionContentContainer()
            {
                return uiSelectionContentContainer;
            }

            #endregion
        }

        [Serializable]
        public struct SelectionDataInfo
        {
            #region Components

            [Space(5)]
            [Header("Selection Info")]

            [Space(5)]
            public float selectionThreshHold;

            [Space(5)]
            public float selectionUIDimensionRatio;

            [Space(5)]
            public DraggableSelectionInfo selectionDragInfo;

            Vector2 uiSelectionScreenSpaceDimension;
            Vector3 uiSelectionWorldSpaceDimension;

            #endregion

            #region Main

            public void SetSelectionThreshHold(float threshhold) => selectionThreshHold = threshhold;

            public void SetSelectionUIDimensionRatio(float ratio) => selectionUIDimensionRatio = ratio;

            public DraggableSelectionInfo GetDraggableSelectionInfo()
            {
                return selectionDragInfo;
            }

            public Vector2 GetScreenSpaceSelectionDimension()
            {
                uiSelectionScreenSpaceDimension.x = selectionUIDimensionRatio;
                uiSelectionScreenSpaceDimension.y = selectionUIDimensionRatio;

                return uiSelectionScreenSpaceDimension;
            }

            public Vector3 GetWorldSpaceSelectionDimension()
            {
                uiSelectionWorldSpaceDimension.x = selectionUIDimensionRatio;
                uiSelectionWorldSpaceDimension.y = selectionUIDimensionRatio;
                uiSelectionWorldSpaceDimension.z = selectionUIDimensionRatio;

                return uiSelectionWorldSpaceDimension;
            }

            #endregion
        }

        [Serializable]
        public struct DraggableSelectionInfo
        {
            #region Components

            [Space(5)]
            [Header("Draggable UI Settings")]

            [Space(5)]
            public bool isDraggable;

            [Space(5)]
            public float selectionDragTriggerRadius;

            [Space(5)]
            public bool updateSelectionDimensionsOnDrag;

            #endregion

            #region Main

            public bool IsDraggable()
            {
                return isDraggable;
            }

            public float GetSelectionDragTriggerRadius()
            {
                return selectionDragTriggerRadius;
            }

            public bool UpdateSelectionDimensionsOnDragEnabled()
            {
                return updateSelectionDimensionsOnDrag;
            }

            #endregion
        }

        [Serializable]
        public struct UISelectionStateData
        {
            #region Components

            [Space(5)]
            [Header("Selectable UI Settings")]

            [Space(5)]
            public SelectionDataInfo selectionInfo;

            [Space(5)]
            public SelectableWidgetType selectableWidgetType;

            [Space(5)]
            public SelectableWidgetType selectableAssetType;

            [Space(5)]
            public UISelectionStateComponent selectionComponent;

            [Space(5)]
            public List<SelectionStateColorProperties> selectionStates;

            [Space(5)]
            public UIStateData uiStateInfoData;

            [Space(5)]
            public bool selectable;

            public bool Selectable { get { return selectable; } private set { selectable = value; } }

            #endregion

            #region Main

            public (bool hasSelectionFrame, bool hasSelectionState, bool hasTint) IsInitialized()
            {
                bool hasSelectionFrame = selectionComponent.selectionFrame.value != null;
                bool hasSelectionState = selectionStates.Count > 0;
                bool hasTint = selectionComponent.selectionTint.value != null;

                return (hasSelectionFrame, hasSelectionState, hasTint);
            }

            public void Show(InputUIState state, bool showTint = false, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (selectionComponent.selectionFrame.value != null)
                {
                    if (selectionComponent.selectionFrame.imageDisplayerType == UIImageDisplayerType.SelectionFrame)
                    {
                        uiStateInfoData = new UIStateData
                        {
                            state = state,
                            color = selectionStates.Find(selectionState => selectionState.selectionColorState == state).selectionColor
                        };

                        if (uiStateInfoData.color != null)
                            selectionComponent.selectionFrame.value.color = uiStateInfoData.color;

                        selectionComponent.selectionFrame.value.gameObject.SetActive(true);

                        if (IsInitialized().hasTint)
                        {
                            if(selectionComponent.selectionTint.imageDisplayerType == UIImageDisplayerType.TintComponent)
                                selectionComponent.selectionTint.value.gameObject.SetActive(showTint);
                        }

                        if (callback != null)
                        {
                            if (GetCurrentSelectionState().showSelection)
                            {
                                callbackResults.result = $"Show Selection Frame For [State] : {state} --> Show Tint Set To : {showTint}";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "Couldn't Showing Selection Frame For Some Reason - Asset possibly Disabled";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            if (!GetCurrentSelectionState().showSelection)
                            {
                                callbackResults.result = "Selection Frame Not Showing --> Possibility : UIImageDisplayerType Not Set To Selection Frame";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                    }
                    else
                    {
                        if (callback != null)
                        {
                            callbackResults.result = "UIImageDisplayerType Not Set To Selection Frame";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Show Selection Frame For [State] : {state} --> Possibility : UIImageDisplayerType Not Set To Selection Frame.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }
                else
                {
                    if (callback != null)
                    {
                        callbackResults.result = "Selection Frame's Value Is Missing / Null.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Show Selection Frame For [State] : {state} --> Possibility : Selection Frame's Value Is Missing / Null.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public (UIStateData uiStateData, bool showSelection, bool showTint) GetCurrentSelectionState()
            {
                bool showSelectionInfo = selectionComponent.selectionFrame.value.isActiveAndEnabled && selectionComponent.selectionFrame.value.gameObject.activeInHierarchy && selectionComponent.selectionFrame.value.gameObject.activeSelf;
                bool showTintInfo = selectionComponent.selectionTint.value.gameObject.activeInHierarchy && selectionComponent.selectionTint.value.gameObject.activeSelf;
                uiStateInfoData.selectionType = SelectableManager.Instance.GetFocusedSelectionTypeFromState(uiStateInfoData.state);

                return (uiStateInfoData, showSelectionInfo, showTintInfo);
            }

            public async void Hide(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (IsInitialized().hasSelectionFrame)
                {
                    if (selectionComponent.selectionFrame.imageDisplayerType == UIImageDisplayerType.SelectionFrame)
                    {
                        selectionComponent.selectionFrame.value.gameObject.SetActive(false);

                        if(selectionComponent.selectionTint.imageDisplayerType == UIImageDisplayerType.TintComponent)
                            selectionComponent.selectionTint.value.gameObject.SetActive(false);

                        bool hidden = selectionComponent.selectionFrame.value.gameObject.activeSelf == false && selectionComponent.selectionFrame.value.gameObject.activeInHierarchy == false;
                        await Helpers.GetWaitUntilAsync(hidden);

                        if (hidden)
                        {
                            callbackResults.result = $"Selection Frame : {selectionComponent.selectionFrame.name} Hidden.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Hide Selection Frame : {selectionComponent.selectionFrame.name} For Some Reason.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Hide : {selectionComponent.selectionFrame.name}. UI Image Displayer Type Is Not Set To Selection Frame.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Couldn't Hide : {selectionComponent.selectionFrame.name}. - Selection Frame Missing / Null / Not Yet Initialized.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public bool IsActive()
            {
                return selectionComponent.selectionFrame.value.gameObject.activeSelf;
            }

            public SelectableWidgetType GetSelectableWidgetType()
            {
                return selectableWidgetType;
            }

            public SelectableWidgetType GetSelectableAssetType()
            {
                return selectableAssetType;
            }

            #region Selectable Data

            public UIStateData GetUIStateData()
            {
                return uiStateInfoData;
            }

            public RectTransform GetUISelectionContentContainer()
            {
                return selectionComponent.GetUISelectionContentContainer();
            }

            #endregion

            #region Selection Info

            public Vector2 GetScreenSpaceSelectionDimension()
            {
                return selectionInfo.GetScreenSpaceSelectionDimension();
            }

            public Vector3 GetWorldSpaceSelectionDimension()
            {
                return selectionInfo.GetWorldSpaceSelectionDimension();
            }

            public float GetSelectionThreshHold()
            {
                return selectionInfo.selectionThreshHold;
            }

            public void SetSelectionThreshHold(float threshhold) => selectionInfo.SetSelectionThreshHold(threshhold);

            public void SetSelectionUIDimensionRatio(float ratio) => selectionInfo.SetSelectionUIDimensionRatio(ratio);
            
            #endregion

            #region Drag Info

            public bool IsDraggable()
            {
                return selectionInfo.GetDraggableSelectionInfo().IsDraggable();
            }

            public float GetSelectionDragTriggerRadius()
            {
                return selectionInfo.GetDraggableSelectionInfo().GetSelectionDragTriggerRadius();
            }

            public bool UpdateSelectionDimensionsOnDragEnabled()
            {
                return selectionInfo.GetDraggableSelectionInfo().UpdateSelectionDimensionsOnDragEnabled();
            }

            #endregion

            #endregion
        }

        [Serializable]
        public struct SelectionStateColorProperties
        {
            #region Components

            [Space(5)]
            [Header("UI Selection State Color Properties")]

            [Space(5)]
            public string name;

            [Space(5)]
            public Color selectionColor;

            [Space(5)]
            public InputUIState selectionColorState;

            #endregion
        }

        [Serializable]
        public struct WidgetPlaceHolderInfo
        {
            #region Components

            public Vector2 dimensions;

            public Vector2 anchoredPosition;
            public Vector3 worldPosition, localPosition;

            public Transform parent;

            public bool isActive;

            #endregion
        }

        [Serializable]
        public class WidgetPlaceHolder
        {
            #region Components

            public RectTransform value;

            [Space(5)]
            public Transform container;

            public bool isActive;

            WidgetPlaceHolderInfo info = new WidgetPlaceHolderInfo();

            #endregion

            #region Main

            public RectTransform GetPlaceHolder(UIScreenWidget screenWidget)
            {
                value.name = screenWidget.name;
                value.anchoredPosition = screenWidget.GetWidgetRect().anchoredPosition;
                value.sizeDelta = screenWidget.GetWidgetRect().sizeDelta;
                value.SetSiblingIndex(screenWidget.GetWidgetRect().GetSiblingIndex());

                return value;
            }

            public UIScreenWidget GetWidget()
            {
                return value.GetComponent<UIScreenWidget>();
            }

            public RectTransform GetContainer()
            {
                return value;
            }

            void SetIndex(int index)
            {
                if (value != null)
                    value.transform.SetSiblingIndex(index);
                else
                    Debug.LogWarning("--> Failed : Value Is Missing / Null.");
            }


            void SetPlaceHolderWidgetDimensions(Vector2 dimensions)
            {
                if (value != null)
                    value.sizeDelta = dimensions;
                else
                    Debug.LogWarning("--> SetPlaceHolderWidgetDimensions Failed : Value Is Missing / Null.");
            }

            public void ShowPlaceHolder(Transform container, Vector2 dimensions, int index, bool keepWorldPos = false)
            {
                //Debug.LogError($"===> On Show Placeholder - Setting Parent To : {container.name} - Index : {index}");

                if (container != null)
                {
                    if (value != null)
                    {
                        isActive = true;
                        //Debug.LogError($"==> Setting Parent To : {container.name} - Index : {index}");        
                        value.transform.SetParent(container, keepWorldPos);
                        SetPlaceHolderWidgetDimensions(dimensions);
                        SetIndex(index);
                        value.gameObject.SetActive(isActive);
                    }
                    else
                        Debug.LogWarning("--> SetContainer Failed : Value Is Missing / Null.");
                }
                else
                    Debug.LogWarning("--> SetContainer Failed : Container Is Missing / Null.");
            }

            public int GetWidgetIndex()
            {
                return value.GetSiblingIndex();
            }

            public void ResetPlaceHolder()
            {
                if (container != null)
                {
                    if (value != null)
                    {


                        isActive = false;
                        value.transform.SetParent(container, isActive);
                        value.gameObject.SetActive(isActive);
                    }
                    else
                        Debug.LogWarning("--> SetContainer Failed : Value Is Missing / Null.");
                }
                else
                    Debug.LogWarning("--> SetContainer Failed : Container Is Missing / Null.");
            }

            public void ResetPlaceHolder(ref RectTransform widgetRef)
            {
                if (container != null)
                {
                    if (value != null)
                    {
                        isActive = false;
                        widgetRef.SetSiblingIndex(value.GetSiblingIndex());
                        value.transform.SetParent(container, isActive);
                        value.gameObject.SetActive(isActive);
                    }
                    else
                        Debug.LogWarning("--> SetContainer Failed : Value Is Missing / Null.");
                }
                else
                    Debug.LogWarning("--> SetContainer Failed : Container Is Missing / Null.");
            }

            public bool IsActive()
            {
                return isActive;
            }

            public WidgetPlaceHolderInfo GetInfo()
            {
                if (value != null)
                {
                    info.dimensions = value.sizeDelta;

                    info.anchoredPosition = value.anchoredPosition;
                    info.worldPosition = value.position;
                    info.localPosition = value.localPosition;

                    info.isActive = IsActive();

                    if (container != null)
                        info.parent = container;
                    else
                        Debug.LogWarning("--> SetContainer Failed : Container Is Missing / Null.");
                }
                else
                    Debug.LogWarning("--> SetPlaceHolderWidgetDimensions Failed : Value Is Missing / Null.");

                return info;
            }

            #endregion
        }

        [Serializable]
        public class AppComponent : DataDebugger
        {
            #region Component

            #endregion
        }

        [Serializable]
        public class UISelectableGroup : DataDebugger
        {
            #region Components

            public Enum groupID;
            public List<UISelectable> selectables = new List<UISelectable>();

            #endregion

            #region Main

            public UISelectableGroup()
            {

            }

            public UISelectableGroup(Enum groupID, List<UISelectable> selectables)
            {
                this.groupID = groupID;
                this.selectables = selectables;
            }

            public Enum GetGroupID()
            {
                return groupID;
            }

            public List<UISelectable> GetSelectables()
            {
                return selectables;
            }

            public void OnRegisterSelectableToEventListener(UISelectable selectable, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (!selectables.Contains(selectable))
                {
                    selectable.Initialize();
                    selectable._OnSelectableActionEvent += Select;

                    selectables.Add(selectable);

                    callbackResults.result = $"Selectable : {selectable.name} Added.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Selectable ALready Exists";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void Select(UISelectable selectable)
            {
               if(selectables.Contains(selectable))
                {
                    if (selectable.GetSelectionStateInfo().GetInputUIState() != InputUIState.Disabled)
                    {
                        var selected = selectables.FindAll(x => x.GetInputUIState() != InputUIState.Normal);

                        if (selected != null && selected.Count > 0)
                        {
                            foreach (var item in selected)
                            {
                                if (item.GetInputUIState() != InputUIState.Disabled)
                                {
                                    if (item.inputType == InputType.DropDown)
                                        item.Collapse();
                                    else
                                        item.Deselect();
                                }
                            }
                        }

                        if (selectable.inputType == InputType.DropDown)
                            selectable.Expand();
                        else
                            selectable.Select();
                    }
                }
            }

            public void Clear(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(selectables != null && selectables.Count > 0)
                {
                    foreach (var selectable in selectables)
                        selectable.Deselect();

                    bool deselected = true;

                    foreach (var selectable in selectables)
                    {
                        if (selectable.GetInputUIState() == InputUIState.Selected)
                        {
                            deselected = false;
                            break;
                        }
                    }

                    if(deselected)
                    {
                        callbackResults.result = $"Deselected All Selections For : {groupID} Group.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Clear Selections For : {groupID} Group - PleaseCheck Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"There Are No Selectables To Clear Selections For : {groupID} Group";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class ProjectStructureSelectionSystem : AppComponent
        {
            #region Components

            [Space(5)]
            public List<FocusedSelectionStateInfo> selectionStates = new List<FocusedSelectionStateInfo>();

            [Space(5)]
            public FocusedSelectionData focusedSelectionData = new FocusedSelectionData();

            //[HideInInspector]
            [Space(5)]
            public FocusedSelectionData cachedSelectionData = new FocusedSelectionData();

            public Dictionary<Enum, UISelectableGroup> selectableUIGroups = new Dictionary<Enum, UISelectableGroup>();

            public Action<SceneDataPackets> OnSelection { get; set; }
            public Action OnDeselection { get; set; }

            #endregion

            #region Event Delegates Callbacks

            #region Delegates

            private delegate void SelectionEvent();

            #endregion

            #region Callbacks

            #endregion

            #endregion

            #region Main

            public void Select(UIScreenWidget selectable, SceneDataPackets dataPackets, bool isInitialSelection = false)
            {
                if(isInitialSelection)
                {
                    Select(selectable.name, FocusedSelectionType.SelectedItem, selectionCallback => 
                    {
                        if (selectionCallback.Success())
                        {
                            OnSelection?.Invoke(dataPackets);

                            ActionEvents.OnWidgetSelectionEvent();
                        }
                    });
                }
                else
                {
                    if (GetCurrentSelectionType() != FocusedSelectionType.SelectedItem)
                        OnClearFocusedSelectionsInfo();

                    HasFocusedSelectionInfo(selectable.name, hasSelectionCallback =>
                    {
                        if (!Helpers.IsSuccessCode(hasSelectionCallback.resultCode))
                        {
                            OnAddSelection(selectable.name, FocusedSelectionType.SelectedItem, addedSelectionCallback =>
                            {
                                if (Helpers.IsSuccessCode(addedSelectionCallback.resultCode))
                                    OnSelection?.Invoke(dataPackets);
                                else
                                    Debug.LogError(addedSelectionCallback.result);
                            });
                        }
                        else
                            Debug.LogError(hasSelectionCallback.result);
                    });
                }
            }

            public void Select(string name, FocusedSelectionType selectionType)
            {
                Select(name, selectionType, selectionCallback =>
                {

                });
            }

            public void Deselect(UIScreenWidget deselectedWidget, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                OnRemoveSelection(deselectedWidget.name, FocusedSelectionType.SelectedItem, deselectionCallback => 
                {
                    Debug.LogError($"================> Removed : {deselectionCallback.resultCode} So Deselect Widget - Results : {deselectionCallback.result}...............");

                    if (Helpers.IsSuccessCode(deselectionCallback.resultCode))
                        OnDeselection?.Invoke();
                    else
                        callbackResults = deselectionCallback;
                });

                callback?.Invoke(callbackResults);
            }

            public void Deselect(string selectionName, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                OnRemoveSelection(selectionName, FocusedSelectionType.SelectedItem, deselectionCallback =>
                {
                    Debug.LogError($"================> Removed Is : {deselectionCallback.resultCode} To Deselect Widget - Results : {deselectionCallback.result}...............");

                    if (Helpers.IsSuccessCode(deselectionCallback.resultCode))
                        OnDeselection?.Invoke();
                    else
                        callbackResults = deselectionCallback;
                });

                callback?.Invoke(callbackResults);
            }

            public void DeselectAll()
            {
                DeselectWidgets(GetFocusedSelectionInfoList(), deselectionCallback => 
                {
                    if (Helpers.IsSuccessCode(deselectionCallback.resultCode))
                    {
                        OnDeselection?.Invoke();
                    }
                    else
                        Debug.LogError(deselectionCallback.result);
                });
            }

            public void AddSelectables(List<UIScreenWidget> selectables)
            {

                Debug.LogError($"=====> Added {selectables.Count} Items On Refresh");

                if (selectables != null && selectables.Count > 0)
                {
                    OnClearFocusedSelectionsInfo();

                    //if (cachedSelectables.Count > 0)
                    //    for (int selectable = 0; selectable < selectables.Count; selectable++)
                    //        if (cachedSelectables.Contains(selectables[selectable].name))
                    //            if (!currentSelections.Contains(selectables[selectable]))
                    //                currentSelections.Add(selectables[selectable]);

                    OnSelected();
                }
                else
                    Debug.LogWarning("--> AddSelectables Failed : Selectables List Is Null.");
            }

            public List<UIScreenWidget> GetCurrentSelections()
            {
                List<UIScreenWidget> widgetsList = new List<UIScreenWidget>();

                OnGetSelectedWidgets(selectionCallback => 
                {
                    if (Helpers.IsSuccessCode(selectionCallback.resultCode))
                        widgetsList = selectionCallback.data;
                    else
                        Debug.LogError(selectionCallback.result);
                });

                return widgetsList;
            }

            void OnSelected()
            {
                var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                if (widgetsContainer != null)
                {
                    widgetsContainer.OnWidgetSelectionState(GetFocusedSelectionInfoList(), FocusedSelectionType.SelectedItem, selectionCallback => 
                    {
                        if(!Helpers.IsSuccessCode(selectionCallback.resultCode))
                            Debug.LogError(selectionCallback.result);
                    });
                }
                else
                    Debug.LogError("On Selected Failed. Check Here Please.");

                //if (currentSelections.Count > 0)
                //    foreach (var selectable in currentSelections)
                //        selectable.OnSelect();
            }

            #region Selection Data

            public void CacheSelection(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                cachedSelectionData = focusedSelectionData;

                if(cachedSelectionData.selections.Count > 0)
                {
                    callbackResults.result = $"{cachedSelectionData.selections.Count} Selections Cached.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Couldn't Cache : {focusedSelectionData.selections.Count} Selections Of Type : {focusedSelectionData.selectionType}";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ClearSelectionCache(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                cachedSelectionData.Clear();

                if(cachedSelectionData.selections.Count == 0)
                {
                    callbackResults.result = $"Cache Cleared";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Cache Couldn't Clear - : {cachedSelectionData.selections.Count} Selections Found";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetCachedSelectionInfo(Action<CallbackDataList<FocusedSelectionInfo<SceneDataPackets>>> callback)
            {
                CallbackDataList<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackDataList<FocusedSelectionInfo<SceneDataPackets>>();

                if(HasCachedSelectionInfo())
                {
                    callbackResults.result = "Cached Selection Info Data Found.";
                    callbackResults.data = cachedSelectionData.selections;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "There Are No Cached Selection Info Data Found.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void GetCachedSelectionInfoNameList(Action<CallbackDataList<string>> callback)
            {
                CallbackDataList<string> callbackResults = new CallbackDataList<string>();

                if (HasCachedSelectionInfo())
                {
                    List<string> cachedSelectionInfoNameList = new List<string>();

                    foreach (var selection in cachedSelectionData.selections)
                        if (!cachedSelectionInfoNameList.Contains(selection.name))
                            cachedSelectionInfoNameList.Add(selection.name);

                    if (cachedSelectionInfoNameList.Count > 0)
                    {
                        callbackResults.result = "Cached Selection Info Data Found.";
                        callbackResults.data = cachedSelectionInfoNameList;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "There Are No Valid Cached Selection Info Data Loaded From Cache List - Something Is Really Wrong.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Cached Selection Info Data Found.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public bool HasCachedSelectionInfo()
            {
                return cachedSelectionData.isActiveSelection && cachedSelectionData.selections.Count > 0;
            }

            public void SelectWidgets(List<FocusedSelectionInfo<SceneDataPackets>> selections, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(selections != null && selections.Count > 0)
                {
                    var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                    if(widgetsContainer != null)
                        widgetsContainer.OnWidgetSelectionState(selections, selectionCallback => { callbackResults = selectionCallback; });
                    else
                    {
                        callbackResults.result = "Widgets Container Missing / Not Found";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "No Selections Found";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void DeselectWidgets(List<FocusedSelectionInfo<SceneDataPackets>> selections, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (selections != null && selections.Count > 0)
                {
                    var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                    if (widgetsContainer != null)
                    {
                        widgetsContainer.OnWidgetSelectionState(selections, FocusedSelectionType.Default, selectionCallback => 
                        {
                            if (Helpers.IsSuccessCode(selectionCallback.resultCode))
                                OnClearFocusedSelectionsInfo();

                            callbackResults = selectionCallback; 
                        });
                    }
                    else
                    {
                        callbackResults.result = "Widgets Container Missing / Not Found";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "No Selections Found";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void OnGetSelectedWidgets(Action<CallbackDataList<UIScreenWidget>> callback)
            {
                CallbackDataList<UIScreenWidget> callbackResults = new CallbackDataList<UIScreenWidget>();

                if (HasActiveSelections())
                {
                    List<UIScreenWidget> selectionList = new List<UIScreenWidget>();

                    foreach (var widget in focusedSelectionData?.selections)
                    {
                        UIScreenWidget screenWidget = AppDatabaseManager.Instance.GetRefreshData().screenContainer.GetWidgetNamed(widget.name);

                        if (screenWidget != null)
                        {
                            if (!selectionList.Contains(screenWidget))
                                selectionList.Add(screenWidget);
                            else
                            {
                                callbackResults.result = $"Screen Widget Named : {widget.name} Already Added To List.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Screen Widget Named : {widget.name} Not Found.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;

                            break;
                        }
                    }

                    if (selectionList.Count > 0)
                    {
                        callbackResults.result = $"{selectionList.Count} Selections Found.";
                        callbackResults.data = selectionList;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Selection Widgets Not Found.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Selections Found.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void Select(string selectionName, FocusedSelectionType selectionType, Action<CallbackData<FocusedSelectionInfo<SceneDataPackets>>> callback = null)
            {
                CallbackData<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackData<FocusedSelectionInfo<SceneDataPackets>>();

                FocusedSelectionInfo<SceneDataPackets> selectionInfo = new FocusedSelectionInfo<SceneDataPackets>
                {
                    name = selectionName,
                    selectionInfoType = selectionType
                };

                if (HasActiveSelections())
                {
                    OnClearFocusedSelectionsInfo(selectionInfoCleared =>
                    {
                        if (Helpers.IsSuccessCode(selectionInfoCleared.resultCode))
                        {
                            OnSetFocusedWidgetSelectionInfo(selectionInfo, true, onSelectionCallback =>
                            {
                                if (Helpers.IsSuccessCode(onSelectionCallback.resultCode))
                                {
                                    callbackResults.result = $"Set Highlighted Folder To Widget Named : {selectionName} Success.";
                                    callbackResults.data = selectionInfo;
                                    callbackResults.resultCode = Helpers.SuccessCode;

                                    ActionEvents.OnWidgetSelectionEvent();
                                }
                                else
                                    Debug.LogError(onSelectionCallback.result);
                            });
                        }
                        else
                        {
                            callbackResults.result = selectionInfoCleared.result;
                            callbackResults.resultCode = Helpers.ErrorCode;
                            callbackResults.data = default;
                        }
                    });
                }
                else
                {
                    OnSetFocusedWidgetSelectionInfo(selectionInfo, true, onSelectionCallback =>
                    {
                        if (Helpers.IsSuccessCode(onSelectionCallback.resultCode))
                        {
                            callbackResults.result = $"Set Highlighted Folder To Widget Named : {selectionName} Success.";
                            callbackResults.data = selectionInfo;
                            callbackResults.resultCode = Helpers.SuccessCode;

                            ActionEvents.OnWidgetSelectionEvent(selectionInfo);
                        }
                        else
                            Debug.LogError(onSelectionCallback.result);
                    });
                }

                callback?.Invoke(callbackResults);
            }

            public void OnAddSelection(string selectionName, FocusedSelectionType selectionType, Action<CallbackData<FocusedSelectionInfo<SceneDataPackets>>> callback = null)
            {
                CallbackData<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackData<FocusedSelectionInfo<SceneDataPackets>>();

                if (HasActiveSelections())
                {
                    HasFocusedSelectionInfo(selectionName, selectionCheckCallback =>
                    {
                        if (!Helpers.IsSuccessCode(selectionCheckCallback.resultCode))
                        {
                            FocusedSelectionInfo<SceneDataPackets> selectionInfo = new FocusedSelectionInfo<SceneDataPackets>
                            {
                                name = selectionName,
                                selectionInfoType = selectionType
                            };

                            OnAddFocusedWidgetSelectionInfo(selectionInfo, true, selectionAddedCallback =>
                            {
                                if (selectionAddedCallback.Success())
                                {
                                    SelectWidgets(selectionAddedCallback.data, selectionCallback =>
                                    {
                                        if (selectionCallback.Success())
                                        {
                                            callbackResults.result = selectionCallback.result;
                                            callbackResults.resultCode = selectionCallback.resultCode;

                                            ActionEvents.OnWidgetSelectionAdded();
                                        }
                                        else
                                            Debug.LogError(selectionCallback.result);
                                    });
                                }
                            });
                        }
                        else
                        {
                            callbackResults.result = selectionCheckCallback.result;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    Select(selectionName, selectionType, selectionCallback =>
                    {
                        callbackResults = selectionCallback;
                    });
                }

                callback?.Invoke(callbackResults);
            }

            public void OnRemoveSelection(string selectionName, FocusedSelectionType selectionType = FocusedSelectionType.SelectedItem, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (HasActiveSelections())
                {
                    HasFocusedSelectionInfo(selectionName, selectionCallback =>
                    {
                        if (selectionCallback.Success())
                        {
                            GetSelectionInfo(selectionName, selectionFoundCallback => 
                            {
                                if (selectionFoundCallback.Success())
                                {
                                    OnRemoveFocusedWidgetSelectionInfo(selectionFoundCallback.data, selectionRemovedCallback => 
                                    {
                                        if (selectionRemovedCallback.Success())
                                        {
                                            var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                                            if(widgetsContainer != null)
                                            {
                                                var selectionInfo = selectionFoundCallback.data;
                                                selectionInfo.selectionInfoType = FocusedSelectionType.Default;

                                                widgetsContainer.OnWidgetSelectionState(selectionInfo, deselectionCallback => 
                                                {
                                                
                                                
                                                });
                                            }

                                            ActionEvents.OnWidgetSelectionRemoved();
                                        }

                                        callbackResults = selectionRemovedCallback;
                                    });
                                }
                                else
                                {
                                    callbackResults.result = selectionFoundCallback.result;
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            });
                        }
                        else
                        {
                            callbackResults.result = selectionCallback.result;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    callbackResults.result = "There Are Currently No Selectables To Deslect.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetSelectionInfo(string selectionName, Action<CallbackData<FocusedSelectionInfo<SceneDataPackets>>> callback)
            {
                CallbackData<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackData<FocusedSelectionInfo<SceneDataPackets>>();

                FocusedSelectionInfo<SceneDataPackets> selectionInfo = focusedSelectionData.selections.Find(selection => selection.name == selectionName);

                if(selectionInfo != null)
                {
                    callbackResults.result = $"Selection Info For : {selectionName} Found";
                    callbackResults.data = selectionInfo;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Selection Info For : {selectionName} Not Found";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public List<FocusedSelectionInfo<SceneDataPackets>> GetFocusedSelectionInfoList()
            {
                return focusedSelectionData.selections;
            }

            public void Select(List<string> selectionNames, FocusedSelectionType selectionType, Action<CallbackData<FocusedSelectionInfo<SceneDataPackets>>> callback = null)
            {
                CallbackData<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackData<FocusedSelectionInfo<SceneDataPackets>>();

                List<FocusedSelectionInfo<SceneDataPackets>> selectionInfoList = new List<FocusedSelectionInfo<SceneDataPackets>>();

                if (selectionNames.Count > 0)
                {
                    foreach (var name in selectionNames)
                    {
                        FocusedSelectionInfo<SceneDataPackets> selectionInfo = new FocusedSelectionInfo<SceneDataPackets>
                        {
                            name = name,
                            selectionInfoType = selectionType
                        };

                        selectionInfoList.Add(selectionInfo);
                    }

                    if (selectionInfoList.Count > 0)
                    {
                        OnSetFocusedWidgetSelectionInfo(selectionInfoList, selectionType, true, selectionCallback =>
                        {
                            callbackResults.result = selectionCallback.result;
                            callbackResults.resultCode = selectionCallback.resultCode;
                        });
                    }
                    else
                    {
                        callbackResults.result = "There Are No Selection Info Created - Data Missing.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Selection Widgets Found";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void HasFocusedSelectionInfo(string selectionName, Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                bool hasSelection = false;

                if (HasActiveSelections())
                {
                    foreach (var selection in focusedSelectionData?.selections)
                    {
                        if (selection.name.Equals(selectionName))
                        {
                            hasSelection = true;
                            break;
                        }
                    }

                    callbackResults.result = (hasSelection) ? $"Selection : {selectionName} Exists." : $"Selection : {selectionName} Doesn't Exists.";
                    callbackResults.resultCode = (hasSelection)? Helpers.SuccessCode : Helpers.ErrorCode;
                }
                else
                {
                    callbackResults.result = "There Are No Active Selections Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public bool HasActiveSelections()
            {
                bool hasSelection = false;

                if (focusedSelectionData != null && focusedSelectionData?.selections != null && focusedSelectionData?.selections?.Count >= 1 && focusedSelectionData.isActiveSelection)
                    hasSelection = true;

                return hasSelection;
            }

            public FocusedSelectionType GetCurrentSelectionType()
            {
                FocusedSelectionType selectionType = FocusedSelectionType.Default;

                if(HasActiveSelections())
                    selectionType = focusedSelectionData.selectionType;

                return selectionType;
            }

            public int GetFocusedSelectionDataCount()
            {
                return (focusedSelectionData.selections == null) ? 0 : focusedSelectionData.selections.Count;
            }

            public void GetFocusedSelectionData(Action<CallbackData<FocusedSelectionData>> callback)
            {
                CallbackData<FocusedSelectionData> callbackResults = new CallbackData<FocusedSelectionData>();

                if (HasActiveSelections())
                {
                    callbackResults.result = $"Found {GetFocusedSelectionDataCount()} Focused Asset(s)";
                    callbackResults.data = focusedSelectionData;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "There Is No Focused Widget Info Found.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void OnClearFocusedSelectionsInfo(Action<Callback> callback = null)
            {
                try
                {
                    Callback callbackResults = new Callback();

                    if (HasActiveSelections())
                    {
                        var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                        if (widgetsContainer.GetAssetsLoaded())
                        {
                            bool cleared = false;

                            if (widgetsContainer != null)
                            {
                                foreach (var selection in focusedSelectionData.selections)
                                {
                                    widgetsContainer.GetWidgetNamed(selection.name, widgetFoundCallback => 
                                    {
                                        if(widgetFoundCallback.Success())
                                        {
                                            cleared = true;
                                            widgetFoundCallback.data.OnReset(cleared);
                                        }
                                        else
                                        {
                                            callbackResults.result = $"Widget Named : {selection.name} Not Found";
                                            callbackResults.resultCode = Helpers.ErrorCode;

                                            cleared = false;
                                        }
                                    });
                                }
                            }

                            if (cleared)
                            {
                                focusedSelectionData.Clear();

                                if (!HasActiveSelections())
                                {
                                    callbackResults.result = "Focused Selection Cleared Successfully.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = "Focused Selection Failed To Clear For Some Reason.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Couldn't Clear Content.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                    }
                    else
                    {
                        focusedSelectionData.Clear();

                        if (!HasActiveSelections())
                        {
                            callbackResults.result = "Focused Selection Cleared Successfully.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Focused Selection Failed To Clear For Some Reason.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                catch(Exception exception)
                {
                    Debug.LogError($"==> [OnClearFocusedSelectionsInfo] Exception Found : {exception.Message}");
                    throw exception;
                }
            }

            public void OnClearFocusedSelectionsInfo(bool resetWidgets, Action<Callback> callback = null)
            {
                try
                {
                    Callback callbackResults = new Callback();

                    if(resetWidgets)
                    {
                        if (focusedSelectionData.selections.Count > 0)
                        {
                            var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                            bool cleared = false;

                            if (widgetsContainer != null)
                            {
                                foreach (var selection in focusedSelectionData.selections)
                                {
                                    var widget = widgetsContainer.GetWidgetNamed(selection.name);

                                    if (widget != null)
                                    {
                                        widget.OnDeselect();
                                        cleared = true;
                                    }
                                    else
                                    {
                                        Debug.LogError($"Widget Named : {selection.name} Not Found");

                                        callbackResults.result = $"Widget Named : {selection.name} Not Found";
                                        callbackResults.resultCode = Helpers.ErrorCode;

                                        cleared = false;

                                        break;
                                    }
                                }
                            }

                            if (cleared)
                            {
                                focusedSelectionData.Clear();

                                if (!HasActiveSelections())
                                {
                                    callbackResults.result = "Focused Selection Cleared Successfully.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = "Focused Selection Failed To Clear For Some Reason.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Couldn't Clear Content.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            focusedSelectionData.Clear();

                            if (!HasActiveSelections())
                            {
                                callbackResults.result = "Focused Selection Cleared Successfully.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "Focused Selection Failed To Clear For Some Reason.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                    }
                    else
                    {
                        callbackResults.result = "No Widgets Found To Clear.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }

                    callback?.Invoke(callbackResults);
                }
                catch (Exception exception)
                {
                    Debug.LogError($"==> [OnClearFocusedSelectionsInfo] Exception Found : {exception.Message}");
                    throw exception;
                }
            }

            public void OnSetFocusedWidgetSelectionInfo(FocusedSelectionInfo<SceneDataPackets> newSelectionInfo, bool isActiveSelection = true, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (HasActiveSelections())
                {
                    OnClearFocusedSelectionsInfo(cleared =>
                    {
                        if (Helpers.IsSuccessCode(cleared.resultCode))
                        {
                            focusedSelectionData.selections = new List<FocusedSelectionInfo<SceneDataPackets>>();
                            focusedSelectionData.selections.Add(newSelectionInfo);

                            focusedSelectionData.selectionType = newSelectionInfo.selectionInfoType;
                            focusedSelectionData.isActiveSelection = isActiveSelection;

                            if (focusedSelectionData.selections.Count > 0)
                            {
                                callbackResults.result = "New Focused Selection Info List Set.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "New Focused Selection Info List Not Set - Check Here.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Clear Focused Selection Data.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    focusedSelectionData.selections = new List<FocusedSelectionInfo<SceneDataPackets>>();
                    focusedSelectionData.selections.Add(newSelectionInfo);
                    focusedSelectionData.selectionType = newSelectionInfo.selectionInfoType;
                    focusedSelectionData.isActiveSelection = isActiveSelection;

                    if (focusedSelectionData.selections.Count > 0)
                    {
                        callbackResults.result = "New Focused Selection Info List Set.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "New Focused Selection Info List Not Set - Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public void OnSetFocusedWidgetSelectionInfo(List<FocusedSelectionInfo<SceneDataPackets>> newSelectionInfoList, FocusedSelectionType selectionType, bool isActiveSelection = true, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (HasActiveSelections())
                {
                    OnClearFocusedSelectionsInfo(cleared =>
                    {
                        if (Helpers.IsSuccessCode(cleared.resultCode))
                        {
                            focusedSelectionData.selections = newSelectionInfoList;
                            focusedSelectionData.selectionType = selectionType;
                            focusedSelectionData.isActiveSelection = isActiveSelection;

                            if (focusedSelectionData.selections.Count > 0)
                            {
                                callbackResults.result = "New Focused Selection Info List Set.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "New Focused Selection Info List Not Set - Check Here.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Clear Focused Selection Data.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    focusedSelectionData.selections = newSelectionInfoList;
                    focusedSelectionData.selectionType = selectionType;
                    focusedSelectionData.isActiveSelection = isActiveSelection;

                    if (focusedSelectionData.selections.Count > 0)
                    {
                        callbackResults.result = "New Focused Selection Info List Set.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "New Focused Selection Info List Not Set - Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public void OnAddFocusedWidgetSelectionInfo(FocusedSelectionInfo<SceneDataPackets> newSelectionInfo, bool isActiveSelection = true, Action<CallbackDataList<FocusedSelectionInfo<SceneDataPackets>>> callback = null)
            {
                CallbackDataList<FocusedSelectionInfo<SceneDataPackets>> callbackResults = new CallbackDataList<FocusedSelectionInfo<SceneDataPackets>>();

                focusedSelectionData.selections.Add(newSelectionInfo);
                focusedSelectionData.selectionType = newSelectionInfo.selectionInfoType;
                focusedSelectionData.isActiveSelection = isActiveSelection;

                if (focusedSelectionData.selections.Count > 0)
                {
                    callbackResults.result = "New Focused Selection Info List Set.";
                    callbackResults.data = focusedSelectionData.selections;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "New Focused Selection Info List Not Set - Check Here.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void OnRemoveFocusedWidgetSelectionInfo(FocusedSelectionInfo<SceneDataPackets> selectionToRemove, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                focusedSelectionData.selections.Remove(selectionToRemove);

                HasFocusedSelectionInfo(selectionToRemove.name, selectionCallback =>
                {
                    if (!Helpers.IsSuccessCode(selectionCallback.resultCode))
                    {
                        callbackResults.result = $"{selectionToRemove.name} Removed Successfully.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"{selectionToRemove.name} Couldn't Be Removed.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public void SetSelectionInfoState(List<UIScreenWidget> selectionList, FocusedSelectionType selectionType, Action<CallbackData<UIScreenWidget>> callback = null)
            {
                CallbackData<UIScreenWidget> callbackResults = new CallbackData<UIScreenWidget>();

                if (selectionList != null && selectionList.Count > 0)
                {
                    GetFocusedSelectionState(selectionType, selectionStateCallback =>
                    {
                        if (Helpers.IsSuccessCode(selectionStateCallback.resultCode))
                        {
                            foreach (var selection in selectionList)
                                selection.OnSelectionFrameState(selectionStateCallback.data);

                            callbackResults.result = $"Selected : {selectionList.Count} Widgets To State : {selectionStateCallback.data.state} - From Type : {selectionStateCallback.data.selectionInfoType} Nou.";
                            callbackResults.data = selectionList.FindLast(x => x.GetActive());
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = selectionStateCallback.result;
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    callbackResults.result = "Selection Info List Is Null / Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public FocusedSelectionType GetFocusedSelectionTypeFromState(InputUIState state)
            {
                var selectionData = selectionStates.Find(selection => selection.state == state);

                if (selectionData != null)
                {
                    return selectionData.selectionInfoType;
                }

                return FocusedSelectionType.Default;
            }

            public void GetFocusedSelectionState(FocusedSelectionType selectionType, Action<CallbackData<FocusedSelectionStateInfo>> callback)
            {
                CallbackData<FocusedSelectionStateInfo> callbackResults = new CallbackData<FocusedSelectionStateInfo>();

                var selectionData = selectionStates.Find(selection => selection.selectionInfoType == selectionType);

                if (selectionData != null)
                {
                    callbackResults.result = $"Found Focused Selection Info Data Of Type : {selectionType}";
                    callbackResults.data = selectionData;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Couldn't Find Focused Selection Info Data Of Type : {selectionType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public List<FocusedSelectionStateInfo> GetSelectionStates()
            {
                return selectionStates;
            }

            public void OnRegisterInputToSelectableEventListener(Enum groupID, UISelectable selectable, Action<CallbackData<UISelectableGroup>> callback)
            {
                CallbackData<UISelectableGroup> callbackResults = new CallbackData<UISelectableGroup>();

                if (selectable != null)
                {
                    if(!selectableUIGroups.ContainsKey(groupID))
                    {
                        UISelectableGroup group = new UISelectableGroup{ groupID = groupID };

                        group.OnRegisterSelectableToEventListener(selectable, selectableAddedCallbackResults => 
                        {
                            callbackResults.result = selectableAddedCallbackResults.result;
                            callbackResults.resultCode = selectableAddedCallbackResults.resultCode;

                            if (callbackResults.Success())
                            {
                                selectableUIGroups.Add(groupID, group);
                                callbackResults.data = group;
                            }
                        });
                    }
                    else
                    {
                        if (selectableUIGroups.TryGetValue(groupID, out UISelectableGroup group))
                        { 
                            if (!group.selectables.Contains(selectable))
                            {
                                group.OnRegisterSelectableToEventListener(selectable, selectableAddedCallbackResults => 
                                {
                                    callbackResults.result = selectableAddedCallbackResults.result;
                                    callbackResults.resultCode = selectableAddedCallbackResults.resultCode;

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.result = $"Register : {selectable.name} - Of Type {selectable.inputType} - State : {selectable.GetInputUIState()} To Group : {groupID}";
                                        callbackResults.data = group;
                                    }
                                });
                            }
                            else
                            {
                                callbackResults.result = $"Selectable : {selectable.name} Already Exists In UI Group ID : {groupID}.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Get Selectable UI Group ID : {groupID}.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "Selectable Component Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void OnSelectUIInput(Enum groupID, UISelectable selectable, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(selectable != null)
                {
                    if (selectableUIGroups.TryGetValue(groupID, out UISelectableGroup group))
                    {
                        group.Select(selectable);

                        callbackResults.result = $"Selected Input : {selectable.name} From : {groupID} Group.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"No Selectable Group Found - Failed To Select : {selectable.name} From : {groupID} Group";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Selectable Is Null / Not Found. Failed To Select UI Input";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void OnClearInputSelection(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(selectableUIGroups != null && selectableUIGroups.Count > 0)
                {
                    foreach (var group in selectableUIGroups)
                        group.Value.Clear();
                }
                else
                {
                    callbackResults.result = $"No Selectable UI Groups Found To Clear.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void OnClearInputSelection(Enum groupID, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (selectableUIGroups.TryGetValue(groupID, out UISelectableGroup group))
                {
                    group.Clear(clearCallbackResults =>
                    {
                        callbackResults = clearCallbackResults;
                    });
                }
                else
                {
                    callbackResults.result = $"No Selectable Found To Clear For : {groupID} Group";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SelectScreenUI(IUIComponent<SceneDataPackets> selectable, Action<CallbackData<IUIComponent<SceneDataPackets>>> callback)
            {
                CallbackData<IUIComponent<SceneDataPackets>> callbackResults = new CallbackData<IUIComponent<SceneDataPackets>>();

                if(selectableUIGroups != null && selectableUIGroups.Count > 0)
                {
                    bool selected = false;

                    //foreach (var selectableUI in selectableScreenUIList)
                    //{
                    //    if (selectableUI == selectable)
                    //    {
                    //        selectableUI.Select();
                    //        selected = true;
                    //    }
                    //    else
                    //        selectableUI.Deselect();
                    //}

                    if (selected)
                    {
                        callbackResults.result = $"Selected Screen UI.";
                        callbackResults.data = selectable;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Couldn't Find Selectable UI.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Selectable Screen List Data.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            #endregion

            #endregion
        }

        #region Audio

        [Serializable]
        public class AudioPlayerData
        {
            #region Components

            public string name;

            [Space(5)]
            public AudioClip value;

            [Space(5)]
            public AudioType audioType;

            [HideInInspector]
            public AudioSource audioPlayer;

            #endregion

            #region Main

            public void Initialize(AudioSource audioPlayer) => this.audioPlayer = audioPlayer;

            public void PlayAudio(ulong delay = 0)
            {
                if (audioPlayer != null)
                {
                    audioPlayer.clip = value;
                    audioPlayer.Play(delay);
                }
                else
                    Debug.LogWarning("--> Failed : Audio Player Component Not Found / Missing.");
            }

            public void StopAudio()
            {
                if (audioPlayer != null)
                {
                    audioPlayer.clip = null;
                    audioPlayer.Stop();
                }
                else
                    Debug.LogWarning("--> Failed : Audio Player Component Not Found / Missing.");
            }

            #endregion
        }

        #endregion

        [Serializable]
        public struct AssetImportField
        {
            public string name;

            [Space(5)]
            public GameObject fieldAssignedIcon;

            [Space(5)]
            public TMP_Text fieldText;

            [Space(5)]
            public AssetFieldType assetType;

            [Space(5)]
            public string placeHolderMessage;
        }

        [Serializable]
        public struct RuntimeValue<T>
        {
            public string name;

            [Space(5)]
            public T value;

            [Space(5)]
            public BuildType runtimeType;

            [Space(5)]
            public RuntimeExecution valueType;
        }

        [Serializable]
        public class AssetInfoField
        {
            public string name;
            public int? value;

            [Space(5)]
            public InfoDisplayerFieldType type;
        }

        [Serializable]
        public class InputSliderValueContent<T>
        {
            #region Components

            public string name;

            [Space(5)]
            public UISlider<T> sliderValue;

            [Space(5)]
            public UIInputField<T> inputValue;

            #endregion

            #region Main

            void Initialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (sliderValue.value != null && inputValue.value != null)
                {
                    callbackResults.result = "";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetValue(string value)
            {

            }

            #endregion
        }

        #region Messaging System

        [Serializable]
        public class LoadingSequenceMessage : AppComponent
        {
            #region Components

            public string message;

            [Space(5)]
            public LoadingSequenceMessageType sequenceState;

            #endregion

            #region Main

            public string GetMessage() => message;
            public LoadingSequenceMessageType GetSequenceMessageType() => sequenceState;

            #endregion
        }

        [Serializable]
        public class MessageFormat
        {
            #region Components

            [Space(5)]
            public string header;

            [Space(5)]
            public List<LoadingSequenceMessage> messageList;

            [Space(5)]
            public string footer;

            #endregion

            #region Main

            public MessageFormat()
            {
            }

            public MessageFormat(string header, List<LoadingSequenceMessage> messageList, string footer = null)
            {
                this.header = header;
                this.messageList = messageList;
                this.footer = footer;
            }

            public string GetHeader()
            {
                return header;
            }

            public void GetMessage(LoadingSequenceMessageType messageType, Action<CallbackData<LoadingSequenceMessage>> callback)
            {
                CallbackData<LoadingSequenceMessage> callbackResults = new CallbackData<LoadingSequenceMessage>(GetMessageList());

                if(callbackResults.Success())
                {
                    var message = GetMessageList().data.Find(msg => msg.GetSequenceMessageType() == messageType);

                    if(message != null)
                    {
                        callbackResults.result = $"Found Message Of Type : {messageType}.";
                        callbackResults.data = message;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Loading Sequence message Of Type : {messageType} In Messages List With : {GetMessageList().data.Count} Message(s).";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback.Invoke(callbackResults);
            }

            public CallbackData<LoadingSequenceMessage> GetMessage(LoadingSequenceMessageType messageType)
            {
                CallbackData<LoadingSequenceMessage> callbackResults = new CallbackData<LoadingSequenceMessage>(GetMessageList());

                if (callbackResults.Success())
                {
                    var message = GetMessageList().data.Find(msg => msg.GetSequenceMessageType() == messageType);

                    if (message != null)
                    {
                        callbackResults.result = $"Found Message Of Type : {messageType}.";
                        callbackResults.data = message;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Loading Sequence message Of Type : {messageType} In Messages List With : {GetMessageList().data.Count} Message(s).";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public void GetMessageList(Action<CallbackDataList<LoadingSequenceMessage>> callback)
            {
                CallbackDataList<LoadingSequenceMessage> callbackResults = new CallbackDataList<LoadingSequenceMessage>();

                Helpers.GetAppComponentsValid(messageList, "Message List", validComponentsCallbackResults => 
                {
                    callbackResults.SetResult(validComponentsCallbackResults);

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{messageList.Count} Messages Found.";
                        callbackResults.data = messageList;
                    }
                    else
                    {
                        callbackResults.result = "There Were No Messages Found.";
                        callbackResults.data = default;
                    }
                });

                callback.Invoke(callbackResults);
            }

            public CallbackDataList<LoadingSequenceMessage> GetMessageList()
            {
                CallbackDataList<LoadingSequenceMessage> callbackResults = new CallbackDataList<LoadingSequenceMessage>();

                Helpers.GetAppComponentsValid(messageList, "Message List", validComponentsCallbackResults =>
                {
                    callbackResults.SetResult(validComponentsCallbackResults);

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{messageList.Count} Messages Found.";
                        callbackResults.data = messageList;
                    }
                    else
                    {
                        callbackResults.result = "There Were No Messages Found.";
                        callbackResults.data = default;
                    }
                });

                return callbackResults;
            }

            public string GetFooter()
            {
                return footer;
            }

            public Callback Initialized()
            {
                Callback callbackResults = new Callback();

                Helpers.StringValueValid(validDataCallbackResults => 
                {
                    callbackResults.SetResult(validDataCallbackResults);

                    if (callbackResults.Success())
                        callbackResults.SetResult(GetMessageList());

                }, GetHeader());

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class Message
        {
            #region Components

            public string name;

            [Space(5)]
            public MessageIdentifierType messageID;

            [Space(5)]
            public string header;

            [Space(5)]
            public string body;

            [Space(5)]
            public string footer;

            #endregion

            #region Main

            #region Constructors

            public Message()
            {

            }

            public Message(string header, string body, string footer, MessageIdentifierType messageID)
            {
                this.header = header;
                this.body = body;
                this.footer = footer;
                this.messageID = messageID;
            }

            #endregion

            #region Getters And Accessors

            public void SetHeader(string header) => this.header = header;

            public void SetBody(string body) => this.body = body;

            public void SetFooter(string footer) => this.footer = footer;

            public void SetIdentifier(MessageIdentifierType messageID) => this.messageID = messageID;

            public string GetHeader()
            {
                return header;
            }

            public string GetBody()
            {
                return body;
            }

            public string GetFooter()
            {
                return footer;
            }

            public MessageIdentifierType GetIdentifier()
            {
                return messageID;
            }

            #endregion

            #endregion

        }

        [Serializable]
        public class MessageGroup
        {
            #region Components

            public string name;

            [Space(5)]
            public List<Message> messages = new List<Message>();

            [Space(5)]
            public ScreenType screenIdentifier;

            #endregion

            #region Main

            public Callback GroupInitialized()
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(messages, "Messages List", componentsCallbackResults => 
                {
                    callbackResults.resultCode = componentsCallbackResults.resultCode;

                    if (callbackResults.Success())
                        callbackResults.result = $"{componentsCallbackResults.data.Count} Messages Initialized Successfully.";
                    else
                        callbackResults.result = $"There Are No Messages Assigned To : {name}.";

                }, "Messages Are Not Initialized In The Inspector Panel.");

                return callbackResults;
            }

            public void GetMessages(Action<CallbackDataList<Message>> callback)
            {
                CallbackDataList<Message> callbackResults = new CallbackDataList<Message>();

                callbackResults.result = GroupInitialized().result;
                callbackResults.resultCode = GroupInitialized().resultCode;

                if(callbackResults.Success())
                {
                    callbackResults.result = $"Found : {messages.Count} Message(s)";
                    callbackResults.data = messages;
                }

                callback.Invoke(callbackResults);
            }

            public void GetMessages(MessageIdentifierType messageIdentifier, Action<CallbackDataList<Message>> callback)
            {
                CallbackDataList<Message> callbackResults = new CallbackDataList<Message>();

                callbackResults.result = GroupInitialized().result;
                callbackResults.resultCode = GroupInitialized().resultCode;

                if (callbackResults.Success())
                {
                    var messageList = messages.FindAll(msg => msg.GetIdentifier() == messageIdentifier);

                    if(messageList != null && messageList.Count > 0)
                    {
                        callbackResults.result = $"Found : {messages.Count} Message(s)";
                        callbackResults.data = messageList;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Find Messages With ID : {messageIdentifier}";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback.Invoke(callbackResults);
            }

            public void GetRandomMessage(Action<CallbackData<Message>> callback)
            {
                CallbackData<Message> callbackResults = new CallbackData<Message>();

                callbackResults.result = GroupInitialized().result;
                callbackResults.resultCode = GroupInitialized().resultCode;

                if (callbackResults.Success())
                {
                    int random = UnityEngine.Random.Range(0, messages.Count - 1);
                    var randomMessage = messages[random];

                    callbackResults.result = $"Found Random Message : {randomMessage.name}";
                    callbackResults.data = randomMessage;
                }

                callback.Invoke(callbackResults);
            }

            public void GetRandomMessage(MessageIdentifierType messageIdentifier, Action<CallbackData<Message>> callback)
            {
                CallbackData<Message> callbackResults = new CallbackData<Message>();

                callbackResults.result = GroupInitialized().result;
                callbackResults.resultCode = GroupInitialized().resultCode;

                if (callbackResults.Success())
                {
                    var messageList = messages.FindAll(msg => msg.GetIdentifier() == messageIdentifier);

                    if (messageList != null && messageList.Count > 0)
                    {
                        int random = UnityEngine.Random.Range(0, messageList.Count - 1);
                        var randomMessage = messageList[random];

                        callbackResults.result = $"Found Random Message : {randomMessage.name}";
                        callbackResults.data = randomMessage;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Find Messages With ID : {messageIdentifier}";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback.Invoke(callbackResults);
            }

            public ScreenType GetScreenIdentifier()
            {
                return screenIdentifier;
            }

            #endregion
        }

        public class MessageGroupData : SerializableData
        {
            #region Components

            public List<MessageGroup> messageGroups = new List<MessageGroup>();

            #endregion

            #region Main

            public MessageGroupData()
            {
            }

            public MessageGroupData(List<MessageGroup> messageGroups) => this.messageGroups = messageGroups;

            public void GetMessageCroups(Action<CallbackDataList<MessageGroup>> callback)
            {
                CallbackDataList<MessageGroup> callbackResults = new CallbackDataList<MessageGroup>();

                Helpers.GetAppComponentsValid(messageGroups, "Message Group List", messageGroupCallbackResults =>
                {
                    callbackResults.result = messageGroupCallbackResults.result;
                    callbackResults.resultCode = messageGroupCallbackResults.resultCode;

                    if (callbackResults.Success())
                        callbackResults.data = messageGroupCallbackResults.data;

                }, "There Were No Message Groups Found - Initialize Message Groups In Messaging System Manager Using The Editor Inspector Panel.", $"{messageGroups.Count} Message Group(s) Found.");

                callback.Invoke(callbackResults);
            }

            public void GetMessageGroup(ScreenType screenIdentifier, Action<CallbackData<MessageGroup>> callback)
            {
                CallbackData<MessageGroup> callbackResults = new CallbackData<MessageGroup>();

                Helpers.GetAppComponentsValid(messageGroups, "MessageGroup List", messageGroupCallbackResults =>
                {
                    callbackResults.result = messageGroupCallbackResults.result;
                    callbackResults.resultCode = messageGroupCallbackResults.resultCode;

                    if (callbackResults.Success())
                    {
                        var messageGroup = messageGroupCallbackResults.data.Find(group => group.GetScreenIdentifier() == screenIdentifier);

                        if (messageGroup != null)
                        {
                            callbackResults.result = $"Message Group : {messageGroup.name} - For Screen ID : {screenIdentifier} Found.";
                            callbackResults.data = messageGroup;
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Find Message Group For Screen ID : {screenIdentifier}.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }

                }, "There Were No Message Groups Found - Initialize Message Groups In Messaging System Manager Using The Editor Inspector Panel.");

                callback.Invoke(callbackResults);
            }

            #endregion
        }

        #endregion

        #region Notification System

        [Serializable]
        public struct Notification
        {
            #region Components

            public string title;

            [Space(5)]
            public string message;

            [Space(5)]
            public NotificationType notificationType;

            [Space(5)]
            public ScreenType screenType;

            [Space(5)]
            public SceneAssetPivot screenPosition;

            [Space(5)]
            public bool blurScreen;

            [Space(5)]
            public AppData.ScreenUIPlacementType blurLayer;

            [Space(5)]
            public float delay;

            [Space(5)]
            public float duration;

            [Space(5)]
            public bool showNotifications;

            [HideInInspector]
            public bool proccessed;

            #endregion

            #region Main

            public ScreenType GetScreenType()
            {
                return screenType;
            }

            public string GetTitle()
            {
                return title;
            }

            public string GetMessage()
            {
                return message;
            }

            public SceneAssetPivot GetScreenPosition()
            {
                return screenPosition;
            }

            public NotificationType GetNotificationType()
            {
                return notificationType;
            }

            public bool BlurScreenOnShow()
            {
                return blurScreen;
            }

            public bool Show()
            {
                return showNotifications;
            }

            public float GetDelay()
            {
                return delay;
            }

            public float GetDuration()
            {
                return duration;
            }

            public bool IsProccessed()
            {
                return proccessed;
            }

            #endregion
        }

        [Serializable]
        public class NotificationWidget
        {
            #region Components

            public string name;

            [Space(5)]
            public RectTransform value;

            [Space(5)]
            public UIText<TextDataPackets> titleDisplayer;

            [Space(5)]
            public UIText<TextDataPackets> messageDisplayer;

            [Space(5)]
            public NotificationType notificationType;

            [Space(5)]
            public ScreenType screenType;

            UIScreenWidgetContainer widgetContainer;

            #endregion

            #region Main

            public void SetNotificationScreenData(Notification notification, UIScreenWidgetContainer widgetContainer)
            {
                if (titleDisplayer.value != null)
                    titleDisplayer.value.text = notification.title;
                else
                    AppMonoDebugManager.Instance.LogWarning($"Title Displayer Value Missing / Not Assigned In The Editor --> For Widget Named : {name}.", "NotificationWidget", () => SetNotificationScreenData(notification, widgetContainer));

                if (messageDisplayer.value != null)
                    messageDisplayer.value.text = notification.message;
                else
                    AppMonoDebugManager.Instance.LogWarning($"Message Displayer Value Missing / Not Assigned In The Editor --> For Widget Named : {name}.", "NotificationWidget", () => SetNotificationScreenData(notification, widgetContainer));

                if (value != null)
                {
                    value.transform.SetParent(widgetContainer.value, true);
                    this.widgetContainer = widgetContainer;
                }
                else
                    AppMonoDebugManager.Instance.LogWarning($"NotificationWidget Value Missing / Not Assigned In The Editor --> For Widget Named : {name}.", "NotificationWidget", () => SetNotificationScreenData(notification, widgetContainer));
            }

            public RectTransform GetTransform()
            {
                return value;
            }

            public RectTransform GetHiddenScreenMountPoint()
            {
                return widgetContainer.hiddenScreenPoint;
            }

            public RectTransform GetVisibleScreenMountPoint()
            {
                return widgetContainer.visibleScreenPoint;
            }

            #endregion
        }

        [Serializable]
        public class UIScreenWidgetContainer
        {
            public string name;

            [Space(5)]
            public RectTransform value;

            [Space(5)]
            public NotificationType notificationType;

            [Space(5)]
            public ScreenType screenType;

            [Space(5)]
            public SceneAssetPivot screenPosition;

            [Space(5)]
            public RectTransform visibleScreenPoint, hiddenScreenPoint;
        }

        [Serializable]
        public class NotificationCommand : ICommand
        {
            Notification notification;

            public NotificationCommand(Notification notification) => this.notification = notification;

            public void Execute() => NotificationSystemManager.Instance.ShowNotification(notification);

            public void Undo()
            {

            }
        }

        #endregion

        #region Screen Capture Data

        [Serializable]
        public struct ImageData
        {
            public Texture2D texture;

            public byte[] data;

            public FileExtensionType extensionType;

            public StorageDirectoryData storageData;
        }

        #endregion

        [Serializable]
        public struct ScreenAssetUIData
        {
            public Image thumbnail;

            [Space(5)]
            public TMP_Text title;

            [Space(5)]
            public TMP_Text description;

            [Space(5)]
            public TMP_Text dateTime;
        }

        [Serializable]
        public struct DirectoryInfo
        {
            public string name;
            public SelectableWidgetType assetType;
            public StorageDirectoryData storageData;
            public bool dataAlreadyExistsInTargetDirectory;
        }

        [Serializable]
        public class AssetInfoHandler
        {
            [Space(5)]
            public List<AssetInfoField> fields = new List<AssetInfoField>();

            public void UpdateInfoField(AssetInfoField infoField, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                IsValidField(fields, fieldCheckCallback => 
                {
                    if(fieldCheckCallback.Success())
                    {
                        var field = fields.Find(field => field.type == infoField.type);

                        IsValidField(field, validFieldCallback => 
                        {
                            if(validFieldCallback.Success())
                            {
                                fields.Remove(field);

                                IsValidField(fields.Find(fieldData => fieldData.type == infoField.type), fieldExistCheckCallback => 
                                {
                                    if(!fieldExistCheckCallback.Success())
                                    {
                                        fields.Add(infoField);

                                        IsValidField(fields.Find(fieldData => fieldData.type == infoField.type), fileUpdatredCallback => 
                                        {
                                            if(fileUpdatredCallback.Success())
                                            {
                                                callbackResults.result = $"Field Of Type : {infoField.type} - Has Been Updated.";
                                                callbackResults.resultCode = Helpers.SuccessCode;
                                            }
                                            else
                                            {
                                                callbackResults.result = $"Couldn't Update Field Of Type : {infoField.type} - {fileUpdatredCallback.result}.";
                                                callbackResults.resultCode = Helpers.ErrorCode;
                                            }
                                        });
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Couldn't Update Field Of Type : {infoField.type} - Check Here.";
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                });
                            }
                            else
                                callbackResults = validFieldCallback;
                        });
                    }
                    else
                        callbackResults = fieldCheckCallback;
                });

                callback?.Invoke(callbackResults);
            }

            public void GetInfoField(Action<CallbackDataList<AssetInfoField>> callback = null)
            {
                CallbackDataList<AssetInfoField> callbackResults = new CallbackDataList<AssetInfoField>();

                Helpers.GetComponentsNotNullOrEmpty(fields, checkComponentsCallback => 
                {
                    if(checkComponentsCallback.Success())
                    {
                        callbackResults = checkComponentsCallback;
                    }
                    else
                    {
                        callbackResults.result = checkComponentsCallback.result;
                        callbackResults.data = default;
                        callbackResults.resultCode = checkComponentsCallback.resultCode;
                    }
                });

                callback?.Invoke(callbackResults);
            }

            void IsValidField(AssetInfoField field, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(field.value == null)
                {
                    callbackResults.result = $"Field Of Type : {field.type} Value Is Missing / Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;

                    callback?.Invoke(callbackResults);
                }

                if(string.IsNullOrEmpty(field.name))
                {
                    callbackResults.result = $"Field Of Type : {field.type} Value Is Missing / Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;

                    callback?.Invoke(callbackResults);
                }

                if(field.value != null && !string.IsNullOrEmpty(field.name))
                {
                    callbackResults.result = $"Field : {field.name} Of Type : {field.type} Is Valid.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            void IsValidField(List<AssetInfoField> fields, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (Helpers.ComponentIsNotNullOrEmpty(fields))
                {
                    foreach (var field in fields)
                    {
                        IsValidField(field, fieldCheckCallback => 
                        {
                            if(!fieldCheckCallback.Success())
                            {
                                callbackResults.result = $"Field Of Type : {field.type} Value Is Missing / Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                callback?.Invoke(callbackResults);
                            }
                            else
                            {
                                callbackResults.result = $"Field : {field.name} Of Type : {field.type} Is Valid.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                        });
                    }
                }
                else
                    Debug.LogWarning("--> Info Fields Are Not Yet Initialized.");

                callback?.Invoke(callbackResults);
            }

            public void GetInfoField(InfoDisplayerFieldType fieldType, Action<CallbackData<AssetInfoField>> callback = null)
            {
                CallbackData<AssetInfoField> callbackResults = new CallbackData<AssetInfoField>();

                Helpers.GetComponentsNotNullOrEmpty(fields, checkComponentsCallback =>
                {
                    if(checkComponentsCallback.Success())
                    {
                        GetInfoField(getFieldCallback => 
                        {
                            if(getFieldCallback.Success())
                            {
                                AssetInfoField field = getFieldCallback.data.Find(field => field.type == fieldType);

                                IsValidField(field, vaildFieldCallback => 
                                {
                                    if(vaildFieldCallback.Success())
                                        callbackResults.data = field;

                                    callbackResults.result = vaildFieldCallback.result;
                                    callbackResults.resultCode = vaildFieldCallback.resultCode;
                                });
                            }
                            else
                            {
                                callbackResults.result = getFieldCallback.result;
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        });
                    }
                    else 
                    {
                        callbackResults.result = checkComponentsCallback.result;
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public AssetInfoField GetInfoField(InfoDisplayerFieldType fieldType)
            {
                AssetInfoField info = new AssetInfoField();

                if (fields != null)
                {
                    foreach (var field in fields)
                    {
                        if (field.type == fieldType)
                        {
                            info = field;
                            break;
                        }
                    }
                }

                return info;
            }

            //public string name;
            //public int verticesCount, trianglesCount, uvCount;
        }

        [Serializable]
        public struct UIHidableScreenContent
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            #endregion

            #region Main

            public void Show()
            {
                if (value != null)
                    value.SetActive(true);
                else
                    Debug.LogWarning("--> Show UIHidableScreenContent Failed : Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (value != null)
                    value.SetActive(false);
                else
                    Debug.LogWarning("--> Hide UIHidableScreenContent Failed : Value Is Missing / Null.");
            }

            #endregion
        }

        [Serializable]
        public class StorageDirectoryData : AppComponent
        {
            #region Components

            [Space(5)]
            public StorageType type;

            [HideInInspector]
            public string path;

            [HideInInspector]
            public string projectDirectory;

            [HideInInspector]
            public string rootDirectory;

            [HideInInspector]
            public string directory;

            #endregion

            #region Main

            #region Constructors

            public StorageDirectoryData()
            {

            }

            public StorageDirectoryData(string path, string projectDirectory, string rootDirectory, string directory, StorageType type)
            {
                this.path = path;
                this.projectDirectory = projectDirectory;
                this.rootDirectory = rootDirectory;
                this.directory = directory;
                this.type = type;
            }

            #endregion

            new public string ToString()
            {
                return $"Name : {name} - Type : {type} - Path : {path} - Project Directory : {projectDirectory} - Root Directory : {rootDirectory} - Directory : {directory}";
            }

            #region Data Setters

            public void SetPath(string path) => this.path = path;
            public void SetDirectory(string directory) => this.directory = directory;
            public void SetRootDirectory(string rootDirectory) => this.rootDirectory = rootDirectory;
            public void SetProjectDirectory(string projectDirectory) => this.projectDirectory = projectDirectory;
            public void SetStorageType(StorageType type) => this.type = type;

            #endregion


            #region Data Getters

            public string GetPath() => path;
            public string GetDirectory() => directory;
            public string GetRootDirectory() => rootDirectory;
            public string GetProjectDirectory() => projectDirectory;
            public StorageType GetStorageType() =>  type;

            #endregion

            #endregion
        }

        [Serializable]
        public struct AssetField
        {
            public string name;

            [Space(5)]
            public AssetFieldType fieldType;

            [Space(5)]
            public FileExtensionType extensionType;

            [Space(5)]
            public string path;

            [Space(5)]
            public StorageType directoryType;
        }

        [Serializable]
        public struct AssetPath
        {
            public string name;

            [Space(5)]
            public string path;

            [Space(5)]
            public AssetFieldType fieldType;

            [Space(5)]
            public bool active;
        }

        [Serializable]
        public struct DropDownContentData
        {
            public string name;

            [Space(5)]
            public List<string> data;

            [Space(5)]
            public DropDownContentType contentType;
        }

        [Serializable]
        public struct RendererMaterial
        {
            #region Components

            public string name;

            [Space(5)]
            public Material value;

            [Space(5)]
            public RendererMaterialType materialType;

            RenderingSettingsManager renderingManager;

            #endregion

            #region Main

            public void Init()
            {
                renderingManager = RenderingSettingsManager.Instance;
            }

            public void UpdateToMatchMaterial(Material material)
            {

                Debug.Log($"--> Updating Material : {materialType.ToString()}");

                if (renderingManager == null)
                    renderingManager = RenderingSettingsManager.Instance;

                if (value != null)
                {
                    if (renderingManager)
                    {
                        value.SetTexture(renderingManager.GetMaterialTextureID(MaterialTextureType.MainTexture), material.GetTexture(renderingManager.GetMaterialTextureID(MaterialTextureType.MainTexture)));
                    }
                    else
                        Debug.LogWarning("--> Rendering Manager Not Yet Initialized.");
                }
                else
                    Debug.LogWarning("--> Material Value Missing / Null.");
            }

            #endregion
        }

        [Serializable]
        public class MaterialProperties
        {
            #region Components

            public string mainTexturePath;

            [HideInInspector]
            public string normalMapTexturePath;

            [HideInInspector]
            public string aoMapTexturePath;

            #region Properties

            [HideInInspector]
            public float glossiness;

            [HideInInspector]
            public float bumpScale;

            [HideInInspector]
            public float aoStrength;

            [HideInInspector]
            public MaterialProperties properties;

            #endregion

            #endregion
        }

        [Serializable]
        public class SceneAsset
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject modelAsset;

            [Space(5)]
            public AssetInfoHandler info;

            [Space(5)]
            public SceneObject sceneObject;

            [Space(5)]
            public MaterialProperties materialProperties;

            [Space(5)]
            public float sceneScale;

            [Space(5)]
            public string description;

            public AssetCategoryType categoryType;

            //[HideInInspector]
            public AssetModeType assetMode;

            [HideInInspector]
            public DateTimeComponent creationDateTime;

            [Space(5)]
            public bool hasMLTFile;

            [HideInInspector]
            public StorageDirectoryData storageData;

            [HideInInspector]
            public List<AssetField> assetFields;

            public bool dontShowMetadataWidget;

            [HideInInspector]
            public DefaultUIWidgetActionState defaultWidgetActionState;

            public Vector3 assetImportPosition;

            public Vector3 assetImportRotation;

            #endregion

            #region Main

            public AssetData ToSceneAssetData()
            {
                return new AssetData
                {
                    name = this.name,
                    info = this.info,
                    sceneObject = this.sceneObject,
                    materialProperties = this.materialProperties,
                    sceneScale = this.sceneScale,
                    description = this.description,
                    creationDateTime = this.creationDateTime,
                    mode = this.assetMode,
                    hasMLTFile = this.hasMLTFile,
                    storageData = this.storageData,
                    assetFields = this.assetFields,
                    showMetadataWidget = this.dontShowMetadataWidget,
                    categoryType = this.categoryType,
                    defaultWidgetActionState = this.defaultWidgetActionState,
                    assetImportPosition = this.assetImportPosition,
                    assetImportRotation = this.assetImportRotation
                };
            }

            public AssetInfoHandler GetInfo()
            {
                //if(string.IsNullOrEmpty(info.name))
                //    info.name = name;

                return info;
            }

            public void SetMaterialProperties(MaterialProperties properties)
            {
                materialProperties = properties;
            }

            public MaterialProperties GetMaterialProperties()
            {
                Debug.Log($"--> Get Material Propertis - Glossiness : {materialProperties.glossiness} - Bump Scale : {materialProperties.bumpScale} - AO Strength : {materialProperties.aoStrength}");
                return materialProperties;
            }

            public void SetSceneAssetModelContainer(Transform container, bool keepPose)
            {
                if (modelAsset == null || container == null)
                    return;

                modelAsset.transform.SetParent(container, keepPose);
            }

            public void AddAssetField(AssetField field)
            {
                if (assetFields == null)
                    assetFields = new List<AssetField>();


                if (!assetFields.Contains(field))
                    assetFields.Add(field);
            }

            public AssetField GetAssetField(AssetFieldType fieldType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.fieldType == fieldType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }
                else
                    Debug.LogWarning("--> Asset Field List Is Null.");

                return assetField;
            }

            public AssetField GetAssetField(FileExtensionType extensionType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.extensionType == extensionType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }

                return assetField;
            }

            public AssetField GetAssetField(StorageType directoryType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.directoryType == directoryType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }

                return assetField;
            }

            #region Asset Types Functions

            public void SetAssetCategoryType(AssetCategoryType categoryType)
            {
                this.categoryType = categoryType;
            }

            public void SetAssetModeType(AssetModeType assetMode)
            {
                this.assetMode = assetMode;
            }

            public AssetCategoryType GetAssetCategoryType()
            {
                return categoryType;
            }

            public AssetModeType GetAssetModeType()
            {
                return assetMode;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class AssetData : SerializableData
        {
            #region Components

            public AssetInfoHandler info;

            public SceneObject sceneObject;

            public MaterialProperties materialProperties;

            public float sceneScale;

            public string description;

            public AssetCategoryType categoryType;

            public AssetModeType mode;

            public bool hasMLTFile;

            public string materialShaderName;

            public List<AssetField> assetFields;

            public bool showMetadataWidget;

            public DefaultUIWidgetActionState defaultWidgetActionState;

            public Vector3 assetImportPosition;

            public Vector3 assetImportRotation;

            #endregion

            #region Main

            public SceneAsset ToSceneAsset()
            {
                SceneAsset asset = new SceneAsset
                {
                    name = this.name,
                    info = this.info,
                    sceneObject = this.sceneObject,
                    materialProperties = materialProperties,
                    sceneScale = this.sceneScale,
                    description = this.description,
                    creationDateTime = this.creationDateTime,
                    categoryType = this.categoryType,
                    assetMode = this.mode,
                    storageData = this.storageData,
                    hasMLTFile = this.hasMLTFile,
                    assetFields = this.assetFields,
                    dontShowMetadataWidget = this.showMetadataWidget,
                    defaultWidgetActionState = this.defaultWidgetActionState,
                    assetImportPosition = this.assetImportPosition,
                    assetImportRotation = this.assetImportRotation
                };

                return asset;
            }

            public void AddAssetField(AssetField field)
            {
                if (assetFields == null)
                    assetFields = new List<AssetField>();


                if (!assetFields.Contains(field))
                    assetFields.Add(field);
            }

            public void RemoveField(AssetField field)
            {
                if (assetFields == null)
                {
                    Debug.LogWarning("--> Asset Fields Are Null.");
                    return;
                }

                if (assetFields.Contains(field))
                    assetFields.Remove(field);
            }

            public void ReplaceField(AssetField field, AssetField newField)
            {
                if (assetFields == null)
                {
                    Debug.LogWarning("--> Asset Fields Are Null.");
                    return;
                }

                if (assetFields.Contains(field))
                    assetFields.Remove(field);

                if (!assetFields.Contains(newField))
                    assetFields.Add(newField);
            }

            public AssetField GetAssetField(AssetFieldType fieldType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.fieldType == fieldType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }
                else
                    Debug.LogWarning("--> Asset Field List Is Null.");

                return assetField;
            }

            public AssetField GetAssetField(FileExtensionType extensionType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.extensionType == extensionType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }

                return assetField;
            }

            public AssetField GetAssetField(StorageType directoryType)
            {
                AssetField assetField = new AssetField();

                if (assetFields != null)
                {
                    foreach (var field in assetFields)
                    {
                        if (field.directoryType == directoryType)
                        {
                            assetField = field;
                            break;
                        }
                    }
                }

                return assetField;
            }

            #region Asset Info

            public string GetDescription()
            {
                return description;
            }

            #endregion

            #region Content Types

            #region Set Content Types

            public void SetCategoryType(AssetCategoryType categoryType) => this.categoryType = categoryType;

            public void SetModeType(AssetModeType assetMode) => this.mode = assetMode;
            #endregion

            #region Get Content Types

            public AssetCategoryType GetCategoryType()
            {
                return categoryType;
            }

            public AssetModeType GetAssetModeType()
            {
                return mode;
            }

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public struct SceneAssetPose
        {
            public string name;

            [Space(5)]
            public Vector3 position;

            [Space(5)]
            public Quaternion rotation;

            [Space(5)]
            public Vector3 scale;
        }

        [Serializable]
        public struct MaterialShader
        {
            public string name;

            [Space(5)]
            public Shader value;

            [Space(5)]
            public ShaderType shaderType;
        }

        #region UI Data

        #region UI Actions

        [Serializable]
        public class SelectionState : DataDebugger
        {
            #region Components

            [Space(5)]
            public Sprite value;

            [Space(5)]
            public Color color;

            [Space(5)]
            public InputUIState state;

            #endregion
        }

        [Serializable]
        public struct ValidationState
        {
            #region Components

            public string name;

            [Space(5)]
            public Sprite value;

            [Space(5)]
            public Color color;

            [Space(5)]
            public ValidationResultsType resultsType;

            #endregion
        }

        [Serializable]
        public class UIScreenInputComponent : AppMonoBaseClass
        {
            #region Components

            [Header("::: Input Component Info")]

            [Space(5)]
            new public string name;

            #endregion

            #region Main

            #endregion
        }

        #region Base Selectable Data


        [Serializable]
        public class SelectionFrame
        {
            #region Components

            public string name;

            [Space(5)]
            public Image value;

            #endregion

            #region Main

            public Callback Initialized()
            {
                var callbackResults = new Callback();

                if(value != null)
                {
                    callbackResults.result = $"Selection Frame : {GetName()} Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Initialize Selection Frame : {GetName()}";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void SetColor(Color color, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                callback?.Invoke(callbackResults);
            }

            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Selection Frame Name Is Not Assigned";

            #endregion
        }

        [Serializable]
        public abstract class UISelectable: DataDebugger, ISelectable
        {
            #region Components

            [Space(5)]
            public InputSelectionStateInfoGroup selectionStatesInfo = new InputSelectionStateInfoGroup()
            {
                states = new List<SelectionState>
                {
                  //  Normal State
                  new SelectionState
                  {
                      name = "Normal",
                      color = Color.white,
                      state = InputUIState.Normal
                  },

                  //  Enabled State
                  new SelectionState
                  {
                      name = "Enabled",
                      color = Color.white,
                      state = InputUIState.Enabled
                  },

                  //  Disabled State
                  new SelectionState
                  {
                      name = "Disabled",
                      color = Color.gray,
                      state = InputUIState.Disabled
                  },

                  //  Selected State
                  new SelectionState
                  {
                      name = "Selected",
                      color = Color.white,
                      state = InputUIState.Selected
                  }
                }
            };

            [Space(5)]
            public bool selectable;

            [Space(5)]
            public SelectionVisualizationType visualizationType;

            [Space(5)]
            public SelectionFrame selectionFrame = new SelectionFrame(); 

            [Space(5)]
            public InputType inputType;

            [Space(5)]
            public InputValidationStateInfoGroup validationStatesInfo = new InputValidationStateInfoGroup();

            #endregion

            #region Main

            public void Initialize(Action<Callback> callback = null) => SelectableInit(callbackResults => { callback?.Invoke(callbackResults); });

            public void SetName(string name) => this.name = name;
            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Selectable Component Name Is Not Assigned.";

            public Callback Selectable()
            {
                Callback callbackResults = new Callback();

                if (selectable)
                {
                    callbackResults.SetResult(GetVisualizationType());

                    if (callbackResults.Success())
                    {
                        var visualizationDataType = GetVisualizationType().GetData();

                        if (visualizationDataType == SelectionVisualizationType.SelectionFrame)
                        {
                            callbackResults.SetResult(GetSelectionFrame());

                            if (callbackResults.UnSuccessful())
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                        else
                        {
                            callbackResults.SetResult(selectionStatesInfo.GetSelectionStates());

                            if (callbackResults.UnSuccessful())
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }

                        if (callbackResults.Success())
                            callbackResults.result = $"Selectable UI Component : {GetName()} Has Been Initialized Successfully With Visualization Type : {visualizationDataType}.";
                    }
                    else
                        callbackResults.result = $"Selectable Failed With Code - {callbackResults.GetResultCode} - Component : {GetName()} Is Set To Selectable But Failed With Results : {callbackResults.GetResult}.";
                }
                else
                {
                    callbackResults.result = $"Component : {GetName()} Is Not A Selectable Input Type.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            protected CallbackData<SelectionVisualizationType> GetVisualizationType()
            {
                var callbackResults = new CallbackData<SelectionVisualizationType>();

                if (visualizationType != SelectionVisualizationType.None)
                {
                    callbackResults.result = $"Selectable Component : {GetName()}'s Visualization Type Is Set To : {visualizationType}.";
                    callbackResults.data = visualizationType;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }
                else
                {
                    callbackResults.result = $"Selectable Component : {GetName()}'s Visualization Type Is Set To Default : {visualizationType} - Invalid Operation.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            protected CallbackData<SelectionFrame> GetSelectionFrame()
            {
                var callbackResults = new CallbackData<SelectionFrame>(selectionFrame.Initialized());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Selection Frame Has Been Successfully Initialized.";
                    callbackResults.data = selectionFrame;
                }

                return callbackResults;
            }

            #region Events

            public delegate void EventsListeners(UISelectable selectable);

            public event EventsListeners _OnSelectableActionEvent;

            protected void InvokeSelection(UISelectable selectable) => _OnSelectableActionEvent?.Invoke(selectable);

            public void Select()
            {
                if (selectable)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                break;

                            case SelectionVisualizationType.SelectionFrame:

                                if (selectionFrame != null)
                                {
                                    //if (validationStatesInfo.validate)
                                    //{
                                    //    validationStatesInfo.GetValidationState(validationCallbackResults =>
                                    //    {
                                    //        if (validationCallbackResults.Success())
                                    //        {
                                    //            selectionFrame.color = validationCallbackResults.data.color;

                                    //            if (validationCallbackResults.data.value != null)
                                    //                selectionFrame.sprite = validationCallbackResults.data.value;
                                    //        }
                                    //        else
                                    //            Debug.LogError(validationCallbackResults.result);
                                    //    });
                                    //}

                                    //selectionFrame.gameObject.SetActive(true);
                                }
                                else
                                    Debug.LogError($"Selection Frame For : {name} Of Type : {inputType} Missing / Not Found.");

                                break;
                        }

                        SetSelectableInputUIState(InputUIState.Selected);

                        GetSelectionState(selectionStateCallbackResults =>
                        {
                            if (selectionStateCallbackResults.Success())
                                SetSelectionState(visualizationType, selectionStateCallbackResults.data);
                            else
                                Debug.LogError(selectionStateCallbackResults.result);
                        });
                    }
                    else
                        Debug.LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.");
                }

            }

            public void Deselect()
            {
                if (selectable)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                break;

                            case SelectionVisualizationType.SelectionFrame:

                                if (selectionFrame != null)
                                {
                                    //if (validationStatesInfo.validate)
                                    //{
                                    //    validationStatesInfo.GetValidationState(ValidationResultsType.Default, validationCallbackResults =>
                                    //    {
                                    //        if (validationCallbackResults.Success())
                                    //        {
                                    //            selectionFrame.color = validationCallbackResults.data.color;

                                    //            if (validationCallbackResults.data.value != null)
                                    //                selectionFrame.sprite = validationCallbackResults.data.value;
                                    //        }
                                    //        else
                                    //            Log(validationCallbackResults.resultCode, validationCallbackResults.result, this);
                                    //    });
                                    //}

                                    //selectionFrame.gameObject.SetActive(false);
                                }

                                break;
                        }
                    }

                    SetSelectableInputUIState(InputUIState.Normal);

                    GetSelectionState(selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                            SetSelectionState(visualizationType, selectionStateCallbackResults.data);
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
            }

            public InputSelectionStateInfoGroup GetSelectionStateInfo()
            {
                return selectionStatesInfo;
            }

            #region UI States

            public void SetSelectableInputUIState(InputUIState state) => GetSelectionStateInfo().SetInputState(state);

            public InputUIState GetInputUIState() => GetSelectionStateInfo().GetInputUIState();

            #endregion

            #region Validations

            public InputValidationStateInfoGroup GetValidationStateInfo()
            {
                return validationStatesInfo;
            }

            public void SetValidationResults(ValidationResultsType results) => validationStatesInfo.Results = results;

            public void OnClearValidation()
            {
                if (validationStatesInfo.validate)
                {
                    SetValidationResults(ValidationResultsType.Default);

                    validationStatesInfo.GetValidationState(ValidationResultsType.Default, validationCallbackResults =>
                    {
                        if (validationCallbackResults.Success())
                        {
                            //selectionFrame.color = validationCallbackResults.data.color;

                            //if (validationCallbackResults.data.value != null)
                            //    selectionFrame.sprite = validationCallbackResults.data.value;
                        }
                        else
                            Debug.LogError(validationCallbackResults.result);
                    });
                }
            }

            #endregion

            public SelectionVisualizationType GetSelectionVisualizationType()
            {
                return visualizationType;
            }

            public void GetSelectionState(Action<CallbackData<SelectionState>> callback)
            {
                CallbackData<SelectionState> callbackResults = new CallbackData<SelectionState>();

                selectionStatesInfo.GetSelectionState(getStateCallbackResults =>
                {
                    callbackResults = getStateCallbackResults;
                });

                callback?.Invoke(callbackResults);
            }

            public void GetSelectionState(InputUIState state, Action<CallbackData<SelectionState>> callback)
            {
                CallbackData<SelectionState> callbackResults = new CallbackData<SelectionState>();

                selectionStatesInfo.GetSelectionState(state, getStateCallbackResults => 
                {
                    callbackResults = getStateCallbackResults;
                });

                callback?.Invoke(callbackResults);
            }

            public void OnInputPointerDownEvent() => InvokeSelection(this);

            public void Expand() => Select();

            public void Collapse()
            {
                Deselect();
                OnCollapse();
            }

            #endregion

            #region Abstracts

            public abstract void SelectableInit(Action<Callback> callback = null);

            public abstract void OnCollapse();

            public abstract void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState);

            #endregion

            #endregion
        }

        [Serializable]
        public abstract class SelectableUIInputComponent<T, U, V> : AppMonoBaseClass, IPointerDownHandler where T : Component
        {

            #region Components

            public string inputName;

            RectTransform uiInputTransform;

            protected UISelectable selectable;

            #endregion

            #region Main

            public void Init(UISelectable selectable) => this.selectable = selectable;

            public void OnPointerDown(PointerEventData eventData)
            {
                if (uiInputTransform == null)
                    uiInputTransform = this.GetComponent<RectTransform>();

                if (uiInputTransform)
                {
                    Vector2 pos;

                    if (RectTransformUtility.ScreenPointToLocalPointInRectangle(uiInputTransform, eventData.position, eventData.enterEventCamera, out pos))
                        OnInputSelected();
                }
            }

            protected abstract void OnInputSelected();
            protected abstract void OnInputSelected(UIInputComponent<T, U, V> input);

            #endregion

        }

        #endregion

        #region Action Inputs Components

        [Serializable]
        public abstract class UIInputComponent<T, U, D> : UISelectable, IUIComponent<D> where T : UnityEngine.Object
        {
            #region Components

            [Space(5)]
            public TMP_Text fieldName;

            [Space(5)]
            public List<UIImageDisplayer> fieldUIImageList;

            [Space(5)]
            public T value;

            [Space(5)]
            public U dataPackets;

            [Space(5)]
            public StatelessChildWidgets widgets;

            [Space(5)]
            public bool initialVisibilityState;

            #endregion

            #region Main

            public (bool success, string results) InputValueAssigned()
            {
                string results = (value != null)? $"Input : {name} Of Type : {inputType}'s Value Assigned" : $"Input : {name} Of Type : {inputType}'s Value Missing / Not Found / Not Assigned In The Editor Inspector Panel.";
                return (success: value != null, results: results);
            }


            public Callback Initialized()
            {
                Callback callbackResults = new Callback(GetValue());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Input : {GetName()} Of Type : {inputType}'s Value Assigned";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Input : {name} Of Type : {inputType}'s Value Missing / Not Found / Not Assigned In The Editor Inspector Panel.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<T> GetValue()
            {
                var callbackResults = new CallbackData<T>();

                if (value != null)
                {
                    callbackResults.result = $"Value Has Been Successfully Assigned For Component : {GetName()}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Value Failed - There Is No Value Assigned For Component : {GetName()}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }


            public new CallbackData<ScreenImageType> GetType()
            {
                var callbackResults = new CallbackData<ScreenImageType>(GetDataPackets());

                if (callbackResults.Success())
                {
                    var dataPacketsResults = GetDataPackets().GetData() as ImageDataPackets;

                    if (dataPacketsResults.imageType != ScreenImageType.None)
                    {
                        callbackResults.result = $"Image Displayer : {GetName()}'s Component Type Is Set To : {dataPacketsResults.imageType}";
                        callbackResults.data = dataPacketsResults.imageType;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Image Displayer : {GetName()}'s Component Type Is Set To Default : {dataPacketsResults.imageType} - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            /// <summary>
            /// Returns Datapackets For UI Component.
            /// </summary>
            /// <returns></returns>
            public CallbackData<U> GetDataPackets()
            {
                var callbackResults = new CallbackData<U>();

                if (dataPackets != null)
                {
                    callbackResults.result = $"Datapackets Have Been Successfully Initialized For Component : {GetName()}.";
                    callbackResults.data = dataPackets;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Datapackets Failed - Datapackets Are Not Initialized For Component : {GetName()}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            /// <summary>
            /// Sets The Title Of The UI Input.
            /// </summary>
            /// <param name="title">The Title To Display On The UI Input.</param>
            public void SetTitle(string title)
            {
                if (title != null)
                {
                    if(fieldName)
                        fieldName.text = title;
                    else
                        Debug.LogWarning("--> Set Title Failed - Field Name Is Missing / Null.");
                }
                else
                    Debug.LogWarning("--> Set Title Failed - Title Is Missing / Null.");
            }

            /// <summary>
            /// Sets The Color Of The UI Input Field.
            /// </summary>
            /// <param name="color">The Color To Use.</param>
            public abstract void SetUIColor(Color color);

            /// <summary>
            /// Returns The Current UI Input Interactable State.
            /// </summary>
            /// <returns></returns>
            public abstract bool GetInteractableState();

            /// <summary>
            /// Sets The Current UI Interactability State.
            /// </summary>
            /// <param name="interactable">The Interactable State Of The UI Input.</param>
            public abstract void SetInteractableState(bool interactable);

            /// <summary>
            /// Sets The Current UI Visibility State.
            /// </summary>
            /// <param name="visible">The Visibility State Of The UI Input.</param>
            public abstract void SetUIInputVisibilityState(bool visible);

            /// <summary>
            /// Returns The Current UI Input Visibility State.
            /// </summary>
            /// <returns></returns>
            public abstract bool GetUIInputVisibilityState();

            /// <summary>
            /// Sets The Current UI State.
            /// </summary>
            /// <param name="state">The Current State Of The input To Set.</param>
            public abstract void SetUIInputState(InputUIState state);

            /// <summary>
            /// Sets The States For The Child Widgets On This UI Input.
            /// </summary>
            /// <param name="interactable">The Interactable State Of The Child Widget.</param>
            /// <param name="isSelected">The Selection State Of The Child Widget.</param>
            public abstract void SetChildWidgetsState(bool interactable, bool isSelected);

            /// <summary>
            /// This Function Sets UI Image Value.
            /// </summary>
            public void SetUIImageValue(UIImageData image, UIImageDisplayerType imageType)
            {
                if (image.value != null)
                {
                    UIImageDisplayer displayer = fieldUIImageList.Find(displayer => displayer.imageDisplayerType == imageType);
                    displayer.value.sprite = image.value;
                }
                else
                    Debug.LogWarning($"--> Set UI Image Value Failed - Image IS Null.");
            }

            /// <summary>
            /// Set The Scale Of The UI Rect
            /// </summary>
            /// <param name="scale">Scale Value</param>
            public abstract void SetUIScale(Vector2 scale);

            /// <summary>
            /// Set The Scale Of The UI Rect
            /// </summary>
            /// <param name="width">UI Rect Width</param>
            /// <param name="height">UI Rect Height</param>
            public abstract void SetUIScale(int width, int height);

            /// <summary>
            /// Sets The Position Of The UI Rect
            /// </summary>
            /// <param name="position">UI Vector 2 Position</param>
            public abstract void SetUIPosition(Vector2 position);

            /// <summary>
            /// Sets The UI Rotation Euler Angle
            /// </summary>
            /// <param name="rotation">Rotation (Local Euler Angles)</param>
            public abstract void SetUIRotation(Vector3 rotation);

            /// <summary>
            /// Sets The Pose Of The UI Rect
            /// </summary>
            /// <param name="position">UI Vector 2 Position</param>
            /// <param name="scale">UI Vector 2 Scale</param>
            /// <param name="rotation">UI Vector 3 Rotation (Euler Angles)</param>
            public abstract void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation);

            /// <summary>
            /// Sets The Pose Of The UI Rect
            /// </summary>
            /// <param name="pose">Pose Tupil Value</param>
            public abstract void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose);

            /// <summary>
            /// Get UI Widget Rect Transform
            /// </summary>
            /// <returns>Widget's Rect Transform</returns>
            public abstract RectTransform GetWidgetRect();

            #endregion
        }

        [Serializable]
        public class UIButton<T> : UIInputComponent<Button, T, UIButton<T>>
        {
            #region Components

            #endregion

            #region Main

            public void SetButtonActionEvent(ActionEvents.ButtonAction<T> buttonEvent)
            {
                if (InputValueAssigned().success)
                {
                    if (buttonEvent != null)
                    {
                        value.onClick.AddListener(() => buttonEvent(this));
                        value.CancelInvoke();
                    }
                    else
                        value.onClick.RemoveAllListeners();
                }
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetInteractableState()
            {
                if (InputValueAssigned().success)
                    return value.interactable;
                else
                {
                    Debug.LogWarning(InputValueAssigned().results);
                    return false;
                }
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            //void SetUIInputSelectionState(SelectionState state)
            //{
            //    if(fieldUIImageList != null && fieldUIImageList.Count > 0)
            //    {
            //        var buttonIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.ButtonIcon);

            //        if (buttonIcon.value != null)
            //        {
            //            buttonIcon.value.color = state.color;

            //            if (state.value != null)
            //                buttonIcon.value.sprite = state.value;
            //        }
            //        else
            //            Debug.LogError("Button Icon Value Missing / Not Found.");
            //    }

            //    selectionState = state;
            //}

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (InputValueAssigned().success)
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning(InputValueAssigned().results);
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {
                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;

                    case InputUIState.Shown:


                        SetUIInputVisibilityState(true);

                        break;

                    case InputUIState.Hidden:

                        SetUIInputVisibilityState(false);

                        break;
                }

                SetSelectableInputUIState(state);
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
                if (value != null)
                    value.image.color = color;
                else
                    Debug.LogError("Button Value Missing.");
            }

            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.", this);
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            #endregion

            public override void OnCollapse()
            {
                throw new NotImplementedException();
            }

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);

            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);

            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UIDropDown<T> : UIInputComponent<TMP_Dropdown, T, UIDropDown<T>> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public RectTransform arrowIcon;

            #endregion

            #region Main

            bool IsInitialized()
            {
                return value;
            }

            public void SetContent(List<string> contentList)
            {
                if (contentList.Count > 0)
                {
                    if (value != null)
                    {
                        value.ClearOptions();

                        List<TMP_Dropdown.OptionData> dropdownOption = new List<TMP_Dropdown.OptionData>();

                        foreach (var content in contentList)
                        {
                            dropdownOption.Add(new TMP_Dropdown.OptionData() { text = content });
                        }

                        value.AddOptions(dropdownOption);

                        //value.onValueChanged.AddListener((value) => OnDropDownFilterOptions(value));
                    }
                    else
                        Debug.LogWarning("--> Set Content Failed : Value Missing / Null.");
                }
            }

            public void SetContent(List<string> contentList, string filter, string content)
            {
                if (contentList.Count > 0)
                {
                    if (value != null)
                    {
                        value.ClearOptions();

                        List<TMP_Dropdown.OptionData> dropdownOption = new List<TMP_Dropdown.OptionData>();

                        foreach (var item in contentList)
                        {
                            dropdownOption.Add(new TMP_Dropdown.OptionData() { text = (item.Contains(filter) ? content : item) });
                        }

                        value.AddOptions(dropdownOption);

                        //value.onValueChanged.AddListener((value) => OnDropDownFilterOptions(value));
                    }
                    else
                        Debug.LogWarning("--> Set Content Failed : Value Missing / Null.");
                }
            }

            public override bool GetInteractableState()
            {
                if (IsInitialized())
                    return value.interactable;
                else
                {
                    Debug.LogWarning("--> GetInteractableState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;
                    SetArrowIconState(interactable);

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            value.captionText.color = selectionStateCallbackResults.data.color;

                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (IsInitialized())
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning("--> GetUIInputVisibilityState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {
                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;

                    case InputUIState.Shown:

                        SetUIInputVisibilityState(true);

                        break;

                    case InputUIState.Hidden:

                        SetUIInputVisibilityState(false);

                        break;
                }

                SetSelectableInputUIState(state);
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
                throw new NotImplementedException();
            }

            public void SetArrowIconState(bool state) => arrowIcon?.gameObject?.SetActive(state);


            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        Debug.LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.");
                }
                else
                    Debug.LogError(InputValueAssigned().results);
            }

            #endregion

            public override void OnCollapse() => value.Hide();

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);

            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);

            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UIInputField<T> : UIInputComponent<TMP_InputField, T, UIInputField<T>>
        {
            #region Components

            [Space(5)]
            public Button clearButton;

            [Space(5)]
            public string placeHolderText;

            [Space(5)]
            public TMP_Text placeholderTextDisplayer;

            [Space(5)]
            public int characterLimit;

            [Space(5)]
            public InputFieldValueType valueType;

            string clearTextPlaceHolder;

            #endregion

            #region Main

            public void Initialize()
            {
                if (clearButton != null)
                    clearButton.onClick.AddListener(OnClearField);

                if (value != null)
                    value.characterLimit = characterLimit;

                SetPlaceHolderText(placeHolderText);
            }

            public void SetPlaceHolderText(string placeholder)
            {
                if (!string.IsNullOrEmpty(placeholder))
                {
                    clearTextPlaceHolder = placeholder;

                    value.text = string.Empty;

                    if (placeholderTextDisplayer)
                        placeholderTextDisplayer.text = placeholder;
                }
                else
                    LogError($"Placeholder Text For : {name} Of Type : {inputType} Is Not Set / Empty / Null.", this);
            }

            public void SetPlaceHolderText(int placeholder)
            {
                this.clearTextPlaceHolder = placeholder.ToString();

                if (value != null)
                    value.text = string.Empty;
                else
                    Debug.LogWarning("--> SetPlaceHolderText Failed : Value Missing / Null.");

                if (placeholderTextDisplayer)
                    placeholderTextDisplayer.text = placeholder.ToString();
            }

            public void SetValue(string value) => this.value.text = value;

            public void OnClearField()
            {
                if (value)
                {
                    value.text = string.Empty;

                    if (placeholderTextDisplayer)
                    {
                        if (string.IsNullOrEmpty(clearTextPlaceHolder) && !string.IsNullOrEmpty(placeHolderText))
                            clearTextPlaceHolder = placeHolderText;

                        placeholderTextDisplayer.text = clearTextPlaceHolder;
                    }

                    value.Select();
                }
            }

            public void OnSelect()
            {
                if (value)
                {
                    if (!string.IsNullOrEmpty(value.text))
                        value.Select();
                }
                else
                    Debug.LogWarning("--> On Select Failed : Value Missing / Null.");
            }

            bool IsInitialized()
            {
                return value;
            }

            public override bool GetInteractableState()
            {
                if (IsInitialized())
                    return value.interactable;
                else
                {
                    Debug.LogWarning("--> GetInteractableState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;

                    if(clearButton)
                        clearButton.interactable = interactable;

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (IsInitialized())
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning("--> GetUIInputVisibilityState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {
                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;

                    case InputUIState.Shown:

                        SetUIInputVisibilityState(true);

                        break;

                    case InputUIState.Hidden:

                        SetUIInputVisibilityState(false);

                        break;
                }

                SetSelectableInputUIState(state);
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
                throw new NotImplementedException();
            }

            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        Debug.LogWarning("Input Selection Visualization Type Is Set To None.");
                }
                else
                    Debug.LogError(InputValueAssigned().results);
            }

            #endregion

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UICheckbox<T> : UIInputComponent<Toggle, T, UICheckbox<T>>
        {
            #region Components

            [Space(5)]
            public CheckboxInputActionType actionType;

            [Space(5)]
            public bool initialSelectionState;

            [Space(5)]
            public bool initialInteractabilityState;

            #endregion

            #region Main

            public void Initialize()
            {
                if (IsInitialized())
                {
                    value.isOn = initialSelectionState;
                    value.interactable = initialInteractabilityState;
                    value.gameObject.SetActive(initialVisibilityState);
                }
                else
                    Debug.LogWarning("--> Initialize UICheckbox Failed : Value Is Missing / Null.");
            }

            public void SetInteractableState(bool interactable, bool isVisible)
            {
                value.interactable = interactable;
                value.gameObject.SetActive(isVisible);
            }

            public void SetSelectionState(bool isSelected)
            {
                if (IsInitialized())
                    value.isOn = isSelected;
                else
                    Debug.LogWarning("--> UICheckbox Selected Failed : Checkbox Value Is Missing / Null.");
            }

            bool IsInitialized()
            {
                return value;
            }

            public override bool GetInteractableState()
            {
                if (IsInitialized())
                    return value.interactable;
                else
                {
                    Debug.LogWarning("--> GetInteractableState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (IsInitialized())
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning("--> GetUIInputVisibilityState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {
                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;

                    case InputUIState.Shown:

                        SetUIInputVisibilityState(true);

                        break;

                    case InputUIState.Hidden:

                        SetUIInputVisibilityState(false);

                        break;
                }
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
              
            }

            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        Debug.LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.");
                }
                else
                    Debug.LogError(InputValueAssigned().results);
            }

            #endregion

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UISlider<T> : UIInputComponent<Slider, T, UISlider<T>>
        {
            #region Components

            [Space(5)]
            public int initialMaxValue;

            [Space(5)]
            public SliderValueType valueType;

            #endregion

            #region Main

            new public void Initialize()
            {
                if (InputValueAssigned().success)
                {
                    value.minValue = 0;
                    value.maxValue = (initialMaxValue > 0) ? initialMaxValue : 1;
                }
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetInteractableState()
            {
                if (InputValueAssigned().success)
                    return value.interactable;
                else
                {
                    Debug.LogWarning(InputValueAssigned().results);
                    return false;
                }
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (InputValueAssigned().success)
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning(InputValueAssigned().results);
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {
                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;

                    case InputUIState.Shown:

                        SetUIInputVisibilityState(true);

                        break;

                    case InputUIState.Hidden:

                        SetUIInputVisibilityState(false);

                        break;
                }

                SetSelectableInputUIState(state);
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {

            }

            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        Debug.LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.");
                }
                else
                    Debug.LogError(InputValueAssigned().results);
            }

            #endregion

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UIInputSlider<T> : UIInputComponent<Slider, T, UIInputSlider<T>>
        {
            #region Components

            [Space(5)]
            public Slider slider;

            [Space(5)]
            public int initialMaxValue;

            [Space(5)]
            public TMP_InputField inputField;

            [Space(5)]
            public int inputFieldCharacterLimit;

            [Space(5)]
            public Button clearFieldsButton;

            [Space(5)]
            public SliderValueType valueType;

            float sliderValue;
            string inputValue;

            #endregion

            #region Main

            public void Initialize()
            {
                if (IsInitialized())
                {
                    slider.minValue = 0;
                    slider.maxValue = (initialMaxValue > 0) ? initialMaxValue : 1;
                }

                if (clearFieldsButton)
                    clearFieldsButton.onClick.AddListener(OnClearFieldButtonClickedEvent);
                else
                    Debug.LogWarning("--> UIInputSlider Clear Field Button Initialize Failed : Button Value Is Null.");
            }

            public void SetValue(string inputValue, float sliderValue)
            {
                if (IsInitialized())
                {
                    slider.value = sliderValue;
                    inputField.text = inputValue;
                }
            }

            public bool IsInitialized()
            {
                return (slider != null && inputField != null);
            }

            void OnClearFieldButtonClickedEvent()
            {
                if (IsInitialized())
                {
                    slider.value = sliderValue;
                    inputField.text = inputValue;
                }
            }

            public override bool GetInteractableState()
            {
                return false;
            }

            public override void SetInteractableState(bool interactable)
            {
                if (InputValueAssigned().success)
                {
                    value.interactable = interactable;

                    InputUIState state = (interactable) ? InputUIState.Enabled : InputUIState.Disabled;

                    GetSelectionState(state, selectionStateCallbackResults =>
                    {
                        if (selectionStateCallbackResults.Success())
                        {
                            if (fieldUIImageList != null && fieldUIImageList.Count > 0)
                            {
                                var inputIcon = fieldUIImageList.Find(icon => icon.imageDisplayerType == UIImageDisplayerType.InputIcon);

                                if (inputIcon.value != null)
                                {
                                    inputIcon.value.color = selectionStateCallbackResults.data.color;

                                    if (selectionStateCallbackResults.data.value != null)
                                        inputIcon.value.sprite = selectionStateCallbackResults.data.value;
                                }
                                else
                                    LogError("Input Icon Value Missing / Not Found.", this);
                            }
                        }
                        else
                            Log(selectionStateCallbackResults.resultCode, selectionStateCallbackResults.result, this);
                    });
                }
                else
                    LogError(InputValueAssigned().results, this);
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                return false;
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {

                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;
                }
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected) => widgets.SetWidgetsInteractableState(interactable, isSelected);

            public override void SetUIColor(Color color)
            {
                if (fieldUIImageList.Count > 0)
                {
                    foreach (var uiField in fieldUIImageList)
                    {
                        if (uiField.value != null)
                            uiField.value.color = color;
                        else
                            Debug.LogWarning("--> SetFieldColor Failed : UI Field Value Null / Empty.");
                    }
                }
                else
                    Debug.LogWarning("--> SetFieldColor Failed : fieldUIImageList Values Are Null / Empty.");
            }

            #region Selections

            bool HasSelectableComponent()
            {
                return value.gameObject.GetComponent<SelectableInputComponentHandler>() != null;
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                if (!HasSelectableComponent())
                {
                    SelectableInputComponentHandler selectable = value.gameObject.AddComponent<SelectableInputComponentHandler>();

                    if (selectable)
                    {
                        selectable.Init(this, initializedCallbackResults =>
                        {
                            if (initializedCallbackResults.Success())
                                Deselect();
                            else
                                Debug.LogError($"Initialization Failed With Results : {initializedCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogWarning("UIDropDown Initialize Failed : SelectableInputDropdownHandler Component Missing / Not Found.");
                }
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                if (InputValueAssigned().success)
                {
                    if (visualizationType != SelectionVisualizationType.None)
                    {
                        switch (visualizationType)
                        {
                            case SelectionVisualizationType.ColorTint:

                                value.image.color = selectionState.color;

                                break;

                            case SelectionVisualizationType.ImageSwap:

                                value.image.sprite = selectionState.value;

                                break;
                        }
                    }
                    else
                        Debug.LogWarning($"Selectable : {name} - Of Input Type : {inputType}'s Visualization Type Is Set To None.");
                }
                else
                    Debug.LogError(InputValueAssigned().results);
            }

            #endregion

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.GetComponent<RectTransform>();

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        #endregion

        #region Displayer Components

        [Serializable]
        public class UIText<T> : UIInputComponent<TMP_Text, T, UIText<T>>
        {
            #region Main

            bool IsInitialized()
            {
                return value;
            }

            public override bool GetInteractableState()
            {
                return false;
            }

            public override void SetInteractableState(bool interactable)
            {

            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                if (IsInitialized())
                    return value.isActiveAndEnabled;
                else
                {
                    Debug.LogWarning("--> GetUIInputVisibilityState Failed : Value Is Missing / Null.");
                    return false;
                }
            }

            public override void SetUIInputState(InputUIState state)
            {

            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
                if (InputValueAssigned().success)
                    value.color = color;
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public void SetScreenUITextValue(string value)
            {
                if (this.value)
                    this.value.text = value;
                else
                    Debug.LogWarning("--> SetScreenUITextValue Failed - Value Is Missing / Null.");
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                throw new NotImplementedException();
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                throw new NotImplementedException();
            }

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.rectTransform;

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UIImageDisplayer<T> : UIInputComponent<Image, T, UIInputSlider<T>>
        {
            #region Components

            [Space(5)]
            public ScreenImageType imageType;

            #endregion

            #region Main

            public void SetImageData(ImageData screenCaptureData, ImageDataPackets dataPackets)
            {
                if (dataPackets.useData)
                {
                    value.rectTransform.sizeDelta = new Vector2(dataPackets.resolution.width, dataPackets.resolution.height);
                    value.preserveAspect = dataPackets.preserveAspectRatio;

                    if (screenCaptureData.texture != null)
                        value.sprite = Helpers.Texture2DToSprite(screenCaptureData.texture);
                    else
                        Debug.LogWarning("--> Failed : screenCaptureData.texture Is Null.");
                }
                else
                {
                    if (screenCaptureData.texture != null)
                        value.sprite = Helpers.Texture2DToSprite(screenCaptureData.texture);
                    else
                        Debug.LogWarning("--> Failed : screenCaptureData.texture Is Null.");
                }
            }

            public void SetImageData(Sprite image, bool preserveAspectRatio = true)
            {
                if (value != null)
                {
                    value.sprite = image;
                    value.preserveAspect = preserveAspectRatio;
                }
                else
                    Debug.LogWarning("SetImageData Failed - Displayer Value Missing.");
            }

            public void SetImageData(Texture2D image, bool preserveAspectRatio = true)
            {
                if (value != null)
                {
                    value.sprite = Helpers.Texture2DToSprite(image);
                    value.preserveAspect = preserveAspectRatio;
                }
                else
                    Debug.LogWarning("--> SetImageData Failed - Displayer Value Missing.");
            }

            public override bool GetInteractableState()
            {
                return false;
            }

            public override void SetInteractableState(bool interactable)
            {

            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                if (InputValueAssigned().success)
                    value.gameObject.SetActive(visible);
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override bool GetUIInputVisibilityState()
            {
                return false;
            }

            public override void SetUIInputState(InputUIState state)
            {
                switch (state)
                {

                    case InputUIState.Enabled:

                        SetInteractableState(true);

                        break;

                    case InputUIState.Disabled:

                        SetInteractableState(false);

                        break;
                }
            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                widgets.SetWidgetsInteractableState(interactable, isSelected);
            }

            public override void SetUIColor(Color color)
            {
                if (InputValueAssigned().success)
                    value.color = color;
                else
                    Debug.LogWarning(InputValueAssigned().results);
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                throw new NotImplementedException();
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                throw new NotImplementedException();
            }

            public override void OnCollapse()
            {

            }

            public override RectTransform GetWidgetRect() => value.rectTransform;

            public override void SetUIScale(Vector2 scale) => GetWidgetRect().SetWidgetScale(scale);
            public override void SetUIScale(int width, int height) => GetWidgetRect().SetWidgetScale(width, height);
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        #region States Info Groups

        [Serializable]
        public class InputSelectionStateInfoGroup
        {
            #region Components

            [Space(5)]
            public List<SelectionState> states = new List<SelectionState>
                                                        {
                                                            new SelectionState
                                                            {
                                                                name = "Normal",
                                                                color = Color.white,
                                                                state = InputUIState.Normal
                                                            },

                                                            new SelectionState
                                                            {
                                                                name = "Enabled",
                                                                color = Color.white,
                                                                state = InputUIState.Enabled
                                                            },

                                                            new SelectionState
                                                            {
                                                                name = "Disabled",
                                                                color = Color.grey,
                                                                state = InputUIState.Disabled
                                                            },

                                                            new SelectionState
                                                            {
                                                                name = "Selected",
                                                                color = Color.white,
                                                                state = InputUIState.Selected
                                                            }
                                                        };

            //[HideInInspector]
            public InputUIState inputState;

            #endregion

            #region Main

            public InputSelectionStateInfoGroup()
            {
                
            }

            public void SetInputState(InputUIState inputState) => this.inputState = inputState;

            public InputUIState GetInputUIState()
            {
                return inputState;
            }

            public void GetSelectionState(Action<CallbackData<SelectionState>> callback)
            {
                CallbackData<SelectionState> callbackResults = new CallbackData<SelectionState>();

                if (states != null && states.Count > 0)
                {
                    var state = states.Find(x => x.state == inputState);

                    if (!string.IsNullOrEmpty(state.name))
                    {
                        callbackResults.result = $"Found Selection State : {state.name} Of Type : {inputState}.";
                        callbackResults.data = state;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Selection State Of Type : {inputState} Not Assigned.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Selection States Assigned.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void GetSelectionState(InputUIState inputState, Action<CallbackData<SelectionState>> callback)
            {
                CallbackData<SelectionState> callbackResults = new CallbackData<SelectionState>();

                if (states != null && states.Count > 0)
                {
                    var state = states.Find(x => x.state == inputState);

                    if (!string.IsNullOrEmpty(state.name))
                    {
                        callbackResults.result = $"Found Selection State : {state.name} Of Type : {inputState}.";
                        callbackResults.data = state;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Selection State Of Type : {inputState} Not Assigned.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Selection States Assigned.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }


            public CallbackDataList<SelectionState> GetSelectionStates()
            {
                var callbackResults = new CallbackDataList<SelectionState>(Helpers.GetAppComponentsValid(states, "Selection States", "Selection States Are Not Initialized - Invalid Operation.", $"{states.Count} Selection State(s) Have Been Successfully Initialized."));

                if (callbackResults.Success())
                {
                    callbackResults.result = $"{states.Count} : Selection States Have Been Successully Found.";
                    callbackResults.data = states;
                }

                return callbackResults;
            }

            public CallbackData<int> GetSelectionStateCount()
            {
                var callbackResults = new CallbackData<int>(GetSelectionStates());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"{GetSelectionStates().GetData().Count} : Selection States Have Been Successully Found.";
                    callbackResults.data = GetSelectionStates().GetData().Count;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class InputValidationStateInfoGroup
        {
            #region Components

            [Space(5)]
            public bool validate;

            [Space(5)]
            public List<ValidationState> validationStates = new List<ValidationState>
            {
                new ValidationState
                {
                    name = "Default",
                    color = Color.white,
                    resultsType = ValidationResultsType.Default
                },

                new ValidationState
                {
                    name = "Success",
                    color = Color.white,
                   resultsType =  ValidationResultsType.Success
                },

                new ValidationState
                {
                    name = "Warning",
                    color = Color.white,
                    resultsType = ValidationResultsType.Warning
                },

                new ValidationState
                {
                    name = "Error",
                    color = Color.grey,
                    resultsType = ValidationResultsType.Error
                }
            };

            public ValidationResultsType Results { get; set; }

            #endregion

            #region Main

            public void GetValidationState(Action<CallbackData<ValidationState>> callback)
            {
                CallbackData<ValidationState> callbackResults = new CallbackData<ValidationState>();

                if(validationStates != null && validationStates.Count > 0)
                {
                    var state = validationStates.Find(x => x.resultsType == Results);

                    if(!string.IsNullOrEmpty(state.name))
                    {
                        callbackResults.result = $"Found Validation State : {state.name} Of Type : {Results}.";
                        callbackResults.data = state;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Validation State Of Type : {Results} Not Assigned.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Validation States Assigned.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void GetValidationState(ValidationResultsType resultsType, Action<CallbackData<ValidationState>> callback)
            {
                CallbackData<ValidationState> callbackResults = new CallbackData<ValidationState>();

                if (validationStates != null && validationStates.Count > 0)
                {
                    var state = validationStates.Find(x => x.resultsType == resultsType);

                    if (!string.IsNullOrEmpty(state.name))
                    {
                        callbackResults.result = $"Found Validation State : {state.name} Of Type : {Results}.";
                        callbackResults.data = state;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Validation State Of Type : {Results} Not Assigned.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Validation States Assigned.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion
        }

        #endregion

        #endregion

        #endregion

        #region UI State Component Groups

        #region Action Groups

        #region UI Screen Action Group Component Wildcard *

        [Serializable]
        public class UIScreenActionComponent<T, U> : UIInputComponent<T, U, UIScreenActionComponent<T, U>> where T : UnityEngine.Object
        {
            #region Components

            #endregion

            #region Main

            public override bool GetInteractableState()
            {
                throw new NotImplementedException();
            }

            public override bool GetUIInputVisibilityState()
            {
                throw new NotImplementedException();
            }

            public override void SelectableInit(Action<Callback> callback = null)
            {
                throw new NotImplementedException();
            }

            public override void SetSelectionState(SelectionVisualizationType visualizationType, SelectionState selectionState)
            {
                throw new NotImplementedException();
            }

            public override void OnCollapse()
            {

            }

            public override void SetChildWidgetsState(bool interactable, bool isSelected)
            {
                throw new NotImplementedException();
            }

            public override void SetUIColor(Color color)
            {
                throw new NotImplementedException();
            }

            public override void SetInteractableState(bool interactable)
            {
                throw new NotImplementedException();
            }

            public override void SetUIInputState(InputUIState state)
            {
                throw new NotImplementedException();
            }

            public override void SetUIInputVisibilityState(bool visible)
            {
                throw new NotImplementedException();
            }

            public override RectTransform GetWidgetRect()
            {
                throw new NotImplementedException();
            }

            public override void SetUIScale(Vector2 scale)
            {
                throw new NotImplementedException();
            }
            public override void SetUIScale(int width, int height)
            {
                throw new NotImplementedException();
            }
            public override void SetUIPosition(Vector2 position) => GetWidgetRect().SetWidgetPosition(position);
            public override void SetUIRotation(Vector3 rotation) => GetWidgetRect().SetWidgetRotation(rotation);
            public override void SetUIPose(Vector2 position, Vector2 scale, Vector3 rotation) => GetWidgetRect().SetWidgetPose(position, scale, rotation);
            public override void SetUIPose((Vector2 position, Vector2 scale, Vector3 rotation) pose) => GetWidgetRect().SetWidgetPose(pose.position, pose.scale, pose.rotation);

            #endregion
        }

        [Serializable]
        public class UIScreenActionGroup<T, U> where T : UnityEngine.Object where U : DataPackets
        {
            #region Components

            [Space(10)]
            [Header("::: Group Info")]

            [Space(5)]
            public string name;

            [Space(10)]
            [Header("::: Action Group Components")]

            [Space(5)]
            public List<UIScreenActionComponent<T, U>> actionComponents = new List<UIScreenActionComponent<T, U>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<W>(W fromClass = null, Action<CallbackData<List<UIScreenActionComponent<T, U>>>> callback = null) where W : AppMonoBaseClass
            {
                CallbackData<List<UIScreenActionComponent<T, U>>> callbackResults = new CallbackData<List<UIScreenActionComponent<T, U>>>();

                if (IsInitialized())
                {
                    if (actionComponents == null || actionComponents.Count > 0)
                    {
                        var initializedActionButtonList = actionComponents.FindAll(actionComponent => actionComponent.value != null);

                        if (initializedActionButtonList != null && initializedActionButtonList.Count == actionComponents.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Components Group Has Been Initialized Successfully With : {initializedActionButtonList.Count} Action Components.";
                            callbackResults.data = actionComponents;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionComponents.Count - initializedActionButtonList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionComponents.Count} Action Component(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Components - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Component Group List From : {fromClass?.GetUniqueClassName()}. Action Components List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Component Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        [Serializable]
        public class UIScreenActionGroup
        {
            #region Components

            public string name;

            public AppData.InputType inputGroup;

            public List<InputActionHandler> screenActionGroup;

            public bool initialize;

            #endregion
        }

        #endregion

        #region UI Screen Action Component

        #region Action Button Group

        [Serializable]
        public class UIButtonGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIButton<T>> buttons = new List<UIButton<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UIButton<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIButton<T>> callbackResults = new CallbackDataList<UIButton<T>>();

                if (IsInitialized())
                {
                    if (buttons == null || buttons.Count > 0)
                    {
                        var initializedActionInputFieldsList = buttons.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedActionInputFieldsList != null && initializedActionInputFieldsList.Count == buttons.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Button Group Has Been Initialized Successfully With : {initializedActionInputFieldsList.Count} Input Buttons.";
                            callbackResults.data = initializedActionInputFieldsList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = buttons.Count - initializedActionInputFieldsList.Count;
                            callbackResults.result = $"Couldn't Initialized {buttons.Count} Action Button(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Action Button(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Button Group List From : {fromClass?.GetUniqueClassName()}. Action Button(s) List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Button Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Input Field Group

        [Serializable]
        public class UIInputFieldGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIInputField<T>> actionInputFields = new List<UIInputField<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UIInputField<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIInputField<T>> callbackResults = new CallbackDataList<UIInputField<T>>();

                if (IsInitialized())
                {
                    if (actionInputFields == null || actionInputFields.Count > 0)
                    {
                        var initializedActionInputFieldsList = actionInputFields.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedActionInputFieldsList != null && initializedActionInputFieldsList.Count == actionInputFields.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Input Fields Group Has Been Initialized Successfully With : {initializedActionInputFieldsList.Count} Input Fields.";
                            callbackResults.data = initializedActionInputFieldsList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionInputFields.Count - initializedActionInputFieldsList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionInputFields.Count} Action Input Field(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Input Field(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Input Fields Group List From : {fromClass?.GetUniqueClassName()}. Action Input Fields List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Input Fields Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Input Slider Group

        [Serializable]
        public class UIInputSliderGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIInputSlider<T>> actionInputSliders = new List<UIInputSlider<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UIInputSlider<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIInputSlider<T>> callbackResults = new CallbackDataList<UIInputSlider<T>>();

                if (IsInitialized())
                {
                    if (actionInputSliders == null || actionInputSliders.Count > 0)
                    {
                        var initializedActionInputSlidersList = actionInputSliders.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedActionInputSlidersList != null && initializedActionInputSlidersList.Count == actionInputSliders.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Input Sliders Group Has Been Initialized Successfully With : {initializedActionInputSlidersList.Count} Input Sliders.";
                            callbackResults.data = initializedActionInputSlidersList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionInputSliders.Count - initializedActionInputSlidersList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionInputSliders.Count} Action Input Slider(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Input Slider(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Input Sliders Group List From : {fromClass?.GetUniqueClassName()}. Action Input Sliders List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Input Sliders Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Checkbox Group

        [Serializable]
        public class UIInputCheckboxGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UICheckbox<T>> actionInputCheckboxes = new List<UICheckbox<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UICheckbox<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UICheckbox<T>> callbackResults = new CallbackDataList<UICheckbox<T>>();

                if (IsInitialized())
                {
                    if (actionInputCheckboxes == null || actionInputCheckboxes.Count > 0)
                    {
                        var initializedActionInputCheckboxesList = actionInputCheckboxes.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedActionInputCheckboxesList != null && initializedActionInputCheckboxesList.Count == actionInputCheckboxes.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Input Checkbox Group Has Been Initialized Successfully With : {initializedActionInputCheckboxesList.Count} Input Checkboxes.";
                            callbackResults.data = initializedActionInputCheckboxesList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionInputCheckboxes.Count - initializedActionInputCheckboxesList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionInputCheckboxes.Count} Action Input Checkbox(es) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Input Checkbox(es) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Input Checkboxes Group List From : {fromClass?.GetUniqueClassName()}. Action Input Checkboxes List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Input Checkboxes Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Dropdown Group

        [Serializable]
        public class UIInputDropdownGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIDropDown<T>> actionInputDropdowns = new List<UIDropDown<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UIDropDown<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIDropDown<T>> callbackResults = new CallbackDataList<UIDropDown<T>>();

                if (IsInitialized())
                {
                    if (actionInputDropdowns == null || actionInputDropdowns.Count > 0)
                    {
                        var initializedActionInputDropdownsList = actionInputDropdowns.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedActionInputDropdownsList != null && initializedActionInputDropdownsList.Count == actionInputDropdowns.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Input Dropdown Group Has Been Initialized Successfully With : {initializedActionInputDropdownsList.Count} Input Dropdowns.";
                            callbackResults.data = initializedActionInputDropdownsList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionInputDropdowns.Count - initializedActionInputDropdownsList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionInputDropdowns.Count} Action Input Dropdown(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Input Dropdown(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't  Initialized Action Input Dropdowns Group List From : {fromClass?.GetUniqueClassName()}. Action Input Dropdowns List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Input Dropdowns Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Slider Group

        [Serializable]
        public class InputUISliderGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UISlider<T>> actionUISliders = new List<UISlider<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UISlider<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UISlider<T>> callbackResults = new CallbackDataList<UISlider<T>>();

                if (IsInitialized())
                {
                    if (actionUISliders == null || actionUISliders.Count > 0)
                    {
                        var initializedUISliderssList = actionUISliders.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedUISliderssList != null && initializedUISliderssList.Count == actionUISliders.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. Action Input UI Sliders Group Has Been Initialized Successfully With : {initializedUISliderssList.Count} Input UI Sliders.";
                            callbackResults.data = initializedUISliderssList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = actionUISliders.Count - initializedUISliderssList.Count;
                            callbackResults.result = $"Couldn't Initialized {actionUISliders.Count} Action Input UI Slider(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} Input UI Slider(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Initialized Action Input UI Sliders Group List From : {fromClass?.GetUniqueClassName()}. Action Input UI Sliders List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Action Input UI Sliders Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region Action UI Components Group

        [Serializable]
        public class ActionUIComponentsGroup<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            [Header("::: Action Buttons Group")]

            [Space(5)]
            public UIButtonGroupComponent<T> buttonsGroup = new UIButtonGroupComponent<T>();

            [Space(5)]
            [Header("::: Action Input Fields Group")]

            [Space(5)]
            public UIInputFieldGroupComponent<T> fieldsGroup = new UIInputFieldGroupComponent<T>();

            [Space(5)]
            [Header("::: Action Field Sliders Group")]

            [Space(5)]
            public UIInputSliderGroupComponent<T> fieldSlidersGroup = new UIInputSliderGroupComponent<T>();

            [Space(5)]
            [Header("::: Action Dropdowns Group")]

            [Space(5)]
            public InputUISliderGroupComponent<T> uiSlidersGroup = new InputUISliderGroupComponent<T>();

            [Space(5)]
            [Header("::: Action Checkboxes Group")]

            [Space(5)]
            public UIInputCheckboxGroupComponent<T> checkboxesGroup = new UIInputCheckboxGroupComponent<T>();

            [Space(5)]
            [Header("::: Action Dropdowns Group")]

            [Space(5)]
            public UIInputDropdownGroupComponent<T> dropdownsGroup = new UIInputDropdownGroupComponent<T>();

            #endregion

            #region Main


            #endregion
        }

        #endregion

        #endregion

        #endregion

        #region UI Groups

        #region UI Text Group

        [Serializable]
        public class UITextGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIText<T>> uiTexts = new List<UIText<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(U fromClass = null, Action<CallbackDataList<UIText<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIText<T>> callbackResults = new CallbackDataList<UIText<T>>();

                if (IsInitialized())
                {
                    if (uiTexts == null || uiTexts.Count > 0)
                    {
                        var initializedUITextsList = uiTexts.FindAll(button => button.value != null);

                        if (initializedUITextsList != null && initializedUITextsList.Count == uiTexts.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. UI Text Group Has Been Initialized Successfully With : {initializedUITextsList.Count} UI Text(s).";
                            callbackResults.data = initializedUITextsList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = uiTexts.Count - initializedUITextsList.Count;
                            callbackResults.result = $"Couldn't Initialized {uiTexts.Count} UI Text(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} UI Text(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Initialized UI Texts Group List From : {fromClass?.GetUniqueClassName()}. UI Texts List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"UI Text Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region UI Image Displayer Group

        [Serializable]
        public class UIImageDisplayerGroupComponent<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            public List<UIImageDisplayer<T>> imageDisplayers = new List<UIImageDisplayer<T>>();

            [Space(5)]
            public bool initialize;

            #endregion

            #region Main

            public void Init<U>(SceneDataPackets dataPackets, U fromClass = null, Action<CallbackDataList<UIImageDisplayer<T>>> callback = null) where U : AppMonoBaseClass
            {
                CallbackDataList<UIImageDisplayer<T>> callbackResults = new CallbackDataList<UIImageDisplayer<T>>();

                if (IsInitialized())
                {
                    if (imageDisplayers == null || imageDisplayers.Count > 0)
                    {
                        var initializedimageDisplayersList = imageDisplayers.FindAll(button => button.value != null && button.dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());

                        if (initializedimageDisplayersList != null && initializedimageDisplayersList.Count == imageDisplayers.Count)
                        {
                            callbackResults.result = $"Class : {fromClass?.GetUniqueClassName()}. UI Image Displayer Group Has Been Initialized Successfully With : {initializedimageDisplayersList.Count} UI Image Displayer(s).";
                            callbackResults.data = initializedimageDisplayersList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            int invalidDataCount = imageDisplayers.Count - initializedimageDisplayersList.Count;
                            callbackResults.result = $"Couldn't Initialized {imageDisplayers.Count} UI Image Displayer(s) From Class : {fromClass?.GetUniqueClassName()}. Found Issues With {invalidDataCount} UI Image Displayer(s) - Please Check : {fromClass?.GetUniqueClassName()} In The Unity Editor Inspector.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Initialized UI Image Displayer Group List From : {fromClass?.GetUniqueClassName()}. UI Image Displayer List Is Null / Empt / Not Assigned In Unity Editor Inspector.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"UI Image Displayer Group List Has Not Been Initialized From : {fromClass?.GetUniqueClassName()} Yet.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                initialize = callbackResults.Success();

                callback?.Invoke(callbackResults);
            }

            public bool IsInitialized()
            {
                return initialize;
            }

            #endregion
        }

        #endregion

        #region UI Components Group

        [Serializable]
        public class UIComponentsGroup<T> where T : SceneDataPackets
        {
            #region Components

            [Space(5)]
            [Header("::: UI Text Group")]

            [Space(5)]
            public UITextGroupComponent<T> uiTextsGroup = new UITextGroupComponent<T>();

            [Space(5)]
            [Header("::: UI Image Displayer Group")]

            [Space(5)]
            public UIImageDisplayerGroupComponent<T> uiImageDisplayersGroup = new UIImageDisplayerGroupComponent<T>();

            #endregion

            #region Initializations

            #endregion

            #region Main

            public UITextGroupComponent<T> GetUITextsGroup()
            {
                return uiTextsGroup;
            }

            public UIImageDisplayerGroupComponent<T> GetUIImageDisplayersGroup()
            {
                return uiImageDisplayersGroup;
            }


            #endregion
        }

        #endregion

        #endregion

        #endregion

        #endregion

        [Serializable]
        public struct StatelessChildWidgets
        {
            #region Components

            public List<GameObject> objectWidget;

            [Space(5)]
            public List<Button> buttonWidgets;

            [Space(5)]
            public List<Toggle> toggleWidgets;

            [Space(5)]
            public List<TMP_Text> textWidgets;

            [Space(5)]
            public List<ImageState> imageWidgets;

            #endregion

            #region Main

            public void SetWidgetsInteractableState(bool interactable, bool isSelected)
            {
                if (objectWidget != null)
                    foreach (var widget in objectWidget)
                        if (widget != null)
                            widget.SetActive(interactable);

                if (buttonWidgets != null)
                    foreach (var widget in buttonWidgets)
                        if (widget != null)
                            widget.interactable = interactable;

                if (toggleWidgets != null)
                    foreach (var widget in toggleWidgets)
                    {
                        if (widget)
                        {
                            widget.isOn = isSelected;
                            widget.interactable = interactable;
                        }
                        else
                            Debug.LogWarning("--> Button Stateless Child Widget Missing / Not Assigned.");
                    }

                if (textWidgets != null)
                    foreach (var widget in textWidgets)
                    {
                        if (widget)
                        {
                            widget.text = (interactable) ? "Asset Assigned." : (!string.IsNullOrEmpty(widget.text)) ? widget.text : "Assign Asset Here!";
                        }
                        else
                            Debug.LogWarning("--> Button Stateless Child Widget Missing / Not Assigned.");
                    }

                if (imageWidgets != null)
                {
                    foreach (var widget in imageWidgets)
                    {
                        if (widget.value)
                            widget.value.sprite = (interactable) ? widget.enabled : widget.disabled;
                        else
                            Debug.LogWarning("--> Image Widget Value Missing / Not Assigned In The Inspector Panel.");
                    }
                }
            }

            #endregion
        }

        [Serializable]
        public struct ImageState
        {
            public string name;

            [Space(5)]
            public Image value;

            [Space(5)]
            public Sprite enabled, disabled;
        }

        [Serializable]
        public struct ScreenText
        {
            public string name;

            [Space(5)]
            public string text;

            [Space(5)]
            public ScreenTextType textType;
        }

        [Serializable]
        public struct SceneAssetDynamicContentContainer
        {
            #region Components

            public string name;

            [Space(5)]
            public Transform value;

            [Space(5)]
            public Transform recycledContentContainer;

            [Space(5)]
            public ContentContainerType containerType;

            [Space(5)]
            public ScreenType screenType;

            [Space(5)]
            public bool useLocalPose;

            List<GameObject> assets;

            SceneAssetPose assetPose;
            SceneAssetPose assetLocalPose;

            #endregion

            #region Main

            public void Init()
            {
                if (value)
                {
                    assetPose = new SceneAssetPose()
                    {
                        name = this.name,
                        position = value.transform.position,
                        rotation = value.transform.rotation,
                        scale = value.transform.localScale
                    };

                    assetLocalPose = new SceneAssetPose()
                    {
                        name = this.name,
                        position = value.transform.localPosition,
                        rotation = value.transform.localRotation,
                        scale = value.transform.localScale
                    };
                }
                else
                    Debug.LogWarning("--> Container Missing");
            }

            public void Add(GameObject sceneAsset, LayerMask arSceneAssetGroundLayer, bool worldPosition, bool fitInsideCollider, bool visible, float defaultContentScale, float contentScaleRatio, bool keepAssetCentered, bool isImport)
            {
                if (assets == null)
                    assets = new List<GameObject>();

                if (value)
                {
                    //sceneAsset.transform.SetParent(container, worldPosition);

                    sceneAsset.SetActive(visible);

                    if (!assets.Contains(sceneAsset))
                        assets.Add(sceneAsset);

                    sceneAsset.transform.localScale = Vector3.one;

                    if (fitInsideCollider)
                    {
                        List<MeshRenderer> assetObjectMeshRendererList = new List<MeshRenderer>();

                        if (sceneAsset.transform.childCount > 0)
                            assetObjectMeshRendererList = sceneAsset.GetComponentsInChildren<MeshRenderer>().ToList();


                        if (sceneAsset.GetComponent<MeshRenderer>())
                            assetObjectMeshRendererList.Add(sceneAsset.GetComponent<MeshRenderer>());

                        if (assetObjectMeshRendererList.Count > 0)
                        {

                            if (GetSceneAssetMaxExtent(GetSceneAssetBounds(sceneAsset, assetObjectMeshRendererList).extents) > defaultContentScale)
                            {

                                while (GetSceneAssetMaxExtent(GetSceneAssetBounds(sceneAsset, assetObjectMeshRendererList).extents) > defaultContentScale)
                                {
                                    sceneAsset.transform.localScale *= contentScaleRatio;
                                }
                            }
                            else
                            {
                                while (GetSceneAssetMaxExtent(GetSceneAssetBounds(sceneAsset, assetObjectMeshRendererList).extents) < defaultContentScale)
                                {
                                    sceneAsset.transform.localScale *= -contentScaleRatio;
                                }
                            }

                            Vector3 center = -(GetSceneAssetCenter(assetObjectMeshRendererList) - value.localPosition);


                            if (keepAssetCentered)
                            {
                                if (isImport)
                                {
                                    sceneAsset.transform.position = center;

                                    //if(SceneAssetsManager.Instance.GetCurrentSceneAsset().assetImportPosition == Vector3.zero)
                                    //    SceneAssetsManager.Instance.GetCurrentSceneAsset().assetImportPosition = center;

                                    if (AppDatabaseManager.Instance != null)
                                    {
                                        if (AppDatabaseManager.Instance.GetCurrentSceneAsset() != null)
                                        {

                                            AppDatabaseManager.Instance.GetCurrentSceneAsset().assetImportPosition = center;


                                            Debug.Log($"--------------> Imported Asset : {AppDatabaseManager.Instance.GetCurrentSceneAsset().name}'s Position Set To : {AppDatabaseManager.Instance.GetCurrentSceneAsset().assetImportPosition}");
                                        }
                                        else
                                            Debug.LogWarning("--> Add Asset To Container Failed - Scene Assets Manager Instance's Get Current Scene Asset Is Null / Not Found.");
                                    }
                                    else
                                        Debug.LogWarning("--> RG_Unity - Scene Assets Manager Not Yet Initialized.");
                                }
                                else
                                    sceneAsset.transform.position = center;
                            }
                            else
                                sceneAsset.transform.position = Vector3.zero;

                            if (sceneAsset.GetComponent<SceneAssetModelHandler>() == null)
                            {
                                SceneAssetModelHandler modelHandler = sceneAsset.AddComponent<SceneAssetModelHandler>();

                                if (modelHandler != null)
                                {
                                    modelHandler.Init(sceneAsset.transform.localScale);
                                }
                                else
                                    Debug.LogWarning($"--> RG_Unity - SceneAssetModelHandler Missing For Game Object : {sceneAsset.name}");
                            }

                            sceneAsset.transform.SetParent(value, worldPosition);

                            Debug.Log($"--> Asset Center : {GetSceneAssetCenter(assetObjectMeshRendererList)} - New Center : {center}");

                        }
                        else
                        {
                            Debug.LogWarning($"--> Failed To Get Mesh Renderer List For : {sceneAsset.name}");

                            return;
                        }
                    }
                }
                else
                    Debug.LogWarning("--> Container Missing");
            }

            Bounds GetSceneAssetBounds(GameObject sceneAssetObhect, List<MeshRenderer> renderers)
            {
                Bounds bounds = new Bounds();

                foreach (var renderer in renderers)
                {
                    bounds.Encapsulate(renderer.bounds);
                }

                return bounds;
            }

            float GetSceneAssetMaxExtent(Vector3 sceneAssetExtents)
            {
                float maxExtent = 0.0f;

                if (sceneAssetExtents.x > sceneAssetExtents.y && sceneAssetExtents.x > sceneAssetExtents.z)
                    maxExtent = sceneAssetExtents.x;
                else if (sceneAssetExtents.y > sceneAssetExtents.x && sceneAssetExtents.y > sceneAssetExtents.z)
                    maxExtent = sceneAssetExtents.y;
                else if (sceneAssetExtents.z > sceneAssetExtents.x && sceneAssetExtents.z > sceneAssetExtents.y)
                    maxExtent = sceneAssetExtents.z;
                else
                    maxExtent = sceneAssetExtents.x;

                return maxExtent;
            }

            Vector3 GetSceneAssetPivot(Bounds assetBounds, SceneAssetPivot assetPivot)
            {
                Vector3 pivot = Vector3.zero;

                switch (assetPivot)
                {
                    case SceneAssetPivot.BottomCenter:

                        pivot = assetBounds.center;
                        float y = assetBounds.extents.y / 100;
                        y /= 2;
                        pivot.y = y - y;

                        break;

                    case SceneAssetPivot.MiddleCenter:

                        pivot = assetBounds.center;

                        break;
                }

                return pivot;
            }

            Vector3 GetSceneAssetCenter(List<MeshRenderer> renderers)
            {
                Bounds bounds = new Bounds();

                foreach (var renderer in renderers)
                {
                    bounds.Encapsulate(renderer.bounds);
                }

                return bounds.center;
            }

            Vector3 GetSceneAssetBoundsSize(GameObject sceneAssetObhect, List<MeshRenderer> renderers)
            {
                Bounds bounds = new Bounds();

                foreach (var renderer in renderers)
                {
                    bounds.Encapsulate(renderer.bounds);
                }

                return bounds.size;
            }

            public void ResetPose()
            {
                if (value)
                {
                    if (useLocalPose)
                    {
                        value.localPosition = assetLocalPose.position;
                        value.localRotation = assetLocalPose.rotation;
                        value.localScale = assetLocalPose.scale;
                    }
                    else
                    {
                        value.position = assetPose.position;
                        value.rotation = assetPose.rotation;
                        value.localScale = assetPose.scale;
                    }

                }
                else
                    Debug.LogWarning("--> Container Missing");
            }

            public void Remove(GameObject sceneAsset)
            {
                if (value)
                {

                }
                else
                    Debug.LogWarning("--> Container Missing");
            }

            public void Clear(bool resetLocalScale)
            {
                if (recycledContentContainer != null)
                {
                    if (value.childCount <= 0)
                        return;

                    for (int i = 0; i < value.childCount; i++)
                    {
                        if (value.GetChild(i).gameObject.GetComponent<SceneAssetModelHandler>())
                        {
                            SceneAssetModelHandler assetHandler = value.GetChild(i).gameObject.GetComponent<SceneAssetModelHandler>();

                            if (assetHandler != null)
                            {
                                Debug.Log("-- RG_Unity - Success : Asset Scale Reseted...........................");
                                assetHandler.Reset(false, resetLocalScale, recycledContentContainer);
                            }
                            else
                                Debug.LogWarning("--> Clear Content Failed To Reset Scale : Asset Handler Is Null.");
                        }
                    }
                }
                else
                    Debug.LogWarning("--> Clear Content Failed : Recycled Content Container Is Not Assigned In The Inspector Panel.");
            }

            public void Show(bool resetPose = false, bool isLocal = false)
            {
                if (value)
                {
                    if (resetPose)
                    {
                        if (!isLocal)
                        {
                            value.position = Vector3.zero;
                            value.rotation = Quaternion.identity;
                        }
                        else
                        {
                            value.localPosition = Vector3.zero;
                            value.localRotation = Quaternion.identity;
                        }

                        value.localScale = Vector3.one;
                    }

                    value.gameObject.SetActive(true);
                }
                else
                    Debug.LogWarning("--> Container Is Null.");
            }

            public void Hide(bool resetPose = false, bool isLocal = false)
            {
                if (value)
                {
                    value.gameObject.SetActive(false);

                    if (resetPose)
                    {
                        if (!isLocal)
                        {
                            value.position = Vector3.zero;
                            value.rotation = Quaternion.identity;
                        }
                        else
                        {
                            value.localPosition = Vector3.zero;
                            value.localRotation = Quaternion.identity;
                        }

                        value.localScale = Vector3.one;
                    }

                }
                else
                    Debug.LogWarning("--> Container Is Null.");
            }

            public void ScaleContent(float value, bool scaleContent)
            {
                if (this.value)
                {
                    if (scaleContent)
                    {
                        Transform asset = this.value.GetChild(0);
                        Vector3 scale = asset.localScale;
                        scale /= value;
                        asset.localScale = scale;
                    }
                }
                else
                    Debug.LogWarning("--> Container Is Null.");
            }

            #endregion
        }

        [Serializable]
        public struct SceneContainerData
        {
            public string name;

            [Space(5)]
            public Transform value;

            [Space(5)]
            public AssetModeType assetModeType;
        }

        public struct HSVColorData
        {
            public float hue;
            public float saturation;
            public float value;
        }

        [Serializable]
        public class RGBColorValue
        {
            #region Components

            public string name;


            [Space(5)]
            public Color color;

            [Space(5)]
            public ColorValueType valueType;

            #endregion

            #region Main

            public RGBColorValue()
            {

            }

            public RGBColorValue(Color Color, ColorValueType valueType)
            {
                this.color = Color;
                this.valueType = valueType;
            }

            public void SetColor(Color color) => this.color = color;

            public Color GetColor()
            {
                return color;
            }

            public void SetValueType(ColorValueType valueType) => this.valueType = valueType;

            public ColorValueType GetValueType()
            {
                return valueType;
            }

            #endregion
        }

        [Serializable]
        public struct LoadingItemData
        {
            public string name;

            [Space(5)]
            public GameObject loadingWidgetsContainer;

            [Space(5)]
            public LoadingItemType type;

            [Space(5)]
            public bool isShowing;
        }

        [Serializable]
        public struct SceneObject
        {
            public AssetInfoHandler info;
            public GameObject value;
        }

        [Serializable]
        public struct ScreenTogglableWidget<T>
        {
            #region Components

            public string name;

            [Space(5)]
            public T value;

            [Space(5)]
            public TogglableWidgetType widgetType;

            #endregion

            #region Main

            public void Show()
            {
                GameObject value = this.value as GameObject;
                value.SetActive(true);
            }

            public void Hide()
            {
                GameObject value = this.value as GameObject;
                value.SetActive(false);
            }

            public void Interactable(bool state)
            {
                Button value = this.value as Button;
                value.interactable = state;
            }

            #endregion
        }

        public enum UITransitionType
        {
            None,
            Translate,
            Scale,
            Rotate
        }

        public enum UITransitionStateType
        {
            None,
            Once,
            Repeat
        }

        [Serializable]
        public class TransitionableUIComponent : DataDebugger
        {
            #region Components

            public RectTransform transitionableUISourceReference;
            public Vector3 target;
            public float transitionSpeed;

            bool canTransitionUI = false;

            public UITransitionType transitionType;
            public UITransitionStateType transitionState;

            private Vector3 sourceOrigin, targetOrigin;

            private bool subscribedToEvents;

            private const float transitionDistanceInMagnitude = 0.01f;

            #endregion

            #region Main

            #region Constructors

            public TransitionableUIComponent()
            {
            }

            public TransitionableUIComponent(RectTransform transitionable, UITransitionType transitionType, UITransitionStateType transitionState)
            {
                this.transitionableUISourceReference = transitionable;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(RectTransform transitionable, Vector3 target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable;
                this.target = target;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.anchoredPosition;
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetWidgetScale();
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(RectTransform transitionable, RectTransform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable;
                this.target = target.anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.anchoredPosition;
                                    targetOrigin = target.anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetWidgetScale();
                                    targetOrigin = target.GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(RectTransform transitionable, Transform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable;
                this.target = target.GetComponent<RectTransform>().anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.anchoredPosition;
                                    targetOrigin = target.GetComponent<RectTransform>().anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.sizeDelta;
                                    targetOrigin = target.GetComponent<RectTransform>().sizeDelta;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target.GetComponent<RectTransform>().localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(RectTransform transitionable, GameObject target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable;
                this.target = target.GetComponent<RectTransform>().anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.anchoredPosition;
                                    targetOrigin = target.GetComponent<RectTransform>().anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.sizeDelta;
                                    targetOrigin = target.GetComponent<RectTransform>().sizeDelta;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target.GetComponent<RectTransform>().localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(Transform transitionable, Vector3 target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(Transform transitionable, RectTransform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target.anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target.anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target.sizeDelta;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(Transform transitionable, Transform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target.GetComponent<RectTransform>().anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target.GetComponent<RectTransform>().anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target.GetComponent<RectTransform>().GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.localEulerAngles;
                                    targetOrigin = target.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(GameObject transitionable, Vector3 target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target;

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.transform.localEulerAngles;
                                    targetOrigin = target;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(GameObject transitionable, RectTransform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target.anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target.anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target.GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.transform.localEulerAngles;
                                    targetOrigin = target.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(GameObject transitionable, Transform target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target.GetComponent<RectTransform>().anchoredPosition;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target.GetComponent<RectTransform>().anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target.GetComponent<RectTransform>().GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.transform.localEulerAngles;
                                    targetOrigin = target.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            public TransitionableUIComponent(GameObject transitionable, GameObject target, UITransitionType transitionType, UITransitionStateType transitionState, float transitionSpeed)
            {
                this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
                this.target = target.GetComponent<RectTransform>().anchoredPosition; ;
                this.transitionSpeed = transitionSpeed;
                this.transitionType = transitionType;
                this.transitionState = transitionState;

                if (transitionState != UITransitionStateType.None)
                {
                    if (transitionState == UITransitionStateType.Repeat)
                    {
                        if (transitionType != UITransitionType.None)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().anchoredPosition;
                                    targetOrigin = target.GetComponent<RectTransform>().anchoredPosition;

                                    break;

                                case UITransitionType.Scale:

                                    sourceOrigin = transitionable.GetComponent<RectTransform>().GetWidgetScale();
                                    targetOrigin = target.GetComponent<RectTransform>().GetWidgetScale();

                                    break;

                                case UITransitionType.Rotate:

                                    sourceOrigin = transitionable.transform.localEulerAngles;
                                    targetOrigin = target.transform.localEulerAngles;

                                    break;
                            }
                        }
                        else
                            throw new Exception("Transition Failed : Transition Type Is Set To Default : NONE.");
                    }
                }
                else
                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");
            }

            #endregion

            #region Events

            private async void ActionEvents__Update()
            {
                if (GetCanTransition().UnSuccessful())
                    return;

                var initializationTaskCallback = await Initialized();

                if (initializationTaskCallback.Success())
                {
                    var inProgressTaskCallback = await InProgress();

                    if (inProgressTaskCallback.Success())
                    {
                        switch (transitionType)
                        {
                            case UITransitionType.Translate:

                                var targetPosition = Vector2.Lerp(GetTransitionableUISource().GetWidgetPosition(), GetTarget(), GetTransitionSpeed());
                                GetTransitionableUISource().SetWidgetPosition(targetPosition);

                                break;

                            case UITransitionType.Scale:

                                transitionableUISourceReference.sizeDelta = Vector2.Lerp(transitionableUISourceReference.sizeDelta, target, transitionSpeed * Time.smoothDeltaTime);

                                break;

                            case UITransitionType.Rotate:

                                transitionableUISourceReference.rotation = Quaternion.Slerp(transitionableUISourceReference.rotation, Quaternion.Euler(target), transitionSpeed * Time.smoothDeltaTime);

                                break;
                        }
                    }
                    else
                    {
                        switch (transitionType)
                        {
                            case UITransitionType.Translate:

                                if (transitionState != UITransitionStateType.None)
                                {
                                    switch (transitionState)
                                    {
                                        case UITransitionStateType.Once:

                                            GetTransitionableUISource().SetWidgetPosition(GetTarget());
                                            SetCanTransition(false);
                                            UnSubscribedFromEvents();

                                            break;

                                        case UITransitionStateType.Repeat:

                                            SetTarget(GetSourceOrigin());
                                            SetSourceOrigin(GetTransitionableUISource().GetWidgetPosition());

                                            break;
                                    }
                                }
                                else
                                    throw new Exception("Transition Failed : Transition State Is Set To Default : NONE.");

                                break;

                            case UITransitionType.Scale:

                                switch (transitionState)
                                {
                                    case UITransitionStateType.Once:

                                        GetTransitionableUISource().SetWidgetScale(GetTarget());
                                        SetCanTransition(false);
                                        UnSubscribedFromEvents();

                                        break;

                                    case UITransitionStateType.Repeat:

                                        SetTarget(GetSourceOrigin());
                                        SetSourceOrigin(GetTransitionableUISource().GetWidgetScale());

                                        break;
                                }

                                break;

                            case UITransitionType.Rotate:

                                switch (transitionState)
                                {
                                    case UITransitionStateType.Once:

                                        GetTransitionableUISource().SetWidgetRotation(GetTarget());
                                        SetCanTransition(false);
                                        UnSubscribedFromEvents();

                                        break;

                                    case UITransitionStateType.Repeat:

                                        SetTarget(GetSourceOrigin());
                                        SetSourceOrigin(GetTransitionableUISource().GetWidgetRotationAngle());

                                        break;
                                }

                                break;
                        }
                    }
                }
                else
                    Log(initializationTaskCallback.GetResultCode, initializationTaskCallback.GetResult, this);
            }

            public void OnEnabled()
            {

            }


            public async void OnDisabled()
            {
                var cancelTransitionTaskResultsCallback = await CancelTransitionAsync();

                if (cancelTransitionTaskResultsCallback.UnSuccessful())
                    Log(cancelTransitionTaskResultsCallback.GetResultCode, cancelTransitionTaskResultsCallback.GetResult, this);
            }

            #endregion

            #region Setters

            public void SetTransitionableUIName(string name) => this.name = name;

            public void SetTransitionableUISource(RectTransform transitionable) => this.transitionableUISourceReference = transitionable;
            public void SetTransitionableUISource(Transform transitionable) => this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();
            public void SetTransitionableUISource(GameObject transitionable) => this.transitionableUISourceReference = transitionable.GetComponent<RectTransform>();

            public void SetTarget(Vector3 target)
            {
                this.target = target;

                if (transitionState == UITransitionStateType.Repeat)
                    targetOrigin = this.target;
            }

            public void SetTarget(RectTransform target)
            {
                if (transitionType != UITransitionType.None)
                {
                    switch (transitionType)
                    {
                        case UITransitionType.Translate:

                            this.target = target.anchoredPosition;

                            break;

                        case UITransitionType.Scale:

                            this.target = target.sizeDelta;

                            break;

                        case UITransitionType.Rotate:

                            this.target = target.localEulerAngles;

                            break;
                    }

                    if (transitionState == UITransitionStateType.Repeat)
                        targetOrigin = this.target;
                }
                else
                    throw new ArgumentException("Set Target Failed : Transition Type Is Set To Default : NONE.");
            }

            public void SetTarget(Transform target)
            {
                if (transitionType != UITransitionType.None)
                {
                    switch (transitionType)
                    {
                        case UITransitionType.Translate:

                            this.target = target.GetComponent<RectTransform>().anchoredPosition;

                            break;

                        case UITransitionType.Scale:

                            this.target = target.GetComponent<RectTransform>().sizeDelta;

                            break;

                        case UITransitionType.Rotate:

                            this.target = target.localEulerAngles;

                            break;
                    }

                    if(transitionState == UITransitionStateType.Repeat)
                        targetOrigin = this.target;
                }
                else
                    throw new ArgumentException("Set Target Failed : Transition Type Is Set To Default : NONE.");
            }

            public void SetTarget(GameObject target)
            {
                if (transitionType != UITransitionType.None)
                {
                    switch (transitionType)
                    {
                        case UITransitionType.Translate:

                            this.target = target.GetComponent<RectTransform>().anchoredPosition;

                            break;

                        case UITransitionType.Scale:

                            this.target = target.GetComponent<RectTransform>().sizeDelta;

                            break;

                        case UITransitionType.Rotate:

                            this.target = target.transform.localEulerAngles;

                            break;
                    }

                    if (transitionState == UITransitionStateType.Repeat)
                        targetOrigin = this.target;
                }
                else
                    throw new ArgumentException("Set Target Failed : Transition Type Is Set To Default : NONE.");
            }

            public void SetTransitionSpeed(float transitionSpeed) => this.transitionSpeed = transitionSpeed;

            public void SetTransitionType(UITransitionType transitionType) => this.transitionType = transitionType;
            public void SetTransitionStateType(UITransitionStateType transitionState) => this.transitionState = transitionState;

            public void SetSourceOrigin(Vector3 sourceOrigin) => this.sourceOrigin = sourceOrigin;

            public void SetTargetOrigin(Vector3 targetOrigin) => this.targetOrigin = targetOrigin;

            public void SetSourceValue(Vector3 sourceValue)
            {
                Initialized(initializationCallback => 
                {
                    if(initializationCallback.Success())
                    {
                        switch(transitionType)
                        {
                            case UITransitionType.Translate:

                                transitionableUISourceReference.anchoredPosition = sourceValue;

                                break;

                            case UITransitionType.Scale:

                                transitionableUISourceReference.sizeDelta = sourceValue;

                                break;

                            case UITransitionType.Rotate:

                                transitionableUISourceReference.localEulerAngles = sourceValue;

                                break;
                        }
                    }
                });
            }

            void SetCanTransition(bool canTransitionUI) => this.canTransitionUI = canTransitionUI;

            void SubscribedToEvents() => subscribedToEvents = true;

            void UnSubscribedFromEvents() => subscribedToEvents = false;

            void SubscribeToEvents()
            {
                ActionEvents._Update += ActionEvents__Update;
                SubscribedToEvents();
            }
            void UnSubscribeFromEvents()
            {
                ActionEvents._Update -= ActionEvents__Update;
                UnSubscribeFromEvents();
            }

            #endregion

            #region Getters

            public string GetName() => (!string.IsNullOrEmpty(name))? name : $"Transitionable UI Name Not Assigned";

            public RectTransform GetTransitionableUISource() => transitionableUISourceReference;

            public Vector3 GetSource()
            {
                if (transitionType != UITransitionType.None)
                {
                    var souceVector = Vector3.zero;

                    switch (transitionType)
                    {
                        case UITransitionType.Translate:

                            souceVector = transitionableUISourceReference.anchoredPosition;

                            break;

                        case UITransitionType.Scale:

                            souceVector = transitionableUISourceReference.sizeDelta;

                            break;

                        case UITransitionType.Rotate:

                            souceVector = transitionableUISourceReference.localEulerAngles;

                            break;
                    }

                    return souceVector;
                }
                else
                    throw new ArgumentException("Set Target Failed : Transition Type Is Set To Default : NONE.");
            }

            public Vector3 GetSourceOrigin() => sourceOrigin;

            public Vector3 GetTarget() => target;

            public Vector3 GetTargetOrigin() => targetOrigin;

            public float GetTransitionSpeed() => (transitionSpeed * Time.smoothDeltaTime);
            public float GetTransitionDistanceInMagnitude() => transitionDistanceInMagnitude;

            private Callback GetCanTransition()
            {
                Callback callbackResults = new Callback();

                if(canTransitionUI)
                {
                    callbackResults.result = $"Can Transition UI : {GetName()}";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Can Not Transition UI : {GetName()}";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            private Callback IsSubscribedToEvents()
            {
                Callback callbackResults = new Callback();

                if(subscribedToEvents)
                {
                    callbackResults.result = $"Transitionable UI : {GetName()} Has Been Subscribed To The Updates Events.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Transitionable UI : {GetName()} Is Not Subscribed To Events.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public CallbackData<UITransitionType> GetTransitionType()
            {
                CallbackData<UITransitionType> callbackResults = new CallbackData<UITransitionType>();

                if (transitionType != UITransitionType.None)
                {
                    callbackResults.result = $"Transitionable UI : {GetName()}'s Transition Type Has Been Successfully Set To : {transitionType}";
                    callbackResults.data = transitionType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Transitionable UI : {GetName()}'s Transition Type Is Set To Default : {transitionType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public CallbackData<UITransitionStateType> GetTransitionStateType()
            {
                CallbackData<UITransitionStateType> callbackResults = new CallbackData<UITransitionStateType>();

                if(transitionState != UITransitionStateType.None)
                {
                    callbackResults.result = $"Transitionable UI : {GetName()}'s Transition State Has Been Successfully Set To : {transitionState}";
                    callbackResults.data = transitionState;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Transitionable UI : {GetName()}'s Transition State Is Set To Default : {transitionState}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public async void Initialized(Action<Callback> callback)
            {
                var initializationTaskResults = await Initialized();
                callback.Invoke(initializationTaskResults);
            }

            public async Task<Callback> Initialized()
            {
                Callback callbackResults = new Callback();

                await Task.Yield();

                if (this != null && GetTransitionableUISource().AssignedAndValid() && GetTransitionType().Success() && GetTransitionStateType().Success() && GetTransitionSpeed() > 0.0f)
                {
                    callbackResults.result = "UI Transitionable Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"UI Transitionable Has Not Been Initialized Yet - Type Results : {GetTransitionType().GetResult} - State Results : {GetTransitionStateType().GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            private Callback InTransition(Vector2 source, Vector2 target, Vector2 startDistance, float distanceInMagnitude)
            {
                Callback callbackResults = new Callback(GetCanTransition());

                if (callbackResults.Success())
                {
                    if ((source - target).magnitude <= distanceInMagnitude || (source - startDistance).magnitude <= distanceInMagnitude)
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Is Not In Transition";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                    else
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Is In Transition.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }

                return callbackResults;
            }

            public async Task<Callback> Completed()
            {
                Callback callbackResults = new Callback();

                var initializationTaskResults = await Initialized();

                callbackResults.SetResult(initializationTaskResults);

                if (callbackResults.Success())
                {
                    switch (transitionType)
                    {
                        case UITransitionType.Translate:

                            callbackResults.SetResult(InTransition(GetTransitionableUISource().GetWidgetPosition(), GetTarget(), GetSourceOrigin(), GetTransitionDistanceInMagnitude()));

                            break;

                        case UITransitionType.Scale:

                            callbackResults.SetResult(InTransition(GetTransitionableUISource().GetWidgetScale(), GetTarget(), GetSourceOrigin(), GetTransitionDistanceInMagnitude()));

                            break;

                        case UITransitionType.Rotate:

                            callbackResults.SetResult(InTransition(GetTransitionableUISource().GetWidgetRotationAngle(), GetTarget(), GetSourceOrigin(), GetTransitionDistanceInMagnitude()));

                            break;
                    }

                    if (callbackResults.UnSuccessful() && GetCanTransition().UnSuccessful() && IsSubscribedToEvents().UnSuccessful())
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Of Type : {transitionType} - State : {transitionState} - Transition Completed.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Of Type : {transitionType} - State : {transitionState} - Is Still In Progress.";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            public async Task<Callback> InProgress()
            {
                Callback callbackResults = new Callback();

                var initializationTaskResults = await Initialized();

                callbackResults.SetResult(initializationTaskResults);

                if (callbackResults.Success())
                {
                    var completedTaskResults = await Completed();

                    callbackResults.SetResult(completedTaskResults);

                    if (callbackResults.UnSuccessful())
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Transition In Progress - Results : {callbackResults.GetResult}.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Transition Has Completed - Results : {callbackResults.GetResult}.";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            #endregion

            #region Actions

            public async Task<Callback> InvokeTransitionAsync()
            {
                Callback callbackResults = new Callback();

                var initializationTaskResults = await Initialized();

                callbackResults.SetResult(initializationTaskResults);

                if (callbackResults.Success())
                {
                    var progressCheckTaskResults = await InProgress();

                    callbackResults.SetResult(progressCheckTaskResults);

                    LogInfo($" ______________________++++++++++ Transitionable UI : {GetTransitionType().GetData()} - Invoed Here - Code : {callbackResults.GetResultCode} - Results : {callbackResults.GetResult} - Pos : {GetTransitionableUISource().GetWidgetPosition()} - Target : {GetTarget()} .", this);

                    if (callbackResults.UnSuccessful())
                    {
                        if (transitionState == UITransitionStateType.Repeat)
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    if ((Vector2)sourceOrigin != GetTransitionableUISource().GetWidgetPosition())
                                        SetSourceOrigin(GetTransitionableUISource().GetWidgetPosition());

                                    break;

                                case UITransitionType.Scale:

                                    if ((Vector2)sourceOrigin != GetTransitionableUISource().GetWidgetScale())
                                        SetSourceOrigin(GetTransitionableUISource().GetWidgetScale());

                                    break;

                                case UITransitionType.Rotate:

                                    if (sourceOrigin != GetTransitionableUISource().GetWidgetRotationAngle())
                                        SetSourceOrigin(GetTransitionableUISource().GetWidgetRotationAngle());

                                    break;
                            }

                            if (targetOrigin != target)
                                SetTargetOrigin(target);
                        }

                        SubscribeToEvents();
                        SetCanTransition(true);

                        await Task.Yield();

                        var progressStartedTaskResults = await InProgress();
                        callbackResults.SetResult(progressStartedTaskResults);

                        LogInfo($" ______________________++++++++++++++ Start Progress - Code : {callbackResults.GetResultCode} - Results : {callbackResults.GetResult}.", this);
                    }
                    else
                    {
                        callbackResults.result = $"Transitionable UI : {GetName()} Is Already In Progress - Result Code : {callbackResults.GetResultCode} - Results : {callbackResults.GetResult}.";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            public void RestartTransition(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                Initialized(async initializationCallbackResults =>
                {
                    callbackResults.SetResult(initializationCallbackResults);

                    if (callbackResults.Success())
                    {
                        var progressStartedTaskResults = await InProgress();
                        callbackResults.SetResult(progressStartedTaskResults);

                        if (callbackResults.Success())
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    if (transitionableUISourceReference.GetWidgetPosition() != (Vector2)GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetPosition() == (Vector2)GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Translate State Transition : {name} Has Been Restarted Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;

                                case UITransitionType.Scale:

                                    if (transitionableUISourceReference.GetWidgetScale() != (Vector2)GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetScale() == (Vector2)GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Scale State Transition : {name} Has Been Restarted Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;

                                case UITransitionType.Rotate:

                                    if (transitionableUISourceReference.GetWidgetRotationAngle() != GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetRotationAngle() == GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Rotation State Transition : {name} Has Been Restarted Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Transition : {name} - There Are Possibly Components Missing.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            public async Task<Callback> CancelTransitionAsync()
            {
                Callback callbackResults = new Callback();

                var initializationTaskResults = await Initialized();

                callbackResults.SetResult(initializationTaskResults);

                if (callbackResults.Success())
                {
                    SetCanTransition(false);

                    callbackResults.SetResult(GetCanTransition());

                    if(callbackResults.Success())
                    {
                        await Task.Yield();
                        UnSubscribedFromEvents();
                    }
                }

                return callbackResults;
            }

            public void CancelTransition(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                SetCanTransition(false);
                UnSubscribeFromEvents();

                callbackResults.resultCode = Helpers.SuccessCode;

                Initialized(async initializationCallbackResults =>
                {
                    callbackResults.SetResult(initializationCallbackResults);

                    if (callbackResults.Success())
                    {
                        var inProgressTaskResults = await InProgress();

                        callbackResults.SetResult(inProgressTaskResults);

                        if (callbackResults.Success())
                        {
                            switch (transitionType)
                            {
                                case UITransitionType.Translate:

                                    if (transitionableUISourceReference.GetWidgetPosition() != (Vector2)GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetPosition() == (Vector2)GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Translate State Transition : {name} Has Been Cancelled Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;

                                case UITransitionType.Scale:

                                    if (transitionableUISourceReference.GetWidgetScale() != (Vector2)GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetScale() == (Vector2)GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Scale State Transition : {name} Has Been Cancelled Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;

                                case UITransitionType.Rotate:

                                    if (transitionableUISourceReference.GetWidgetRotationAngle() != GetSourceOrigin())
                                        SetSourceValue(GetSourceOrigin());

                                    await Task.Yield();

                                    if (transitionableUISourceReference.GetWidgetRotationAngle() == GetSourceOrigin())
                                    {
                                        callbackResults.result = $"Rotation State Transition : {name} Has Been Cancelled Successfully.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }

                                    break;
                            }

                            SetCanTransition(false);
                            UnSubscribeFromEvents();

                            var inProgressVarificationTaskResults = await InProgress();

                            callbackResults.SetResult(inProgressVarificationTaskResults);

                            await Task.Yield();

                            if (callbackResults.UnSuccessful())
                            {
                                callbackResults.result = $"Transition : {GetName()} - Has Been Cancelled Successfully.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"Failed To Cancel Transition : {GetName()} - Please Check Here.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Transition : {GetName()} - There Are Possibly Components Missing.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                });

                callback?.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class TimedEventComponent
        {
            #region Components

            public string name;

            public float intervalLength;

            private Action triggerEventAction;
            private bool isRunning = false;

            private float elapsedTime;

            #endregion

            #region Main

            #region Constructors

            public TimedEventComponent()
            {

            }

            public TimedEventComponent(string name, float intervalLength, Action triggerEventAction)
            {
                this.name = name;
                this.intervalLength = intervalLength;
                this.triggerEventAction = triggerEventAction;
            }

            #endregion

            #region Events

            private void ActionEvents__Update()
            {
                if(isRunning)
                {
                    if(GetElapsedTime() > 0)
                        elapsedTime -= 1 * Time.deltaTime;
                    else
                    {
                        TriggerEvent();
                        SetElpasedTime(GetIntervalLength());
                    }
                }
            }

            public void OnEnabled()
            {

            }

            public void OnDisabled() => Stop();

            #endregion

            #region Data Setters

            public void SetIntervalLength(float intervalLength) => this.intervalLength = intervalLength;
            public void SetTriggerEventAction(Action triggerEventAction) => this.triggerEventAction = triggerEventAction;
            public void SetElpasedTime(float elapsedTime) => this.elapsedTime = elapsedTime;

            #endregion

            #region Data Getters

            public string GetName() => (!string.IsNullOrEmpty(name)) ? name : "Timed Event Component Name Is Not Assigned.";

            public float GetIntervalLength() => intervalLength;
            public Action GetTriggerEventAction() => triggerEventAction;
            public float GetElapsedTime() => elapsedTime;

            #endregion

            public async Task<Callback> Initialized()
            {
                Callback callbackResults = new Callback();

                await Task.Yield();

                if (this != null && GetIntervalLength() > 0.0f)
                {
                    callbackResults.result = $"Timed Event Component : {GetName()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Timed Event Component : {GetName()} - Is Not Yet Initialized.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void Start()
            {
                SetElpasedTime(GetIntervalLength());

                ActionEvents._Update += ActionEvents__Update;
                isRunning = true;
            }

            public void Stop()
            {
                isRunning = false;
                ActionEvents._Update -= ActionEvents__Update;
            }

            void TriggerEvent() => GetTriggerEventAction().Invoke();

            #endregion
        }

        [Serializable]
        public class DataPacket
        {
            #region Components

            public string name;

            [Space(5)]
            public ScreenConfigDataPacket screenConfigDataPacket;

            [Space(5)]
            public WidgetConfigDataPacket widgetConfigDataPacket;

            #endregion

            #region Main

            public void SetName(string name) => this.name = name;

            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Data Packet Name Not Assigned.";

            public CallbackData<ScreenConfigDataPacket> GetScreenConfigDataPacket()
            {
                var callbackResults = new CallbackData<ScreenConfigDataPacket>(screenConfigDataPacket.Initialized());

                if (callbackResults.Success())
                    callbackResults.data = screenConfigDataPacket;

                return callbackResults;
            }

            public CallbackData<WidgetConfigDataPacket> GetWidgetConfigDataPacket()
            {
                var callbackResults = new CallbackData<WidgetConfigDataPacket>(widgetConfigDataPacket.Initialized());

                if (callbackResults.Success())
                    callbackResults.data = widgetConfigDataPacket;

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class DataPacketsLibrary
        {
            #region Components

            public List<DataPacket> dataPacketsCollection = new List<DataPacket>();

            #endregion

            #region Main

            public DataPacketsLibrary()
            {

            }

            public void GetDataPacket(ScreenType screenType, Action<CallbackData<DataPacket>> callback)
            {
                CallbackData<DataPacket> callbackResults = new CallbackData<DataPacket>();

                if (dataPacketsCollection != null && dataPacketsCollection.Count > 0)
                {
                    var dataPacket = dataPacketsCollection.Find(dataPacket => dataPacket.GetScreenConfigDataPacket().GetData().GetType().GetData() == screenType);

                    if(dataPacket != null)
                    {
                        callbackResults.result = $"Found Data Packet For : {screenType} In Data Packets Collection.";
                        callbackResults.data = dataPacket;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Data Packet For : {screenType} In Data Packets Collection.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Data Packets Found - Data Packets Collection Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void GetDataPacket(WidgetType widgetType, Action<CallbackData<DataPacket>> callback)
            {
                CallbackData<DataPacket> callbackResults = new CallbackData<DataPacket>();

                if (dataPacketsCollection != null && dataPacketsCollection.Count > 0)
                {
                    var dataPacket = dataPacketsCollection.Find(x => x.widgetConfigDataPacket.GetType().GetData() == widgetType);

                    if (dataPacket != null)
                    {
                        callbackResults.result = $"Found Data Packet For : {widgetType} In Data Packets Collection.";
                        callbackResults.data = dataPacket;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Data Packet For : {widgetType} In Data Packets Collection.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Data Packets Found - Data Packets Collection Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void AddDataPacket(DataPacket dataPacket, Action<CallbackData<DataPacket>> callback = null)
            {
                CallbackData<DataPacket> callbackResults = new CallbackData<DataPacket>();

                if (dataPacketsCollection != null && dataPacketsCollection.Count > 0)
                {
                    if (!dataPacketsCollection.Contains(dataPacket))
                    {
                        dataPacketsCollection.Add(dataPacket);

                        callbackResults.result = $"Data Packet : {dataPacket.name} Added To Data Packets Collection.";
                        callbackResults.data = dataPacket;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Data Packet : {dataPacket.name} Already Exists In Data Packets Collection.";
                        callbackResults.data = dataPacket;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "There Are No Data Packets Found - Data Packets Collection Is Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class SceneAssetLibrary 
        {
            #region Components

            public Dictionary<string, SceneAsset> sceneAssetsDictionary;
            public Dictionary<string, Sprite> imageAssetsDictionary;

            List<ColorSwatch> colorSwatchLibrary = new List<ColorSwatch>();

            [Space(5)]
            [SerializeField]
            UIScreenWidgetsPrefabDataLibrary screenWidgetPrefabLibrary = new UIScreenWidgetsPrefabDataLibrary();

            [Space(5)]
            [SerializeField]
            List<UIImageData> imageDataLibrary = new List<UIImageData>();

            #endregion

            #region Main

            public void InitializeLibrary(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                sceneAssetsDictionary = new Dictionary<string, SceneAsset>();
                imageAssetsDictionary = new Dictionary<string, Sprite>();

                callbackResults.resultCode = Helpers.SuccessCode;

                //Helpers.ProjectDataComponentValid(screenWidgetPrefabLibrary.screenWidgetPrefabDataList, dataValidCallbackResults =>
                //{
                //    callbackResults.results = dataValidCallbackResults.results;
                //    callbackResults.resultsCode = dataValidCallbackResults.resultsCode;

                //    if (!callbackResults.Success())
                //        callback?.Invoke(callbackResults);
                //});

                //Helpers.ProjectDataComponentValid(imageDataLibrary, imageDataValidCallbackResults =>
                //{
                //    callbackResults.results = imageDataValidCallbackResults.results;
                //    callbackResults.resultsCode = imageDataValidCallbackResults.resultsCode;

                //    if (!callbackResults.Success())
                //        callback?.Invoke(callbackResults);
                //});

                callback?.Invoke(callbackResults);
            }

            public void AddSceneAssetObjectToLibrary(string assetName, SceneAsset sceneAsset)
            {
                if (!sceneAssetsDictionary.ContainsKey(assetName))
                    sceneAssetsDictionary.Add(assetName, sceneAsset);
                else
                    Debug.LogWarning($"--> Scene Asset : {assetName} Already Exist In The Library.");
            }

            public void AddSceneAssetObjectToLibrary(SceneAsset sceneAsset)
            {
                if (!sceneAssetsDictionary.ContainsValue(sceneAsset))
                    sceneAssetsDictionary.Add(sceneAsset.name, sceneAsset);
                else
                    Debug.LogWarning($"--> Scene Asset : {sceneAsset.name} Already Exist In The Library.");
            }

            public void RemoveSceneAssetFromLibrary(string assetName)
            {
                if (sceneAssetsDictionary.ContainsKey(assetName))
                    sceneAssetsDictionary.Remove(assetName);
                else
                    Debug.LogWarning($"--> Scene Asset : {assetName} Doesn't Exist In The Library.");
            }

            public void AddImageAsset(Sprite imageAsset, string assetPath)
            {
                if (!imageAssetsDictionary.ContainsKey(assetPath))
                    imageAssetsDictionary.Add(assetPath, imageAsset);
                else
                    Debug.LogWarning($"--> Image Asset From Path : {assetPath} Already Exist In The Library.");
            }


            public void RemoveImageeAssetFromLibrary(string assetPath)
            {
                if (imageAssetsDictionary.ContainsKey(assetPath))
                    imageAssetsDictionary.Remove(assetPath);
                else
                    Debug.LogWarning($"--> Image Asset From Path : {assetPath} Doesn't Exist In The Library.");
            }

            public Sprite GetImageAsset(string assetPath)
            {
                if (imageAssetsDictionary.ContainsKey(assetPath))
                {
                    Sprite asset;

                    imageAssetsDictionary.TryGetValue(assetPath, out asset);

                    return asset;
                }
                else
                    Debug.LogWarning($"--> Image Asset From Path : {assetPath} Doesn't Exists In The Library.");

                return null;
            }

            public Dictionary<string, Sprite> GetAllImageAssets()
            {
                return imageAssetsDictionary;
            }

            public bool HasAssets()
            {
                return sceneAssetsDictionary.Count > 0;
            }

            public Dictionary<string, SceneAsset> GetAllSceneAssets()
            {
                return sceneAssetsDictionary;
            }

            public SceneAsset GetAsset(string assetName)
            {
                if (sceneAssetsDictionary.ContainsKey(assetName))
                {
                    SceneAsset asset;

                    sceneAssetsDictionary.TryGetValue(assetName, out asset);

                    return asset;
                }
                else
                    Debug.LogWarning($"--> Scene Asset : {assetName} Doesn't Exists In The Library.");

                return null;
            }

            public SceneAsset GetAsset(SceneAsset asset)
            {
                if (sceneAssetsDictionary.ContainsKey(asset.name))
                {
                    SceneAsset sceneAsset;

                    sceneAssetsDictionary.TryGetValue(asset.name, out sceneAsset);

                    return sceneAsset;
                }
                else
                    Debug.LogWarning($"--> Scene Asset : {asset.name} Doesn't Exists In The Library.");

                return null;
            }

            public bool SceneAssetExists(string assetName)
            {
                if (sceneAssetsDictionary.ContainsKey(assetName))
                    return true;

                return false;
            }

            public bool ImageAssetExists(string assetPath)
            {
                if (imageAssetsDictionary.ContainsKey(assetPath))
                    return true;

                return false;
            }

            public bool AssetExists(SceneAsset asset)
            {
                if (sceneAssetsDictionary.ContainsValue(asset))
                    return true;

                return false;
            }

            public GameObject GetSceneAssetModel(string assetName)
            {
                if (sceneAssetsDictionary.ContainsKey(assetName))
                {
                    SceneAsset asset;

                    sceneAssetsDictionary.TryGetValue(assetName, out asset);

                    if (asset.sceneObject.value)
                        return asset.sceneObject.value;

                    if (asset.modelAsset)
                        return asset.modelAsset;


                    return asset.sceneObject.value;
                }
                else
                    Debug.LogWarning($"--> Scene Asset : {assetName} Doesn't Exists In The Library.");

                return null;
            }

            public List<GameObject> GetSceneAssetModels()
            {
                if (sceneAssetsDictionary.Count > 0)
                {
                    List<GameObject> sceneAssetModelList = new List<GameObject>();

                    foreach (var assetModel in sceneAssetModelList)
                    {
                        sceneAssetModelList.Add(assetModel);
                    }

                    if (sceneAssetModelList.Count > 0)
                        return sceneAssetModelList;
                    else
                        Debug.LogWarning("--> Failed To Get Scene Asset Models.");
                }

                Debug.LogWarning("--> Scene Assets Library Is Empty.");
                return null;
            }

            public void ClearLibrary()
            {
                sceneAssetsDictionary.Clear();
            }

            #endregion
        }

        [Serializable]
        public struct SceneAssetWidget
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public AssetCategoryType categoryType;

            [Space(5)]
            public string creationDateTime;


            #endregion

            #region Main

            public void SetVisibilityState(bool isVisible)
            {
                if (value)
                    value.SetActive(isVisible);
                else
                    Debug.LogWarning($"--> Value For : {value} Missing / Not Assigned.");
            }

            public void SetAssetListIndex(int index, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (value)
                {
                    value.transform.SetSiblingIndex(index);

                    callbackResults.result = $"Asset : {value.name} Has Been Set To index : {index}.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Set Asset List Index Value For : {value} Missing / Not Assigned.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public DateTime GetModifiedDateTime()
            {
                DateTime dateTime = DateTime.Parse(creationDateTime);

                return dateTime;
            }

            #endregion
        }

        #region Callback Class

        public abstract class CallbackResultInfo : DataDebugger
        {
            #region Components

            public LogInfoChannel resultCode;
            public string result;
            public string resultClass;
            protected bool hasResultsData = false;

            public string Name => name ?? "Callback Name Not Assigned";

            #endregion

            #region Main

            #region Results

            #region Abstract Functions

            public abstract bool Success();
            public abstract bool UnSuccessful();

            public abstract bool Error();
            public abstract bool Warning();

            #endregion

            public void SetResult(Callback callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void LogResult() => Log(GetResultCode, GetResult, GetClassInfo ?? this.name);

            #endregion

            #region Data Getters

            public string GetName => Name;

            public string GetResult { get { return result; } protected set { } }

            public LogInfoChannel GetResultCode { get { return resultCode; } protected set { } }

            #endregion

            #region Class Info Initialization

            public void SetUnityClassInfo<T>(T classInfo) where T : UnityEngine.Object => resultClass = classInfo.name;
            public void SetAppClassInfo<T>(T classInfo) where T : AppMonoBaseClass => resultClass = classInfo.name;
            public void SetDebuggerClassInfo<T>(T classInfo) where T : DataDebugger => resultClass = classInfo.name;

            public string GetClassInfo => resultClass;

            #endregion

            #endregion

        }

        public class Callback : CallbackResultInfo
        {
            #region Main

            #region Constructors

            public Callback()
            {

            }

            public Callback(string name, string results, LogInfoChannel resultsCode)
            {
                this.name = name;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public Callback(string name, string results, LogInfoChannel resultsCode, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public Callback(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            public override bool Success() => Helpers.IsSuccessCode(GetResultCode);

            public override bool UnSuccessful() => !Success();

            public override bool Error() => Helpers.IsErrorCode(GetResultCode);
            public override bool Warning() => Helpers.IsErrorCode(GetResultCode);

            //protected bool HasResultsData() => hasResultsData;

            //protected void SetHasResultsData() => hasResultsData = true;

            public static implicit operator Action<object>(Callback v)
            {
                throw new NotImplementedException();
            }

            #region Callbacks Results

            #region Callback Results Setters

            public void SetResults<T>(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetResults<T>(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetResults<T>(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetResults<T>(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetResults<T>(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetResults<T,U>(CallbackTuple<T,U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion

            #region Parameter Results

            public void SetResults(string results = null, LogInfoChannel resultsCode = LogInfoChannel.Debug, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            #endregion

            #region Callback Getters

            public (string results, LogInfoChannel resultsCode) GetCallbackResultsTupil()
            {
                return (this.result, this.resultCode);
            }

            public Callback CallbackResults { get { return this; } protected set { } }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackData<T> : Callback
        {
            #region Components
           
            public T data;

            #endregion

            #region Main

            #region Constructors

            public CallbackData()
            {

            }

            public CallbackData(string name, T data, string results, LogInfoChannel resultsCode)
            {
                this.name = name;
                this.data = data;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public CallbackData(string name, T data, string results, LogInfoChannel resultsCode, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackData(T data, string results = null, LogInfoChannel resultsCode = LogInfoChannel.All, string classInfo = null)
            {
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackData(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }


            public CallbackData(CallbackData<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                data = callbackResults.Data;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackData(CallbackDataList<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackData(CallbackDataArray<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackData(CallbackDataQueue<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            #region Data Getters

            public T GetData()
            {
                if(data != null)
                    return data;
                else
                {
                    SetResults($"Call back Get Data failed - {GetName} Data Is Not Yet Assigned But You Are trying To Access It From Class {GetClassInfo}", Helpers.ErrorCode);
                    Log(GetResultCode, GetResult, this);

                    throw new NullReferenceException(message: $"Get Callback Data Failed With Code : {GetResultCode} And Result Message : {GetResult}");
                }
            }

            public T Data => GetData();

            #endregion

            #region Data Setters

            public void SetData(T data) => this.data = data;

            #endregion

            #region Callbacks Results

            #region Callback Results Setters

            public void SetResultsData(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(callbackResults.data);
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults<U>(CallbackTuple<T, U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion

            #region Callback Getters

            public (string results, T data, LogInfoChannel resultsCode) GetCallbackDataResultsTupil()
            {
                return (result, data, resultCode);
            }

            #endregion

            #region Results

            #endregion

            #region Parameter Assignable Results

            public void SetResults(string results = null, LogInfoChannel resultCode = LogInfoChannel.None, T data = default, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultClass = classInfo;

                if (resultCode != LogInfoChannel.None)
                    this.resultCode = resultCode;
            }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackDataList<T> : Callback
        {
            #region Components

            public List<T> data = new List<T>();

            #endregion

            #region Main

            #region Constructors

            public CallbackDataList()
            {

            }

            public CallbackDataList(string name, List<T> data, string results, LogInfoChannel resultsCode)
            {
                this.name = name;
                this.data = data;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public CallbackDataList(string name, List<T> data, string results, LogInfoChannel resultsCode, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackDataList(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }


            public CallbackDataList(CallbackData<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataList(CallbackDataList<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                data = callbackResults?.Data;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataList(CallbackDataArray<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataList(CallbackDataQueue<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            #region Data Getters

            public List<T> GetData()
            {
                if (data != null && data.Count > 0)
                    return data;
                else
                {
                    SetResults($"Call back Get Data failed - {GetName} Data Is Not Yet Assigned But You Are trying To Access It From Class {GetClassInfo}", Helpers.ErrorCode);
                    Log(GetResultCode, GetResult, this);

                    throw new NullReferenceException(message: $"Get Callback Data Failed With Code : {GetResultCode} And Result Message : {GetResult}");
                }
            }

            public List<T> Data => GetData();

            #endregion

            #region Data Setters

            public CallbackDataList(List<T> data) => this.data = data;

            public void SetData(List<T> data) => this.data = data;

            #endregion

            #region Callbacks Results

            #region Callback Results Setters

            public void SetDataResults(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;              
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(callbackResults.data);
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetList(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetList(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults<U>(CallbackTuple<T, U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion


            #region Parameter Assignable Results

            public void SetResults(string results = null, LogInfoChannel resultsCode = LogInfoChannel.Debug, List<T> data = default, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackDataArray<T> : Callback
        {
            #region Components

            public T[] data;

            #endregion

            #region Main

            #region Constructors

            public CallbackDataArray()
            {

            }

            public CallbackDataArray(string name, T[] data, string results, LogInfoChannel resultsCode)
            {
                this.name = name;
                this.data = data;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public CallbackDataArray(string name, T[] data, string results, LogInfoChannel resultsCode, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackDataArray(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataArray(CallbackData<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataArray(CallbackDataList<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataArray(CallbackDataArray<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                data = callbackResults.GetData();
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataArray(CallbackDataQueue<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            #region Data Getters

            public T[] GetData()
            {
                if (data != null && data.Length > 0)
                    return data;
                else
                {
                    SetResults($"Call back Get Data failed - {GetName} Data Is Not Yet Assigned But You Are trying To Access It From Class {GetClassInfo}", Helpers.ErrorCode);
                    Log(GetResultCode, GetResult, this);

                    throw new NullReferenceException(message: $"Get Callback Data Failed With Code : {GetResultCode} And Result Message : {GetResult}");
                }
            }

            public T[] Data => GetData();

            #endregion

            #region Data Setters

            public void SetData(T[] data) => this.data = data;

            #endregion


            #region Callbacks Results

            #region Callback Results Setters

            public void SetDataResults(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetArray(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(callbackResults.data);
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetArray(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults<U>(CallbackTuple<T, U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion

            #region Parameter Assignable Results

            public void SetResults(string results = null, LogInfoChannel resultsCode = LogInfoChannel.Debug, T[] data = default, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackDataQueue<T> : Callback
        {
            #region Components

            public Queue<T> data = new Queue<T>();

            #endregion

            #region Main

            #region Constructors

            public CallbackDataQueue()
            {

            }

            public CallbackDataQueue(string name, Queue<T> data, string results, LogInfoChannel resultsCode)
            {
                this.name = name;
                this.data = data;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public CallbackDataQueue(string name, Queue<T> data, string results, LogInfoChannel resultsCode, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackDataQueue(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }


            public CallbackDataQueue(CallbackData<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataQueue(CallbackDataList<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataQueue(CallbackDataArray<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackDataQueue(CallbackDataQueue<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                data = callbackResults.Data;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            #region Data Getters

            public Queue<T> GetData()
            {
                if (data != null && data.Count > 0)
                    return data;
                else
                {
                    SetResults($"Call back Get Data failed - {GetName} Data Is Not Yet Assigned But You Are trying To Access It From Class {GetClassInfo}", Helpers.ErrorCode);
                    Log(GetResultCode, GetResult, this);

                    throw new NullReferenceException(message: $"Get Callback Data Failed With Code : {GetResultCode} And Result Message : {GetResult}");
                }
            }

            public Queue<T> Data => GetData();

            #endregion

            #region Data Setters

            public CallbackDataQueue(Queue<T> data) => this.data = data;

            public void SetData(Queue<T> data) => this.data = data;

            #endregion

            public void SetResults(string results = null, LogInfoChannel resultsCode = LogInfoChannel.Debug, Queue<T> data = default, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            #region Callbacks Results

            #region Callback Results Setters

            public void SetDataResults(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetQueue(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetQueue(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(callbackResults.data);
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults<U>(CallbackTuple<T, U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackParams<T> : Callback
        {
            #region Components

            public T[] data;

            #endregion

            #region Main

            #region Constructors

            public CallbackParams()
            {

            }

            public CallbackParams(string name, string results, LogInfoChannel resultsCode, params T[] data)
            {
                this.name = name;
                this.data = data;
                this.result = results;
                this.resultCode = resultsCode;
            }

            public CallbackParams(string name, string results, LogInfoChannel resultsCode, string classInfo = null, params T[] data)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            public CallbackParams(Callback callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackParams(CallbackData<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackParams(CallbackDataList<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackParams(CallbackDataArray<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                data = callbackResults.GetData();
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            public CallbackParams(CallbackDataQueue<T> callbackResults)
            {
                name = callbackResults.GetName;
                result = callbackResults.GetResult;
                resultCode = callbackResults.GetResultCode;
                resultClass = callbackResults.GetClassInfo;
            }

            #endregion

            #region Data Getters

            public T[] GetData()
            {
                if (data != null && data.Length > 0)
                    return data;
                else
                {
                    SetResults($"Call back Get Data failed - {GetName} Data Is Not Yet Assigned But You Are trying To Access It From Class {GetClassInfo}", Helpers.ErrorCode);
                    Log(GetResultCode, GetResult, this);

                    throw new NullReferenceException(message: $"Get Callback Data Failed With Code : {GetResultCode} And Result Message : {GetResult}");
                }
            }

            public T[] Data => GetData();

            #endregion

            #region Data Setters

            public void SetData(params T[] data) => this.data = data;

            #endregion


            #region Callbacks Results

            #region Callback Results Setters

            public void SetDataResults(CallbackData<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataList<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetArray(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataArray<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(callbackResults.data);
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackDataQueue<T> callbackResults)
            {
                result = callbackResults.result;
                SetData(Helpers.GetArray(callbackResults.data));
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults(CallbackSizeDataTuple<T> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            public void SetDataResults<U>(CallbackTuple<T, U> callbackResults)
            {
                result = callbackResults.result;
                resultCode = callbackResults.resultCode;
            }

            #endregion

            #region Parameter Assignable Results

            public void SetResults(string results = null, LogInfoChannel resultsCode = LogInfoChannel.Debug, T[] data = default, string name = null, string classInfo = null)
            {
                this.name = name;
                this.result = results;
                this.data = data;
                this.resultCode = resultsCode;
                this.resultClass = classInfo;
            }

            #endregion

            #endregion

            #endregion
        }

        public class CallbackTuple<T, U> : Callback
        {
            #region Components

            public List<T> tuple_A;
            public List<U> tuple_B;

            #endregion
        }

        public class CallbackTuple<T, U, V> : Callback
        {
            #region Components

            public List<T> tuple_A;
            public List<U> tuple_B;
            public List<V> tuple_C;

            #endregion
        }

        public class CallbackSizeDataTuple<T, U, V> : Callback
        {
            #region Components

            public List<T> tuple_A;
            public List<U> tuple_B;

            public V tuple_C;

            #endregion
        }

        public class CallbackSizeDataTuple<T> : Callback
        {
            #region Components

            public List<T> tuple_A;
            public List<T> tuple_B;

            public int size;

            #endregion
        }

        public class CallbackSizeDataTuple<T, U> : Callback
        {
            #region Components

            public List<T> tuple_A;
            public List<U> tuple_B;
            public int size;

            #endregion
        }

        #endregion

        #region Tutorials

        [Serializable]
        public class TutorialInfoView
        {
            #region Components

            public string name;

            [Space(5)]
            public List<TutorialInfo> tutorialInfoList = new List<TutorialInfo>();

            [Space(5)]
            public SceneDataPackets dataPackets = new SceneDataPackets();

            #endregion

            #region Main

            public void AddInfo(TutorialInfo info)
            {
                if (!tutorialInfoList.Contains(info))
                    tutorialInfoList.Add(info);
            }

            public void RemoveInfo(TutorialInfo info)
            {
                if (tutorialInfoList.Contains(info))
                    tutorialInfoList.Remove(info);
            }

            public void GetInfo(TutorialInfoType infoType, Action<CallbackData<TutorialInfo>> callback)
            {
                CallbackData<TutorialInfo> callbackResults = new CallbackData<TutorialInfo>();

                callback.Invoke(callbackResults);
            }

            public SceneDataPackets GetDataPackets()
            {
                return dataPackets;
            }

            #endregion
        }

        [Serializable]
        public class TutorialInfo
        {
            #region Components

            public string name;

            [Space(5)]
            public TutorialInfoType infoType;

            #endregion
        }

        #endregion


        [Serializable]
        public class FocusedSelectionInfoData
        {
            public string name;
            public UIScreenWidget selection;

            public InputUIState state;
            public bool showSelection;
            public bool showTint;

            public FocusedSelectionType selectionInfoType;
        }

        [Serializable]
        public class FocusedSelectionStateInfo
        {
            public string name;

            [Space(5)]
            public FocusedSelectionType selectionInfoType;

            [Space(5)]
            public InputUIState state;

            [Space(5)]
            public bool showSelection;

            [Space(5)]
            public bool showTint;
        }

        [Serializable]
        public class FocusedSelectionInfo<T>
        {
            #region Components

            public string name;
            public FocusedSelectionType selectionInfoType;

            #endregion

            #region Main

            public FocusedSelectionInfo()
            {

            }

            public FocusedSelectionInfo(string name, FocusedSelectionType selectionInfoType)
            {
                this.name = name;
                this.selectionInfoType = selectionInfoType;
            }

            #endregion
        }

        [Serializable]
        public class FocusedSelectionData
        {
            #region Components

            [Space(5)]
            public List<FocusedSelectionInfo<SceneDataPackets>> selections;

            [Space(5)]
            public FocusedSelectionType selectionType;

            [Space(5)]
            public bool isActiveSelection;

            #endregion

            #region Main

            public FocusedSelectionData()
            {

            }

            public FocusedSelectionData(List<FocusedSelectionInfo<SceneDataPackets>> selections, FocusedSelectionType selectionType, bool isActiveSelection)
            {
                this.selections = selections;
                this.selectionType = selectionType;
                this.isActiveSelection = isActiveSelection;
            }

            public void Clear()
            {
                selections = new List<FocusedSelectionInfo<SceneDataPackets>>();

                selectionType = FocusedSelectionType.Default;
                isActiveSelection = false;
            }

            #endregion
        }

        [Serializable]
        public struct AssetExportData
        {
            public string name;
            public GameObject value;
            public ExportExtensionType exportExtension;
            public string exportDirectory;
        }

        [Serializable]
        public struct InfoDisplayerField
        {
            public string name;

            [Space(5)]
            public TMP_Text title;

            [Space(5)]
            public InfoDisplayerFieldType type;
        }

        [Serializable]
        public struct ScreenBlurObjectContainer
        {
            #region Components

            public string name;

            [Space(5)]
            public Transform value;

            [Space(5)]
            public ScreenUIPlacementType containerLayerType;

            #endregion

            #region Main

            public Transform GetValueAssigned()
            {
                return value;
            }

            public bool HasValueAssigned()
            {
                return value != null;
            }

            #endregion
        }

        [Serializable]
        public class SceneEventCamera
        {
            public string name;

            [Space(5)]
            public Camera value;

            [Space(5)]
            public SceneEventCameraType eventCameraType;

            SceneAssetPose defaultCameraPose;

            public void Init()
            {
                if (value != null)
                {
                    SceneAssetPose assetPose = new SceneAssetPose
                    {
                        position = value.transform.position,
                        rotation = value.transform.rotation,
                        scale = value.transform.localScale
                    };

                    SetDefaultCameraPose(assetPose);
                }
                else
                    Debug.LogWarning("--> RG_Unity - Init Failed : Scene Event Camera Value Is Missing / Null.");
            }

            public Transform GetCameraTransform()
            {
                return value?.transform;
            }

            public void EnableCamera()
            {
                value.enabled = true;
            }

            public void DisableCamera()
            {
                value.enabled = false;
            }

            public void SetDefaultCameraPose(SceneAssetPose assetPose)
            {
                defaultCameraPose = assetPose;
            }

            public SceneAssetPose GetDefaultCameraPose()
            {
                return defaultCameraPose;
            }
        }

        [Serializable]
        public class AssetInfoWidgetContainer
        {
            #region Components

            [Space(5)]
            public GameObject value;

            #endregion

            #region Main

            public GameObject GetContainer()
            {
                return value;
            }

            public bool GetActive()
            {
                return value && value.activeSelf && value.activeInHierarchy;
            }

            public bool HasContainer()
            {
                return value;
            }

            public async void Show(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(HasContainer())
                {
                    GetContainer().SetActive(true);

                    await Helpers.GetWaitUntilAsync(GetActive());

                    if(!GetActive())
                    {
                        callbackResults.result = "Container Failed To Show -Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                    else
                    {
                        callbackResults.result = "Container Showing.";
                        callbackResults.resultCode = Helpers.SuccessCode;

                    }
                }
                else
                {
                    callbackResults.result = "Container Value Missing / Not Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public async void Hide(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (HasContainer())
                {
                    GetContainer().SetActive(false);

                    await Helpers.GetWaitUntilAsync(!GetActive());

                    if (GetActive())
                    {
                        callbackResults.result = "Container Failed To Hide -Please Check Here.";
                        callbackResults.resultCode = Helpers.ErrorCode;
         
                    }
                    else
                    {
                        callbackResults.result = "Container Hidden.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }
                else
                {
                    callbackResults.result = "Container Value Missing / Not Found.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class AssetInfoDisplayer
        {
            public List<InfoDisplayerField> infoWidgetFieldList;

            [Space(5)]
            [Header("Deprecated")]
            public GameObject widgetsContainer; // Deprecated

            [Space(5)]
            public AssetInfoWidgetContainer contentContainer = new AssetInfoWidgetContainer();

            [Space(5)]
            public bool showStats;

            bool show = false;

            public void SetAssetInfo(AssetInfoHandler info, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (infoWidgetFieldList != null)
                {
                    if (info.fields != null)
                    {
                        foreach (var field in info.fields)
                            foreach (var widget in infoWidgetFieldList)
                                if (field.type != InfoDisplayerFieldType.None && field.type.Equals(widget.type))
                                {
                                    if (field.type == InfoDisplayerFieldType.Title)
                                        widget.title.text = field.name;
                                    else
                                        widget.title.text = field.value.ToString();
                                }

                        show = true;
                    }
                    else
                        show = false;

                    if (show)
                    {
                        ShowInfo(showInfoCallback => 
                        {
                            callbackResults.result = showInfoCallback.result;
                            callbackResults.resultCode = showInfoCallback.resultCode;
                        });
                    }
                    else
                    {
                        HideInfo(hiddingContainerCallback => 
                        {
                            callbackResults.result = "Couldn't Show Info. Info Field Null / Empty.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        });
                    }
                }
                else
                {
                    callbackResults.result = "Couldn't Show Info. Info Widget Field List Is Null / Empty.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ShowInfo(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetWidgetsContainer(containerFoundCallback => 
                {
                    if(Helpers.IsSuccessCode(containerFoundCallback.resultCode))
                    {
                        containerFoundCallback.data.Show(showContainerCallback => 
                        {
                            callbackResults.result = showContainerCallback.result;
                            callbackResults.resultCode = showContainerCallback.resultCode;
                        });
                    }

                    callbackResults.result = containerFoundCallback.result;
                    callbackResults.resultCode = containerFoundCallback.resultCode;

                });

                callback?.Invoke(callbackResults);
            }

            public void HideInfo(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                GetWidgetsContainer(containerFoundCallback =>
                {
                    if (Helpers.IsSuccessCode(containerFoundCallback.resultCode))
                    {
                        containerFoundCallback.data.Hide(showContainerCallback =>
                        {
                            callbackResults.result = showContainerCallback.result;
                            callbackResults.resultCode = showContainerCallback.resultCode;
                        });
                    }

                    callbackResults.result = containerFoundCallback.result;
                    callbackResults.resultCode = containerFoundCallback.resultCode;

                });

                callback?.Invoke(callbackResults);
            }

            public void GetWidgetsContainer(Action<CallbackData<AssetInfoWidgetContainer>> callback)
            {
                CallbackData<AssetInfoWidgetContainer> callbackResults = new CallbackData<AssetInfoWidgetContainer>();

                if(contentContainer.HasContainer())
                {
                    callbackResults.result = "Widgets Info Container Loaded.";
                    callbackResults.data = contentContainer;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Widgets Info Container Missing / Not Found - Please Check Here.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ResetAssetInfo(AssetInfoHandler info)
            {
                if (infoWidgetFieldList == null)
                {
                    Debug.LogWarning("--> Info Widgets Null.");
                    return;
                }

                if (info.fields != null)
                {
                    foreach (var field in info.fields)
                    {
                        foreach (var widget in infoWidgetFieldList)
                        {
                            if (field.type != InfoDisplayerFieldType.None && field.type.Equals(widget.type))
                            {
                                if (field.type == InfoDisplayerFieldType.Title)
                                    widget.title.text = AppDatabaseManager.Instance.GetDefaultAssetName();
                                else
                                {
                                    widget.title.text = 0.ToString();
                                }
                            }
                        }
                    }

                    show = true;
                }
                else
                    show = false;

                if (show)
                    widgetsContainer.SetActive(showStats);
            }
        }

        #region Base Classes

        #region Selectable Dynamic Content

        #region Screen Content

        [RequireComponent(typeof(LayoutElement))]
        [RequireComponent(typeof(Button))]
        public abstract class UIScreenWidget : SelectableDynamicContent, IScrollHandler
        {
            #region Components

            #region Inspector Components

            [Space(10)]
            [Header("::: Component UI Selection")]

            [Space(5)]
            [SerializeField]
            protected UISelectionStateData selectableComponent = new UISelectionStateData();

            [Space(10)]
            [Header("::: Component Data Packet")]

            [Space(10)]
            [Header("::: Component Scene Notifications")]

            [Space(5)]
            [SerializeField]
            protected Notification notification;

            [Space(5)]
            [SerializeField]
            protected LayoutViewType layoutViewType = LayoutViewType.Default;

            #endregion

            #region Non Inspector Components

            List<UIScreenWidget> containerFolderWidgetsReferenceList = new List<UIScreenWidget>();

            protected FocusedSelectionInfoData focusedSelectionInfoData = new FocusedSelectionInfoData();
            protected DynamicWidgetsContainer container;

            protected Button buttonComponent = null;
            protected LayoutElement layout = null;

            #region Data

            protected Post post;
            protected ProjectStructureData structureData;
            protected SceneAsset assetData;
            protected Folder folderData;

            #endregion

            protected DefaultUIWidgetActionState defaultUIWidgetAction;

            #region UI References

            protected Image thumbnailDisplayerRef;
            protected TMP_Text titleDisplayerRef;
            protected TMP_Text descriptionDisplayerRef;
            protected TMP_Text dateTimeDisplayerRef;

            #endregion

            Vector3 selectionButtonScaleVect;
            Vector2 dragStartPosition;
            Vector2 dragOffSet;
            Vector2 dragDistance;
            protected RectTransform widgetRect;

            protected ScreenUIData widgetParentScreen;
            protected ScreenUIManager screenManager;

            private RectTransform parent;

            protected UIScreenWidget widgetComponent = null;
            protected UIScreenWidget hoveredWidget = null;

            bool isFingerDown = false;
            bool isSelected = false;
            bool isDragging = false;
            bool isScrolling = false;
            bool canDrag = false;
            bool isHovered = false;

            float currentPressDuration = 0;
            int contentIndex = 0;

            PointerEventData currentEventData;

            #endregion

            #endregion

            #region Unity Callback

            void OnEnable() => OnActionEventSubscription(true);
            void OnDisable() => OnActionEventSubscription(false);
            void Update() => OnSelectionUpdate();

            #endregion

            #region Main

            protected void Init(Action<Callback> callback = null)
            {
                try
                {
                    Callback callbackResults = new Callback();

                    InitializeInputs(inputsInitialization => 
                    {
                        callbackResults.SetResult(inputsInitialization);

                        if (callbackResults.Success())
                        {
                            widgetComponent = GetComponent<UIScreenWidget>();
                            widgetRect = GetComponent<RectTransform>();
                            layout = GetComponent<LayoutElement>();
                            buttonComponent = GetComponent<Button>();
                            parent = GetComponentInChildren<RectTransform>();
                            Deselected();
                            contentIndex = transform.GetSiblingIndex();

                            selectionButtonScaleVect = selectableComponent.GetWorldSpaceSelectionDimension();

                            container = GetComponentInParent<DynamicWidgetsContainer>();
                        }
                    });

                    callback.Invoke(callbackResults);
                }
                catch (Exception e)
                {
                    Debug.LogError($"--> RG_Unity - Init Failed : UIScreenWidget Initialization Failed With Results : {e}");
                    throw e;
                }
            }

            void OnActionEventSubscription(bool subscribed)
            {
                if (subscribed)
                    ActionEvents._OnScreenUIRefreshed += ActionEvents__OnScreenUIRefreshed;
                else
                    ActionEvents._OnScreenUIRefreshed -= ActionEvents__OnScreenUIRefreshed;
            }

            private void ActionEvents__OnScreenUIRefreshed()
            {
                OnScreenUIRefreshed();
            }

            public bool IsDraggableWidget()
            {
                return selectableComponent.IsDraggable();
            }

            public void SetContentSiblingIndexValue(int contentIndex) => this.contentIndex = contentIndex;

            public void SetContentSiblingIndex(int contentIndex) => this.transform.SetSiblingIndex(contentIndex);

            public int GetContentSiblingIndex()
            {
                return contentIndex;
            }

            public ScreenType GetUIWidgetPresenterScreenType()
            {
                // Return Screen Type Removed Temp......
                return ScreenType.None;
            }

            public bool IsSelected()
            {
                bool selected = false;

                if (GetActive())
                    selected = isSelected;

                return selected;
            }

            public void SetSelected(bool isSelected) => this.isSelected = isSelected;

            public bool HasContainer()
            {
                return GetWidgetContainer() != null;
            }

            public void SetFileData() => OnSetAssetData(assetData);

            public void SetFileData(SceneAsset assetData) => OnSetAssetData(assetData);
            protected abstract void OnActionButtonInputs(UIButton<ButtonDataPackets> actionButton);
            protected abstract void OnSetUIWidgetData(Folder folder);
            protected abstract void OnSetUIWidgetData(ProjectStructureData structureData);
            protected abstract void OnSetUIWidgetData(Post post);
            protected abstract void OnSetAssetData(SceneAsset assetData);
            protected abstract void OnScreenUIRefreshed();

            #region Set Data

            public void SetPost(Post post)
            {
                this.post = post;
                OnSetUIWidgetData(post);
            }

            public void SetProjectData(ProjectStructureData structureData)
            {
                this.structureData = structureData;
                OnSetUIWidgetData(structureData);
            }

            public void SetFolderData(Folder folderData)
            {
                this.folderData = folderData;
                this.folderData.name = folderData.name.Replace("_FolderData", "");
                OnSetUIWidgetData(folderData);
            }

            public void SetAssetData(SceneAsset assetData)
            {
                this.assetData = assetData;
            }

            #endregion

            #region Get Data

            public T GetData<T>(SelectableWidgetType type) where T : SerializableData
            {
                T data = null;

                switch(type)
                {
                    case SelectableWidgetType.Project:

                        data = structureData as T;

                        break;

                    case SelectableWidgetType.Folder:

                        data = folderData as T;

                        break;

                    case SelectableWidgetType.Asset:

                        data = assetData as T;

                        break;
                }

                return data;
            }

            public ProjectStructureData GetProjectData()
            {
                return structureData;
            }

            public Folder GetFolderData()
            {
                return folderData;
            }

            public SceneAsset GetAssetData()
            {
                return assetData;
            }

            #endregion

            public UIScreenWidget GetWidgetComponent()
            {
                return widgetComponent;
            }

            public void SetUIImageDisplayerValue(Sprite image, UIImageDisplayerType displayerType)
            {
                //if (imageDisplayerList.Count > 0)
                //{
                //    foreach (var displayer in imageDisplayerList)
                //        if (displayer.imageDisplayerType == displayerType)
                //            displayer.value.sprite = image;
                //}
                //else
                //    Debug.LogWarning("--> SetUIImageDisplayerValue Failed : imageDisplayerList Is Null / Empty.");
            }

            public void SetUIImageDisplayerValue(Sprite value, ScreenImageType imageType)
            {
                if (GetActive())
                {
                    if (actionGroup != null && actionGroup.Count > 0)
                    {
                        var initialized = actionGroup.FindAll(widget => widget.initialize);

                        if (initialized != null && initialized.Count > 0)
                        {
                            foreach (var item in initialized)
                            {
                                foreach (var widgetData in item.screenActionGroup)
                                {
                                    if (widgetData.inputType == InputType.Image)
                                    {
                                        widgetData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
                                        {

                                            LogInfo($" +++++==============>>>> Found Image Data - Code : {dataPacketsCallback.GetResultCode} - Results : {dataPacketsCallback.GetResult}", this);

                                            if (dataPacketsCallback.Success())
                                            {
                                                var widget = widgetData.GetImageComponent();

                                                LogInfo($" +++++==============>>>> Found Image Displayer : {widget.name} - Of Type : {widget.imageType}", this);

                                                if (widget != null && widget.imageType == imageType)
                                                {
                                                    if (widget.value)
                                                        widget.SetImageData(value);
                                                    else
                                                        LogError($"Set Action Button Event Failed - Action Button : {widget.name} Of Type : {imageType} Found With Missing Value - For Screen Widget : {name}.", this);
                                                }
                                                else
                                                    LogError("Action Group Button Component Not Found", this);
                                            }
                                            else
                                                Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                        });

                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                    LogError($"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.", this);
            }

            public void SetUIImageDisplayerValue(Texture2D value, ScreenImageType imageType)
            {
                if (GetActive())
                {
                    if (actionGroup != null && actionGroup.Count > 0)
                    {
                        var initialized = actionGroup.FindAll(widget => widget.initialize);

                        if (initialized != null && initialized.Count > 0)
                        {
                            foreach (var item in initialized)
                            {
                                foreach (var widgetData in item.screenActionGroup)
                                {
                                    if (widgetData.inputType == InputType.Image)
                                    {
                                        widgetData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var widget = widgetData.GetImageComponent();

                                                if (widget != null && widget.imageType == imageType)
                                                {
                                                    if (widget.value)
                                                        widget.SetImageData(value);
                                                    else
                                                        LogError($"Set Action Button Event Failed - Action Button : {widget.name} Of Type : {imageType} Found With Missing Value - For Screen Widget : {name}.", this);
                                                }
                                                else
                                                    LogError("Action Group Button Component Not Found", this);
                                            }
                                            else
                                                Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                        });

                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                    LogError($"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.", this);
            }

            //public void GetUIImageDisplayer(ScreenImageType imageType, Action<CallbackData<Image>> callback)
            //{
            //    CallbackData<Image> callbackResults = new CallbackData<Image>();

            //    if (GetActive())
            //    {
            //        if (actionGroup != null && actionGroup.Count > 0)
            //        {
            //            var initialized = actionGroup.FindAll(widget => widget.initialize);

            //            if (initialized != null && initialized.Count > 0)
            //            {
            //                foreach (var item in initialized)
            //                {
            //                    foreach (var widgetData in item.screenActionGroup)
            //                    {
            //                        if (widgetData.HasComponent(InputType.Image))
            //                        {
            //                            widgetData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
            //                            {
            //                                if (dataPacketsCallback.Success())
            //                                {
            //                                    var widget = widgetData.GetImageComponent();

            //                                    if (widget != null && widget.imageType == imageType)
            //                                    {
            //                                        if (widget.value)
            //                                        {
            //                                            callbackResults.result = $"Set Action Button Event Success - Action Button : {widget.name} Of Type : {imageType} Found - For Screen Widget : {name}.";
            //                                            callbackResults.data = widget.value;
            //                                            callbackResults.resultCode = Helpers.SuccessCode;
            //                                        }
            //                                        else
            //                                        {
            //                                            callbackResults.result = $"Set Action Button Event Failed - Action Button : {widget.name} Of Type : {imageType} Found With Missing Value - For Screen Widget : {name}.";
            //                                            callbackResults.data = default;
            //                                            callbackResults.resultCode = Helpers.ErrorCode;
            //                                        }
            //                                    }
            //                                    else
            //                                    {
            //                                        callbackResults.result = "Action Group Button Component Not Found";
            //                                        callbackResults.data = default;
            //                                        callbackResults.resultCode = Helpers.ErrorCode;

            //                                    }
            //                                }
            //                                else
            //                                    callbackResults.SetResult(dataPacketsCallback);
            //                            });

            //                            break;
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    else
            //    {
            //        callbackResults.result = $"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.";
            //        callbackResults.data = default;
            //        callbackResults.resultCode = Helpers.ErrorCode;
            //    }

            //    callback.Invoke(callbackResults);
            //}

            public GameObject GetSceneAssetObject()
            {
                return this.gameObject;
            }

            public void SetWidgetAssetData(SceneAsset asset) => SetFileData(asset);

            public LayoutElement GetWidgetLayoutElement()
            {
                return layout;
            }

            public LayoutViewType GetLayoutViewType()
            {
                return layoutViewType;
            }

            public RectTransform GetWidgetRect()
            {
                if (this && widgetRect == null)
                    widgetRect = this?.GetComponent<RectTransform>();

                return widgetRect;
            }

            public Vector2 GetWidgetSizeDelta()
            {
                return GetWidgetRect().sizeDelta;
            }

            public Vector3 GetWidgetLocalScale()
            {
                return GetWidgetRect().localScale;
            }

            public Vector2 GetWidgetLocalPosition()
            {
                return GetWidgetRect().localPosition;
            }

            public Vector2 GetWidgetAnchoredPosition()
            {
                return widgetRect.anchoredPosition;
            }

            public Vector2 GetWidgetPosition()
            {
                return GetWidgetRect().position;
            }

            public void SetWidgetParentScreen(ScreenUIData screen)
            {
                widgetParentScreen = screen;
            }

            public ScreenUIData GetWidgetParentScreen()
            {
                return widgetParentScreen;
            }

            public void SetDefaultUIWidgetActionState(DefaultUIWidgetActionState actionState)
            {
                defaultUIWidgetAction = actionState;

                switch (defaultUIWidgetAction)
                {
                    case DefaultUIWidgetActionState.Default:

                        SetUIImageDisplayerValue(AppDatabaseManager.Instance.GetImageFromLibrary(UIImageType.Null_TransparentIcon).value, UIImageDisplayerType.PinnedIcon);

                        break;

                    case DefaultUIWidgetActionState.Hidden:

                        Debug.LogError("==> Asset Hidden.");


                        SetUIImageDisplayerValue(AppDatabaseManager.Instance.GetImageFromLibrary(UIImageType.Null_TransparentIcon).value, UIImageDisplayerType.PinnedIcon);

                        break;

                    case DefaultUIWidgetActionState.Pinned:

                        SetUIImageDisplayerValue(AppDatabaseManager.Instance.GetImageFromLibrary(UIImageType.PinEnabledIcon).value, UIImageDisplayerType.PinnedIcon);

                        break;
                }

                //if (SelectableManager.Instance != null)
                //{
                //    if(SelectableManager.Instance.)
                //}
                //else
                //    LogWarning("Selectable Manager Instance Is Not Yet Initialized.", this, "SetDefaultUIWidgetActionState(DefaultUIWidgetActionState actionState)");
            }

            public DefaultUIWidgetActionState GetDefaultUIWidgetActionState()
            {
                return defaultUIWidgetAction;
            }

            protected void SetActionButtonState(InputActionButtonType buttonType, UIStateType state)
            {
                Debug.LogError($"--> Button : {buttonType} State - : {state}");
            }

            protected void SetActionButtonColor(InputActionButtonType buttonType, Color color)
            {
                if (GetActive())
                {
                    if (actionGroup != null && actionGroup.Count > 0)
                    {
                        var initialized = actionGroup.FindAll(input => input.initialize);

                        if (initialized != null && initialized.Count > 0)
                        {
                            foreach (var item in initialized)
                            {
                                foreach (var widget in item.screenActionGroup)
                                {
                                    if (widget.inputType == InputType.Button)
                                    {
                                        widget.GetInputDataPacket<TextDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var button = widget.GetButtonComponent();

                                                if (button != null)
                                                {
                                                    if (button.value)
                                                        button.SetUIColor(color);
                                                    else
                                                        LogError($"Set Action Button Event Failed - Action Button : {button.name} Of Type : {buttonType} Found With Missing Value - For Screen Widget : {name}.", this);
                                                }
                                                else
                                                    LogError("Action Group Button Component Not Found", this);
                                            }
                                            else
                                                Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                else
                    LogError($"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.", this);
            }

            protected void CancelActionButtonInvoke(InputActionButtonType buttonType)
            {
                if (GetActive())
                {
                    if (actionGroup != null && actionGroup.Count > 0)
                    {
                        var initialized = actionGroup.FindAll(input => input.initialize);

                        if (initialized != null && initialized.Count > 0)
                        {
                            foreach (var item in initialized)
                            {
                                foreach (var widget in item.screenActionGroup)
                                {
                                    if (widget.inputType == InputType.Button)
                                    {
                                        widget.GetInputDataPacket<TextDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var button = widget.GetButtonComponent();

                                                if (button != null)
                                                {
                                                    if (button.value)
                                                        button.value.CancelInvoke();
                                                    else
                                                        LogError($"Cancel Action Button Invoke Failed - Action Button : {button.name} Of Type : {buttonType} Found With Missing Value - For Screen Widget : {name}.", this);
                                                }
                                                else
                                                    LogError("Action Group Button Component Not Found", this);
                                            }
                                            else
                                                Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                else
                    LogError($"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.", this);
            }

            protected void SetActionButtonState(UIButton<ButtonDataPackets> button, InputUIState state)
            {
                var actionButtons = actionGroup.FindAll(inputs => inputs.screenActionGroup.Find(input => input.inputType == InputType.Button));

                if(actionButtons != null && actionButtons.Count > 0)
                {
                    
                }
                else
                    LogError($"=============> Button Action Group Not Found.", this);
                       
            }

            public List<UIButton<ButtonDataPackets>> GetActionInputUIButtonList()
            {
                LogError("===========> Fix This Now - Return Proper Data", this);
                return new List<UIButton<ButtonDataPackets>>();
            }

            public SelectableWidgetType GetSelectableType()
            {
                return selectableComponent.GetSelectableWidgetType();
            }

            public SelectableWidgetType GetSelectableWidgetType()
            {
                return selectableComponent.GetSelectableAssetType();
            }

            public void SetContentContainerPositionIndex(int index) => transform.SetSiblingIndex(index);

            public RectTransform GetFolderContentContainer()
            {
                return selectableComponent.GetUISelectionContentContainer();
            }

            protected void SetUITextDisplayerValue(string value, ScreenTextType textType)
            {
                if (actionGroup != null && actionGroup.Count > 0)
                {
                    var initialized = actionGroup.FindAll(input => input.initialize);

                    if (initialized != null && initialized.Count > 0)
                    {
                        foreach (var item in initialized)
                        {
                            if (item != null)
                            {
                                foreach (var widget in item.screenActionGroup)
                                {
                                    if (widget != null)
                                    {
                                        if (widget.HasComponent(textType))
                                        {
                                            if (widget.inputType == InputType.Text)
                                            {
                                                widget.GetInputDataPacket<TextDataPackets>(dataPacketsCallback =>
                                                {
                                                    if (dataPacketsCallback.Success())
                                                    {
                                                        if (dataPacketsCallback.data.textType == textType)
                                                        {
                                                            LogSuccess($"===> Yes - Now About To Set Widget Data Folder Name : {value} To Text Type : {textType}", this);
                                                            widget.GetTextComponent().SetScreenUITextValue(value);
                                                        }
                                                        else
                                                            LogError($"===> No Text Displayer Set To Type : {textType}", this);
                                                    }
                                                    else
                                                        Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                                });
                                            }
                                            else
                                                LogWarning($"Action Group Widget Is Not Set To Text Type : {textType}.", this);
                                        }
                                        else
                                            LogWarning($"Action Group Widget Of Text Type : {textType} Doesn't Exist.", this);
                                    }
                                    else
                                        LogError($"Action Group : {item.name} Widget Is Null / Invalid.", this);
                                }
                            }
                            else
                                LogError("Action Group Is Null / Invalid.", this);
                        }
                    }
                }
                else
                    LogWarning("Action Group Is Null / Empty / Not Yet Initialized.", this);
            }

            protected void SetUIImageDisplayerValue(UIImageDisplayerType displayerType, UIImageType imageType)
            {
            //    if (imageDisplayerList.Count > 0)
            //    {
            //        foreach (var displayer in imageDisplayerList)
            //        {
            //            if (displayer.imageDisplayerType == displayerType)
            //            {
            //                if (displayer.value)
            //                {
            //                    displayer.value.sprite = AppDatabaseManager.Instance.GetImageFromLibrary(imageType).value;
            //                    break;
            //                }
            //                else
            //                    Debug.LogWarning("--> Failed : textDisplayer Value Is Null / Empty.");
            //            }
            //        }
            //    }
            //    else
            //        Debug.LogWarning("--> SetUIImageDisplayerValue Failed : imageDisplayerList Is Null / Empty.");
            }

            void OnSelectionUpdate()
            {
                if (!GetSelectionStateData().Selectable)
                    return;

                if (GetActive())
                {
                    if (SelectableManager.Instance != null)
                    {
                        if (!isFingerDown || isDragging)
                            return;

                        if (currentPressDuration < selectableComponent.GetSelectionThreshHold())
                        {
                            currentPressDuration += 1 * Time.deltaTime;

                            if (currentPressDuration > 0.15f && currentPressDuration < selectableComponent.GetSelectionThreshHold())
                                canDrag = true;
                        }

                        if (currentPressDuration >= selectableComponent.GetSelectionThreshHold())
                        {
                            SetSelected(true);

                            if (!SelectableManager.Instance.SmoothTransitionToSelection)
                                SelectableManager.Instance.SmoothTransitionToSelection = true;

                            //var widgetData = this as UIScreenWidget;
                            //var dataPacket = dataPackets as SceneDataPackets;

                            SelectableManager.Instance.OnClearFocusedSelectionsInfo();
                            OnSelect(true);
                        }
                    }
                    else
                        LogWarning("Selectable Manager Instance Is Not Yet Initialized.", this, () => OnSelectionUpdate());
                }
            }

            bool OnPressAndHold()
            {
                return (currentPressDuration >= selectableComponent.GetSelectionThreshHold());
            }

            void OnReset()
            {
                isDragging = false;
                canDrag = false;
                currentPressDuration = 0.0f;

                if (layout != null)
                {
                    if (layout.ignoreLayout)
                        layout.ignoreLayout = isDragging;
                }
                else
                    LogWarning("Reset Failed - Layout Element Not Found.", this, () => OnReset());

                SetFingerDown(false);
            }

            public void OnReset(bool deselect)
            {
                if (deselect)
                    OnDeselect();

                OnReset();
            }

            void SetFingerDown(bool isFingerDown)
            {
                if (this != null)
                {
                    if (GetActive() == false)
                        return;

                    if (GetWidgetContainer())
                    {
                        this.isFingerDown = isFingerDown;
                        GetWidgetContainer().SetFingerDown(isFingerDown);
                    }
                    else
                        LogWarning("Set Finger Down Failed - Container Missing", this, () => SetFingerDown(isFingerDown));
                }
            }

            bool IsFingerDown()
            {
                return isFingerDown;
            }

            public DynamicWidgetsContainer GetWidgetContainer()
            {
                if (container == null)
                    container = GetComponentInParent<DynamicWidgetsContainer>();

                return container;
            }

            protected void OnSetActionButtonEvent(InputActionButtonType actionType, ActionEvents.ButtonAction<ButtonDataPackets> buttonAction = null, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (GetActive())
                {
                    if (actionGroup != null && actionGroup.Count > 0)
                    {
                        var initialized = actionGroup.FindAll(input => input.initialize);

                        if (initialized != null && initialized.Count > 0)
                        {
                            foreach (var item in initialized)
                            {
                                foreach (var widget in item.screenActionGroup)
                                {
                                    if (widget.inputType == InputType.Button)
                                    {
                                        widget.GetInputDataPacket<TextDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var button = widget.GetButtonComponent();

                                                if (button != null)
                                                {
                                                    if (button.value)
                                                    {
                                                        button.SetButtonActionEvent(buttonAction);

                                                        callbackResults.result = $"Set Action Button Event Success - Action Button : {button.name} Of Type : {actionType} Found.";
                                                        callbackResults.resultCode = Helpers.SuccessCode;
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Set Action Button Event Failed - Action Button : {button.name} Of Type : {actionType} Found With Missing Value - For Screen Widget : {name}.";
                                                        callbackResults.resultCode = Helpers.ErrorCode;
                                                    }
                                                }
                                                else
                                                    LogError("Action Group Button Component Not Found", this);
                                            }
                                            else
                                                Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"Set Action Button Event Failed For UI Screen Widget : {name} Of Selectable Type : {selectableComponent.selectableWidgetType} - This UI Screen Widget Is Not Yet Active.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnSetActionButtonState(InputActionButtonType actionType, InputUIState state)
            {
                if (actionGroup != null && actionGroup.Count > 0)
                {
                    var initialized = actionGroup.FindAll(input => input.initialize);

                    if (initialized != null && initialized.Count > 0)
                    {
                        foreach (var item in initialized)
                        {
                            foreach (var widget in item.screenActionGroup)
                            {
                                if (widget.inputType == InputType.Button)
                                {
                                    widget.GetInputDataPacket<TextDataPackets>(dataPacketsCallback =>
                                    {
                                        if (dataPacketsCallback.Success())
                                        {
                                            var button = widget.GetButtonComponent();

                                            if (button != null)
                                            {
                                                if (button.value)
                                                    button.SetUIInputState(state);
                                                else
                                                    LogError("Action Group Button Value Missing", this);
                                            }
                                            else
                                                LogError("Action Group Button Component Not Found", this);
                                        }
                                        else
                                            Log(dataPacketsCallback.resultCode, dataPacketsCallback.result, this);
                                    });
                                }
                            }
                        }
                    }
                }
            }

            void ResetWidgetOnBeginDrag(PointerEventData eventData, Vector2 pos)
            {
                buttonComponent.interactable = false;
                buttonComponent.CancelInvoke();

                layout.ignoreLayout = true;
                dragDistance = eventData.pointerCurrentRaycast.worldPosition;
                //widgetRect.localScale = selectionButtonScaleVect;

                GetWidgetContainer().SetScreenBounds(widgetRect);
                GetWidgetContainer().DeselectAllContentWidgets();

                dragOffSet = widgetRect.anchoredPosition - pos;
                dragStartPosition = pos;

                isDragging = true;
            }

            void GetFolderWidgets()
            {
                if (GetWidgetContainer().GetContentCount().data > 0)
                {
                    containerFolderWidgetsReferenceList = new List<UIScreenWidget>();

                    if (containerFolderWidgetsReferenceList.Count == 0)
                    {
                        GetWidgetContainer().GetContent(this, contentFound =>
                        {
                            if (Helpers.IsSuccessCode(contentFound.resultCode))
                                containerFolderWidgetsReferenceList = contentFound.data;
                            else
                                Debug.LogWarning($"--> OnBeginDrag Failed With Results : {contentFound.result}");
                        });
                    }
                    else
                        Debug.LogWarning($"--> OnBeginDrag Failed : containerWidgetsReferenceList Is Not Empty / Cleared.");
                }
            }

            void ResetFolderWidgets() => containerFolderWidgetsReferenceList.Clear();

            void OnSetSiblingIndexData()
            {
                if (this != null && GetActive())
                {
                    GetWidgetContainer().GetWidgetSiblingIndex(this, foundSiblingIndex =>
                    {
                        if (Helpers.IsSuccessCode(foundSiblingIndex.resultCode))
                            SetContentSiblingIndexValue(foundSiblingIndex.data);
                        else
                            Debug.LogWarning($"GetWidgetSiblindIndex Results : {foundSiblingIndex.result}");
                    });
                }
            }

            void ResetWidgetsSelectionOnBeginDrag()
            {
                if (SelectableManager.Instance != null)
                {
                    if (SelectableManager.Instance.HasActiveSelection())
                        SelectableManager.Instance.DeselectAll();

                    //widgetRect.localScale = selectionButtonScaleVect;
                    OnSelectionFrameState(true, InputUIState.Highlighted, true);
                }
                else
                    Debug.LogWarning("--> OnDrag Failed : SelectableManager.Instance Is Not Yet Initialized.");
            }

            public UISelectionStateData GetSelectionStateData() => selectableComponent;

            #region Events Callbacks

            #region Scroll

            public void OnScroll(PointerEventData eventData) => OnScrollExecuted(eventData);

            #endregion

            #endregion

            #region Events Functions

            #region Drag Functions

            protected override void OnBeginDragExecuted(PointerEventData eventData)
            {
                try
                {
                    if (GetSelectionStateData().Selectable)
                    {
                        if (IsDraggableWidget())
                        {
                            if (SelectableManager.Instance != null)
                            {
                                if (SelectableManager.Instance.GetCurrentSelectionType() != FocusedSelectionType.SelectedItem)
                                {
                                    if (GetActive())
                                    {
                                        if (GetWidgetContainer().GetScrollerDragViewPort() == null)
                                            return;

                                        Vector2 pos;

                                        if (RectTransformUtility.ScreenPointToLocalPointInRectangle(GetWidgetContainer().GetScrollerDragViewPort(), eventData.position, eventData.pressEventCamera, out pos))
                                        {
                                            if (!IsSelected())
                                            {
                                                #region Setup

                                                ResetWidgetOnBeginDrag(eventData, pos);
                                                // GetFolderWidgets();

                                                GetWidgetContainer().SetFingerDragEvent();

                                                Deselected();

                                                #endregion

                                                #region Set Sibling Index Data

                                                OnSetSiblingIndexData();

                                                #endregion

                                                #region On Disbale Selections On Drag

                                                ResetWidgetsSelectionOnBeginDrag();

                                                #endregion

                                                #region Parent Widget

                                                GetWidgetContainer().GetPlaceHolder(placeholder =>
                                                {
                                                    if (Helpers.IsSuccessCode(placeholder.resultCode))
                                                    {
                                                        if (!placeholder.data.IsActive())
                                                            placeholder.data.ShowPlaceHolder(GetWidgetContainer().GetContentContainer(), widgetRect.sizeDelta, GetContentSiblingIndex());

                                                        widgetRect.SetParent(GetWidgetContainer().GetItemDragContainer(), false);
                                                        GetFolderWidgets();
                                                    }
                                                    else
                                                        LogWarning(placeholder.result, this, () => OnBeginDragExecuted(eventData));
                                                });

                                                #endregion
                                            }
                                        }
                                    }
                                }
                            }
                            else
                                LogError("Selectable Manager Instance Is Not Yet Initialized.", this, () => OnBeginDragExecuted(eventData));
                        }
                        else
                            LogWarning($"On Begin Drag Unsuccessful - Widget : {this.name} Is Not A Draggable Widget.", this);
                    }
                    else
                    {
                        EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetUIScroller().GetDragViewPort().gameObject);
                        GetWidgetContainer().GetUIScroller().value.OnBeginDrag(eventData);
                    }
                }
                catch(Exception exception)
                {
                    LogError(exception.Message, this, () => OnBeginDragExecuted(eventData));
                    throw exception;
                }
            }

            protected override void OnDragExecuted(PointerEventData eventData)
            {
                try
                {
                    if (GetSelectionStateData().Selectable)
                    {
                        if (IsDraggableWidget())
                        {
                            if (SelectableManager.Instance != null)
                            {
                                if (SelectableManager.Instance.GetCurrentSelectionType() != FocusedSelectionType.SelectedItem)
                                {
                                    if (this != null && GetActive())
                                    {
                                        if (GetWidgetContainer().GetScrollerDragViewPort() == null)
                                            return;

                                        var actionType = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? InputActionButtonType.OpenFolderButton : InputActionButtonType.OpenSceneAssetPreview;
                                        OnSetActionButtonEvent(actionType);

                                        if (!IsSelected() && canDrag)
                                        {
                                            #region On Drag Item

                                            OnDragWidgetEvent(eventData, GetWidgetContainer().GetScrollerDragViewPort(), currentDragEventData =>
                                            {
                                                if (Helpers.IsSuccessCode(currentDragEventData.resultCode))
                                                {
                                                    OnEdgeScrolling(currentDragEventData.data);
                                                    HighlightHoveredFolderOnDrag(eventData, currentDragEventData.data);
                                                }
                                                else
                                                    LogError(currentDragEventData.result, this, () => OnDragExecuted(eventData));
                                            });

                                            #endregion
                                        }
                                        else
                                        {
                                            if (isScrolling == false)
                                                isScrolling = true;

                                            if (isScrolling)
                                            {
                                                eventData.pointerDrag = GetWidgetContainer().GetUIScroller().value.gameObject;
                                                EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetUIScroller().value.gameObject);

                                                GetWidgetContainer().GetUIScroller().value.OnInitializePotentialDrag(eventData);
                                                GetWidgetContainer().GetUIScroller().value.OnBeginDrag(eventData);

                                                OnDeselect();
                                            }
                                        }
                                    }
                                }
                            }
                            else
                                LogError("Selectable Manager Instance Is Not Yet Initialized.", this, () => OnDragExecuted(eventData));
                        }
                        else
                            LogWarning($"On Drag Unsuccessful - Widget : {this.name} Is Not A Draggable Widget.", this);
                    }
                    else
                    {
                        EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetUIScroller().GetDragViewPort().gameObject);
                        GetWidgetContainer().GetUIScroller().value.OnDrag(eventData);
                    }
                }
                catch(Exception execption)
                {
                    LogError(execption.Message, this, () => OnDragExecuted(eventData));
                    throw execption;
                }
            }

            protected override void OnEndDragExecuted(PointerEventData eventData)
            {
                try
                {
                    if (GetSelectionStateData().Selectable)
                    {
                        if (IsDraggableWidget())
                        {
                            if (SelectableManager.Instance != null)
                            {
                                if (SelectableManager.Instance.GetCurrentSelectionType() != FocusedSelectionType.SelectedItem)
                                {
                                    if (GetActive() && GetWidgetContainer() != null && GetWidgetContainer().GetActive().Success())
                                    {
                                        if (!IsSelected())
                                        {
                                            buttonComponent.interactable = true;
                                            buttonComponent.CancelInvoke();

                                            widgetRect.localScale = Vector3.one;
                                            //OnSelectionFrameState(false, InputUIState.Normal, false);

                                            ResetFolderWidgets();

                                            GetWidgetContainer().GetPlaceHolder(placeholder =>
                                            {
                                                if (Helpers.IsSuccessCode(placeholder.resultCode))
                                                {
                                                    if (placeholder.data.IsActive())
                                                    {
                                                        widgetRect.SetParent(GetWidgetContainer().GetContentContainer(), false);
                                                        placeholder.data.ResetPlaceHolder(ref widgetRect);
                                                    }
                                                }
                                                else
                                                    Debug.LogWarning($"--> Failed With Results : {placeholder.result}");
                                            });

                                            isDragging = false;

                                            // This below here works but not desirable.
                                            //ScreenUIManager.Instance.Refresh();
                                        }

                                        OnReset();
                                    }
                                }
                            }
                            else
                                LogError("Selectable Manager Instance Is Not Yet Initialized.", this, () => OnEndDragExecuted(eventData));
                        }
                        else
                            LogWarning($"On Drag End Unsuccessful - Widget : {this.name} Is Not A Draggable Widget.", this);
                    }
                   else
                    {
                        EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetUIScroller().GetDragViewPort().gameObject);
                        GetWidgetContainer().GetUIScroller().value.OnEndDrag(eventData);
                    }
                }
                catch(Exception exception)
                {
                    LogError(exception.Message);
                    throw exception;
                }
            }

            #endregion

            #region Scroll

            void OnScrollExecuted(PointerEventData eventData)
            {
                EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetUIScroller().GetDragViewPort().gameObject);
                GetWidgetContainer().GetUIScroller().value.OnScroll(eventData);
            }

            #endregion

            #region Pointer Functions

            protected override void OnPointerDownExecuted(PointerEventData eventData)
            {
                try
                {
                    if (GetSelectionStateData().Selectable)
                    {
                        if (GetWidgetContainer())
                        {
                            if (GetActive() && GetWidgetContainer().GetActive().Success())
                            {
                                GetWidgetContainer().SetFingerDown(true);

                                if (SelectableManager.Instance.HasActiveSelection() && SelectableManager.Instance.GetCurrentSelectionType() == FocusedSelectionType.SelectedItem)
                                {
                                    SelectableManager.Instance.HasFocusedSelectionInfo(name, hasSelectionCallback =>
                                    {
                                        if (Helpers.IsSuccessCode(hasSelectionCallback.resultCode))
                                        {
                                            StartCoroutine(ExecuteDeselectionStateChangedAsync());
                                        }
                                        else
                                        {
                                            buttonComponent.CancelInvoke();

                                            currentPressDuration = 0.0f;
                                            canDrag = false;
                                            isScrolling = false;

                                            SetFingerDown(true);

                                            StartCoroutine(ExecuteSelectionStateChangedAsync());
                                        }
                                    });
                                }
                                else
                                {
                                    if (!IsSelected())
                                    {
                                        buttonComponent.CancelInvoke();

                                        currentPressDuration = 0.0f;
                                        canDrag = false;
                                        isScrolling = false;

                                        SetFingerDown(true);
                                    }
                                }
                            }
                        }
                    }
                    else
                        EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetScrollerDragViewPort().gameObject);
                }
                catch(Exception exception)
                {
                    LogError(exception.Message, this);
                    throw exception;
                }
            }

            IEnumerator ExecuteSelectionStateChangedAsync()
            {
                yield return new WaitUntil(() => IsFingerDown() == false);

                if (SelectableManager.Instance.HasActiveSelection() && SelectableManager.Instance.GetCurrentSelectionType() == FocusedSelectionType.SelectedItem)
                {
                    if(OnPressAndHold())
                        OnSelect(true);
                    else
                        OnSelect();
                }
            }

            IEnumerator ExecuteDeselectionStateChangedAsync()
            {
                var callbackResults = new Callback();

                yield return new WaitUntil(() => IsFingerDown() == false);

                SelectableManager.Instance.GetProjectStructureSelectionSystem(projectSelectionCallbackResults => 
                {
                    if (projectSelectionCallbackResults.Success())
                    {
                        projectSelectionCallbackResults.data.Deselect(name, deselectionCallback =>
                        {
                            if (!Helpers.IsSuccessCode(deselectionCallback.resultCode))
                                LogError(deselectionCallback.result, this, () => ExecuteDeselectionStateChangedAsync());
                        });
                    }
                    else
                        Log(projectSelectionCallbackResults.resultCode, projectSelectionCallbackResults.result, this);
                });

                yield return new WaitForEndOfFrame();

                if (!SelectableManager.Instance.HasActiveSelection())
                {
                    SelectableManager.Instance.Select(name, FocusedSelectionType.InteractedItem);

                    Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, screenUIManagerCallbackResults => 
                    {
                        callbackResults.SetResult(screenUIManagerCallbackResults);
                    
                        if(callbackResults.Success())
                        {
                            var screenUIManager = screenUIManagerCallbackResults.data;

                            callbackResults.SetResult(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized."));

                            if (callbackResults.Success())
                            {
                                var appDatabaseManagerInstance = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                                callbackResults.SetResult(appDatabaseManagerInstance.GetAssetBundlesLibrary());

                                if (callbackResults.Success())
                                {
                                    var assetBundlesLibrary = appDatabaseManagerInstance.GetAssetBundlesLibrary().GetData();

                                    assetBundlesLibrary.GetDynamicContainer<DynamicWidgetsContainer>(screenUIManager.GetCurrentScreenType().GetData(), ContentContainerType.FolderStuctureContent, ContainerViewSpaceType.Screen, dynamicContainerCallbackResults =>
                                    {
                                        callbackResults.SetResult(dynamicContainerCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            var container = dynamicContainerCallbackResults.GetData();
                                            container.OnFocusedSelectionStateUpdate();
                                        }
                                    });
                                }
                            }
                        }
                    
                    }, "Screen UI Manager Is Not Yet Initialized.");
                }
            }

            protected override void OnPointerUpExecuted(PointerEventData eventData)
            {
                try
                {
                    if (GetSelectionStateData().Selectable)
                    {
                        if (GetActive() && GetWidgetContainer() != null && GetWidgetContainer().GetActive().Success())
                        {
                            GetWidgetContainer().SetFingerUpEvent();

                            if (hoveredWidget != null)
                            {
                                if (hoveredWidget.IsHovered())
                                {
                                    if (AppDatabaseManager.Instance != null)
                                    {
                                        Folder hoveredFolderData = hoveredWidget.GetFolderData();

                                        if (!string.IsNullOrEmpty(hoveredFolderData.storageData.projectDirectory))
                                        {
                                            AppDatabaseManager.Instance.DirectoryFound(hoveredFolderData.storageData.projectDirectory, directoryCheckCallback =>
                                            {
                                                if (Helpers.IsSuccessCode(directoryCheckCallback.resultCode))
                                                {
                                                    StorageDirectoryData sourceDirectoryData = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? GetFolderData().storageData : GetAssetData().storageData;
                                                    StorageDirectoryData targetStorageData = GetTargetDirectoryFromSourceStorageDirectoryData(sourceDirectoryData, hoveredFolderData.storageData);

                                                    OnDragInsideFolderEvent(sourceDirectoryData, targetStorageData, async widgetMovedCallback =>
                                                    {
                                                        if (Helpers.IsSuccessCode(widgetMovedCallback.resultCode))
                                                        {
                                                            GetWidgetContainer().OnFocusToWidget(hoveredWidget, false, true);

                                                            if (SelectableManager.Instance != null)
                                                            {
                                                                if (SelectableManager.Instance.HasActiveSelection())
                                                                {
                                                                    SelectableManager.Instance.OnClearFocusedSelectionsInfo(selectionInfoCleared =>
                                                                    {
                                                                        if (Helpers.IsSuccessCode(selectionInfoCleared.resultCode))
                                                                            SelectableManager.Instance.Select(hoveredFolderData.name, FocusedSelectionType.HoveredItem);
                                                                        else
                                                                            LogError(selectionInfoCleared.result, this, () => OnPointerUpExecuted(eventData));
                                                                    });
                                                                }
                                                                else
                                                                    SelectableManager.Instance.Select(hoveredFolderData.name, FocusedSelectionType.HoveredItem);
                                                            }
                                                            else
                                                                LogError("Selectable Manager Instance Not Yet Initialized.", this, () => OnPointerUpExecuted(eventData));

                                                            // Reload Screen
                                                            await ScreenUIManager.Instance.RefreshAsync();

                                                            if (notification.showNotifications)
                                                            {
                                                                notification.message = widgetMovedCallback.result;
                                                                NotificationSystemManager.Instance.ScheduleNotification(notification);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (widgetMovedCallback.data.dataAlreadyExistsInTargetDirectory)
                                                            {
                                                                if (GetActive() && GetWidgetContainer() != null && GetWidgetContainer().GetActive().Success())
                                                                {
                                                                    buttonComponent.interactable = false;
                                                                    buttonComponent.CancelInvoke();

                                                                    widgetRect.localScale = Vector3.one;
                                                                    //OnSelectionFrameState(false, InputUIState.Normal, false);

                                                                    ResetFolderWidgets();

                                                                    GetWidgetContainer().GetPlaceHolder(placeholder =>
                                                                    {
                                                                        if (Helpers.IsSuccessCode(placeholder.resultCode))
                                                                        {
                                                                            if (placeholder.data.IsActive())
                                                                            {
                                                                                widgetRect.SetParent(GetWidgetContainer().GetContentContainer(), false);
                                                                                placeholder.data.ResetPlaceHolder(ref widgetRect);
                                                                            }
                                                                        }
                                                                        else
                                                                            LogWarning(placeholder.result, this, () => OnPointerUpExecuted(eventData));
                                                                    });

                                                                    OnReset();

                                                                    string widgetTitle = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? $"Folder Already Exist" : "File Already Exist";

                                                                    SceneDataPackets dataPackets = new SceneDataPackets
                                                                    {
                                                                        widgetTitle = widgetTitle,
                                                                        widgetType = WidgetType.UIAssetActionWarningWidget,
                                                                        blurScreen = true
                                                                    };

                                                                    if (ScreenUIManager.Instance != null)
                                                                        ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                                                                    else
                                                                        LogError($"Screen UI Manager Instance Is Not Yet Initialized.", this);
                                                                }
                                                            }
                                                            else
                                                                LogWarning(widgetMovedCallback.result, this);
                                                        }
                                                    });
                                                }
                                                else
                                                    LogWarning(directoryCheckCallback.result, this);
                                            });
                                        }
                                        else
                                            LogWarning("Directory Is Null / Empty.", this);
                                    }
                                    else
                                        LogError("Scene Assets Manager Instance IS Not Yet Initialized.", this);
                                }
                                else
                                    LogError($"Folder not Hovered, Eish!!", this);
                            }
                            else
                            {
                                LogInfo("Check This - Has Something To DO With Selection Ambushed Data.", this);

                                //if (!SelectableManager.Instance.HasFocusedWidgetInfo())
                                //{
                                //    UIWidgetInfo widgetInfo = new UIWidgetInfo
                                //    {
                                //        widgetName = name,
                                //        position = GetWidgetLocalPosition(),
                                //        selectionState = InputUIState.Highlighted
                                //    };

                                //    GetWidgetContainer().SetFocusedWidgetInfo(widgetInfo);
                                //}
                            }

                            if (isScrolling)
                            {
                                OnDeselect();
                                isScrolling = false;
                            }

                            OnReset();
                        }
                    }
                    else
                        EventSystem.current.SetSelectedGameObject(GetWidgetContainer().GetScrollerDragViewPort().gameObject);
                }
                catch(Exception exception)
                {
                    LogError(exception.Message, this);
                    throw exception;
                }
            }

            #endregion

            #endregion

            #region On Drag Functions

            void OnDragWidgetEvent(PointerEventData eventData, RectTransform dragRect, Action<CallbackData<Vector2>> callback)
            {
                CallbackData<Vector2> callbackResults = new CallbackData<Vector2>();

                Vector2 pos;

                if (RectTransformUtility.ScreenPointToLocalPointInRectangle(dragRect, eventData.position, eventData.pressEventCamera, out pos))
                {
                    Vector2 dragPosition = Vector2.zero;
                    Vector2 dragPos = pos + dragOffSet;

                    if (AppDatabaseManager.Instance != null)
                    {
                        if (AppDatabaseManager.Instance.GetProjectStructureData().Success())
                        {
                            if (AppDatabaseManager.Instance.GetProjectStructureData().data.GetLayoutViewType() == LayoutViewType.ListView)
                            {
                                dragPosition.x = widgetRect.anchoredPosition.x;
                                dragPosition.y = dragPos.y;
                            }

                            if (AppDatabaseManager.Instance.GetProjectStructureData().data.GetLayoutViewType() == LayoutViewType.ItemView)
                                dragPosition = dragPos;
                        }
                        else
                            Log(AppDatabaseManager.Instance.GetProjectStructureData().resultCode, AppDatabaseManager.Instance.GetProjectStructureData().result, this);
                    }
                    else
                        LogError("Scene Assets Manager Instance Is Not Yet Initialized.", this);

                    dragPosition.x = Mathf.Clamp(dragPosition.x, GetWidgetContainer().GetScreenBounds().left, GetWidgetContainer().GetScreenBounds().right);
                    dragPosition.y = Mathf.Clamp(dragPosition.y, GetWidgetContainer().GetScreenBounds().bottom, GetWidgetContainer().GetScreenBounds().top);

                    widgetRect.anchoredPosition = dragPosition;

                    callbackResults.result = $"Success - Dragging Widget At Position : {pos}";
                    callbackResults.data = dragPosition;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Failed - Dragging Off Screen";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            void OnEdgeScrolling(Vector2 dragPosition)
            {
                if (GetWidgetContainer().GetContainerOrientation() == OrientationType.Vertical)
                {
                    if (dragPosition.y >= GetWidgetContainer().GetScreenBounds().top)
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Up);
                    else if (dragPosition.y <= GetWidgetContainer().GetScreenBounds().bottom)
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Down);
                    else
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Default);
                }

                if (GetWidgetContainer().GetContainerOrientation() == OrientationType.Horizontal)
                {
                    if (dragPosition.x <= GetWidgetContainer().GetScreenBounds().left)
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Left);
                    else if (dragPosition.x >= GetWidgetContainer().GetScreenBounds().right)
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Right);
                    else
                        GetWidgetContainer().OnEdgetScrolling(DirectionType.Default);
                }
            }

            void HighlightHoveredFolderOnDrag(PointerEventData eventData, Vector2 dragPosition)
            {
                if (containerFolderWidgetsReferenceList.Count > 0)
                {
                    #region Drag Direction

                    for (int widgetIndex = 0; widgetIndex < containerFolderWidgetsReferenceList.Count; widgetIndex++)
                    {
                        if (containerFolderWidgetsReferenceList[widgetIndex].GetSelectableWidgetType() != SelectableWidgetType.PlaceHolder)
                        {
                            var canHighlightHoveredWidget = GetCurrentWidgetDragProperties(eventData, dragPosition, widgetIndex);

                            if (canHighlightHoveredWidget.dragTriggered && canHighlightHoveredWidget.highlightHoveredFolder)
                            {
                                hoveredWidget = containerFolderWidgetsReferenceList[widgetIndex];

                                if (hoveredWidget.selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder)
                                {
                                    if (canHighlightHoveredWidget.snapToHoveredFolder && GetWidgetContainer().SnapDraggedWidgetToHoveredFolder())
                                    {
                                        Vector2 pos;

                                        if (RectTransformUtility.ScreenPointToLocalPointInRectangle(hoveredWidget.GetFolderContentContainer(), eventData.position, eventData.pressEventCamera, out pos))
                                        {
                                            Vector3 position = new Vector3(hoveredWidget.GetWidgetPosition().x, hoveredWidget.GetWidgetPosition().y, widgetRect.position.z);
                                            widgetRect.position = position;
                                        }
                                    }
                                }
                                else
                                    widgetRect.SetParent(GetWidgetContainer().GetItemDragContainer(), false);
                            }
                            else
                            {
                                if (containerFolderWidgetsReferenceList[widgetIndex].GetSelectableWidgetType() == SelectableWidgetType.PlaceHolder)
                                {
                                    if (SnapToDefaultPose(widgetIndex))
                                    {
                                        Vector2 pos;

                                        if (RectTransformUtility.ScreenPointToLocalPointInRectangle(containerFolderWidgetsReferenceList[widgetIndex].GetFolderContentContainer(), eventData.position, eventData.pressEventCamera, out pos))
                                            widgetRect.anchoredPosition = containerFolderWidgetsReferenceList[widgetIndex].GetWidgetLocalPosition();

                                        OnWidgetScaleEvent(Vector3.one);
                                    }
                                }

                                containerFolderWidgetsReferenceList[widgetIndex].Deselected();
                            }


                            #region Highlight Items

                            if (hoveredWidget != null && (canHighlightHoveredWidget.highlightHoveredFolder || canHighlightHoveredWidget.snapToHoveredFolder))
                            {
                                OnWidgetScaleEvent(Vector3.one);
                                OnSelectionFrameState(true, InputUIState.Hovered, true);
                                SetUIImageDisplayerValue(AppDatabaseManager.Instance.GetImageFromLibrary(UIImageType.UIWidget_MoveIcon).value, UIImageDisplayerType.ActionIcon);
                                hoveredWidget.SetIsHovered(true);
                                break;
                            }
                            else
                            {

                                OnWidgetScaleEvent(selectionButtonScaleVect);
                                OnSelectionFrameState(true, InputUIState.Highlighted, true);
                                SetUIImageDisplayerValue(AppDatabaseManager.Instance.GetImageFromLibrary(UIImageType.Null_TransparentIcon).value, UIImageDisplayerType.ActionIcon);

                                if (hoveredWidget != null)
                                    hoveredWidget = null;

                                continue;
                            }

                            #endregion
                        }
                    }

                    #endregion
                }
                else
                    LogWarning("ContainerWidgetsList Is Null.", this, () => HighlightHoveredFolderOnDrag(eventData, dragPosition));
            }

            void OnWidgetScaleEvent(Vector3 widgetScale)
            {
                if (!selectableComponent.UpdateSelectionDimensionsOnDragEnabled())
                    return;

                widgetRect.localScale = widgetScale;
            }

            (bool dragTriggered, bool highlightHoveredFolder, bool snapToHoveredFolder, DirectionAxisType directionAxis, Vector2 targetScreenPosition, Vector2 targetWorldPosition) GetCurrentWidgetDragProperties(PointerEventData eventData, Vector2 dragPosition, int comparedWidgetIndex)
            {
                #region Calculate Drag Distance From Start Position

                Vector2 dragDirectionValue = (dragPosition - dragStartPosition);
                DirectionAxisType directionAxis = DirectionAxisType.None;
                bool draggedWidgetTriggered = false;
                float distance = 0.0f;
                float targetDistance = 0.0f;

                if (Mathf.Abs(dragDirectionValue.x) > Mathf.Abs(dragDirectionValue.y))
                    directionAxis = DirectionAxisType.Horizontal;
                else
                    directionAxis = DirectionAxisType.Vertical;

                if (AppDatabaseManager.Instance.GetProjectStructureData().Success())
                {

                    if (AppDatabaseManager.Instance.GetProjectStructureData().data.GetLayoutViewType() == LayoutViewType.ItemView)
                    {
                        if (directionAxis == DirectionAxisType.Horizontal)
                        {
                            distance = Mathf.Abs(dragDirectionValue.x);
                            targetDistance = widgetRect.sizeDelta.x / 2;

                            if (distance > targetDistance)
                                draggedWidgetTriggered = true;
                        }

                        else if (directionAxis == DirectionAxisType.Vertical)
                        {
                            distance = Mathf.Abs(dragDirectionValue.y);
                            targetDistance = widgetRect.sizeDelta.y / 2;

                            if (distance > targetDistance)
                                draggedWidgetTriggered = true;
                        }
                    }

                    if (AppDatabaseManager.Instance.GetProjectStructureData().data.GetLayoutViewType() == LayoutViewType.ListView)
                    {
                        if (directionAxis == DirectionAxisType.Vertical)
                        {
                            distance = Mathf.Abs(dragDirectionValue.y);
                            targetDistance = widgetRect.sizeDelta.y / 2;

                            if (distance > targetDistance)
                                draggedWidgetTriggered = true;
                        }
                    }

                }
                else
                    Log(AppDatabaseManager.Instance.GetProjectStructureData().resultCode, AppDatabaseManager.Instance.GetProjectStructureData().result, this);

               #endregion 


                var onHighlightHoveredFolder = OnHighlightHoveredFolder(eventData, comparedWidgetIndex);

                return (draggedWidgetTriggered, onHighlightHoveredFolder.highlightFolder, onHighlightHoveredFolder.snapToHoveredFolder, directionAxis, onHighlightHoveredFolder.targetScreenPosition, onHighlightHoveredFolder.targetWorldPosition);
            }

            bool SnapToDefaultPose(int widgetID)
            {
                bool snap = false;

                float dragDistance = Vector2.Distance(widgetRect.anchoredPosition, containerFolderWidgetsReferenceList[widgetID].GetWidgetRect().anchoredPosition);
                float distance = dragDistance / 100.0f;
                distance = Mathf.Clamp(distance, 0.0f, 1.0f);

                snap = distance <= AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.SnapDraggedWidgetToHoveredFolderDistance).value;

                return snap;
            }

            (bool highlightFolder, bool snapToHoveredFolder, Vector2 targetScreenPosition, Vector2 targetWorldPosition) OnHighlightHoveredFolder(PointerEventData eventData, int widgetID)
            {
                bool highlight = false;
                bool snap = false;
                Vector2 targetScreenPosition = Vector2.zero;
                Vector2 targetWorldPosition = Vector2.zero;

                if (containerFolderWidgetsReferenceList != null)
                {
                    if (widgetID <= containerFolderWidgetsReferenceList.Count - 1)
                    {
                        if (containerFolderWidgetsReferenceList[widgetID] != null)
                        {
                            if (this != null && GetActive())
                            {
                                var pos = eventData.enterEventCamera.WorldToScreenPoint(widgetRect.position);
                                var targetPos = eventData.enterEventCamera.WorldToScreenPoint(containerFolderWidgetsReferenceList[widgetID].GetWidgetRect().position);

                                float targetDistance = Vector2.Distance(pos, targetPos);
                                float targetDistanceDevided = targetDistance / 100.0f;
                                float targetDistanceClampled = Mathf.Clamp(targetDistanceDevided, 0.0f, 1.0f);

                                highlight = targetDistanceClampled <= AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.HighlightHoveredFolderDistance).value;
                                snap = targetDistanceClampled <= AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.SnapDraggedWidgetToHoveredFolderDistance).value;
                                targetScreenPosition = targetPos;
                                targetWorldPosition = eventData.enterEventCamera.ScreenToWorldPoint(targetScreenPosition);
                            }
                        }
                        else
                            LogWarning($"Widget At Index : {widgetID} Is Null / Missing.", this);
                    }
                    else
                        LogError($"Widget ID : {widgetID} Is Out Of Range - Not Found In containerWidgetsList With : {containerFolderWidgetsReferenceList.Count} Widgets.", this);
                }
                else
                    LogError("Container Widgets List Is Null.", this);

                return (highlight, snap, targetScreenPosition, targetWorldPosition);
            }

            #endregion
            void OnDragInsideFolderEvent(StorageDirectoryData sourceDirectoryData, StorageDirectoryData targetDirectoryData, Action<CallbackData<DirectoryInfo>> callback = null)
            {
                try
                {
                    CallbackData<DirectoryInfo> callbackResults = new CallbackData<DirectoryInfo>();

                    bool targetStorageDataDoesntExist = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? !Directory.Exists(targetDirectoryData.projectDirectory) : !File.Exists(targetDirectoryData.path);

                    if (targetStorageDataDoesntExist)
                    {
                        UIScreenWidget widget = this as UIScreenWidget;

                        Debug.LogError($"==> Path : {targetDirectoryData.path} - Directory : {targetDirectoryData.projectDirectory} Doesn't Exist");

                        if (widget != null)
                        {
                            bool hasStorageData = !string.IsNullOrEmpty(sourceDirectoryData.projectDirectory) && !string.IsNullOrEmpty(targetDirectoryData.projectDirectory);

                            if (hasStorageData)
                            {
                                AppDatabaseManager.Instance.OnMoveToDirectory(sourceDirectoryData, targetDirectoryData, widget.GetSelectableWidgetType(), fileMoveCallback =>
                                {
                                    if (Helpers.IsSuccessCode(fileMoveCallback.resultCode))
                                    {
                                        if (widget != null)
                                        {
                                            if (widgetRect != null)
                                            {
                                                widgetRect.SetParent(hoveredWidget.GetFolderContentContainer(), true);
                                                widgetRect.gameObject.SetActive(false);
                                            }

                                            hoveredWidget = null;

                                            GetWidgetContainer().GetPlaceHolder(placeholder =>
                                            {
                                                if (Helpers.IsSuccessCode(placeholder.resultCode))
                                                {
                                                    if (placeholder.data.IsActive())
                                                        placeholder.data.ResetPlaceHolder();
                                                }
                                                else
                                                    LogWarning(placeholder.result, this);
                                            });
                                        }
                                        else
                                            LogError("Widget Is Already Destroyed.", this);

                                        if (callback != null)
                                        {
                                            callbackResults.result = fileMoveCallback.result;
                                            callbackResults.resultCode = fileMoveCallback.resultCode;
                                        }
                                    }
                                    else
                                    {
                                        if (fileMoveCallback.data.dataAlreadyExistsInTargetDirectory)
                                        {
                                            callbackResults = fileMoveCallback;
                                            callback?.Invoke(callbackResults);
                                        }
                                        else
                                        {
                                            if (callback != null)
                                            {
                                                callbackResults.result = fileMoveCallback.result;
                                                callbackResults.resultCode = fileMoveCallback.resultCode;
                                            }
                                            else
                                                LogWarning($"On Move To Directory Failed With Results : {fileMoveCallback.result}", this);
                                        }
                                    }
                                });
                            }
                            else
                            {
                                callbackResults.result = "Source / Target Directory Data Is Missing / Null Or Invalid.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = "Widget Is Null / Couldn't Cats This To UIScreenWidget<SceneDataPackets>";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        string assetType = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? "Folder" : "File";
                        callbackResults.result = $"{assetType} Already Exist In Folder : {targetDirectoryData.name} ";
                        callbackResults.resultCode = Helpers.ErrorCode;

                        callbackResults.data = new DirectoryInfo
                        {
                            assetType = selectableComponent.GetSelectableAssetType(),
                            dataAlreadyExistsInTargetDirectory = true
                        };
                    }

                    callback?.Invoke(callbackResults);
                }
                catch(Exception exception)
                {
                    LogError(exception.Message, this);
                    throw exception;
                }
            }

            StorageDirectoryData GetTargetDirectoryFromSourceStorageDirectoryData(StorageDirectoryData sourceStorageData, StorageDirectoryData targetStorageData)
            {
                // Get Source File Data
                string fileDataSourceName = Path.GetFileName(sourceStorageData.path);

                #region Target Path

                // Get Target File Data
                string fileDataTargetDirectoryPath = Path.Combine(targetStorageData.projectDirectory, fileDataSourceName);
                targetStorageData.path = Helpers.GetFormattedDirectoryPath(fileDataTargetDirectoryPath);

                #endregion

                #region Target Directory

                // Get Source Folder Directory info
                string folderTargetDirectoryPath = Path.Combine(targetStorageData.projectDirectory, AppDatabaseManager.Instance.GetAssetNameFormatted(sourceStorageData.name, selectableComponent.GetSelectableAssetType()));
                targetStorageData.projectDirectory = Helpers.GetFormattedDirectoryPath(folderTargetDirectoryPath); ;

                #endregion

                return targetStorageData;
            }

            FocusedSelectionInfoData widgetSelectionInfoData = new FocusedSelectionInfoData();

            public FocusedSelectionInfoData OnGetFocusedSelectionInfoData()
            {
                if (widgetSelectionInfoData.selection == null)
                {
                    widgetSelectionInfoData.selection = this;
                    widgetSelectionInfoData.name = name;
                }

                return GetWidgetSelectionInfoData();
            }

            public void OnSetFocusedSelectionInfoData(FocusedSelectionInfoData selectionInfoData) => widgetSelectionInfoData = selectionInfoData;

            public FocusedSelectionInfoData GetWidgetSelectionInfoData()
            {
                FocusedSelectionInfoData source = new FocusedSelectionInfoData();

                source.name = name;
                source.selection = this;
                source.selectionInfoType = selectableComponent.GetCurrentSelectionState().uiStateData.selectionType;
                source.state = selectableComponent.GetCurrentSelectionState().uiStateData.state;
                source.showSelection = selectableComponent.GetCurrentSelectionState().showSelection;
                source.showTint = selectableComponent.GetCurrentSelectionState().showTint;

                return source;
            }

            public FocusedSelectionInfoData GetWidgetSelectionInfoData(FocusedSelectionInfoData source)
            {
                source.selectionInfoType = selectableComponent.GetCurrentSelectionState().uiStateData.selectionType;
                source.state = selectableComponent.GetCurrentSelectionState().uiStateData.state;
                source.showSelection = selectableComponent.GetCurrentSelectionState().showSelection;
                source.showTint = selectableComponent.GetCurrentSelectionState().showTint;

                return source;
            }

            public void OnSelectionFrameState(FocusedSelectionStateInfo selectionInfoData, bool async = false, Action<CallbackData<FocusedSelectionInfoData>> callback = null)
            {
                CallbackData<FocusedSelectionInfoData> callbackResults = new CallbackData<FocusedSelectionInfoData>();

                if (selectableComponent.GetSelectableAssetType() != SelectableWidgetType.PlaceHolder)
                {
                    if (!async)
                    {
                        if (selectableComponent.IsInitialized().hasSelectionFrame && selectableComponent.IsInitialized().hasSelectionState && selectableComponent.IsInitialized().hasTint)
                        {
                            #region Selection Info Data
                            FocusedSelectionInfoData newSelectionInfoData = new FocusedSelectionInfoData();

                            if (selectionInfoData.showSelection)
                            {
                                newSelectionInfoData.name = name;
                                newSelectionInfoData.selection = this;

                                OnSelectionFrameState(selectionInfoData.showSelection, selectionInfoData.state, selectionInfoData.showTint, async);

                                //selectionFrame.Show(selectionInfoData.state, selectionInfoData.showTint);
                            }

                            if (newSelectionInfoData.selection != null)
                            {

                                Debug.LogError($"==> New Selection State : {selectableComponent.GetCurrentSelectionState().showSelection}");

                                callbackResults.result = $"Showing Selection Frame For [State] : {selectionInfoData.state} - (Widget) Selection For Game Object [Named] {this.name}.";
                                callbackResults.data = GetWidgetSelectionInfoData(newSelectionInfoData);
                                callbackResults.resultCode = Helpers.SuccessCode;

                                //if (selectionFrame.GetCurrentSelectionState().showSelection)
                                //{
                                //    //if (!string.IsNullOrEmpty(widgetSelectionInfoData.name))
                                //    //     widgetSelectionInfoData.name = name;

                                //    // widgetSelectionInfoData.selection = newSelectionInfoData.selection;
                                //    // widgetSelectionInfoData.selectionInfoType = selectionFrame.GetCurrentSelectionState().uiStateData.selectionType;
                                //    // widgetSelectionInfoData.state = selectionFrame.GetCurrentSelectionState().uiStateData.state;
                                //    // widgetSelectionInfoData.showSelection = selectionFrame.GetCurrentSelectionState().showSelection;
                                //    // widgetSelectionInfoData.showTint = selectionFrame.GetCurrentSelectionState().showTint;

                                //    callbackResults.results = $"Showing Selection Frame For [State] : {selectionInfoData.state} - (Widget) Selection For Game Object [Named] {this.name}.";
                                //    callbackResults.data = GetWidgetSelectionInfoData(newSelectionInfoData);
                                //    callbackResults.success = true;
                                //}
                                //else
                                //{
                                //    callbackResults.results = $"Selection Frame For [State] : {selectionInfoData.state} - Not Showing For Game Object [Named] : {this.name}.";
                                //    callbackResults.data = default;
                                //    callbackResults.success = false;
                                //}
                            }
                            else
                            {
                                callbackResults.result = $"Selection Widget Value For State : {selectionInfoData.state} - Not Found For Game Object {this.name}.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }

                            #endregion
                        }
                        else
                        {
                            callbackResults.result = $"Not Initialized. Selection Frame For [State] : {selectionInfoData.state} is Missing / Null For Game Object [Named] : {this.name}.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        StartCoroutine(OnSelectionFrameStateAsync(selectionInfoData.showSelection, selectionInfoData.state, selectionInfoData.showTint));

                        callbackResults.result = "Async Called. OnSelectionFrameState Async Called.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.InfoCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public void OnSelected() => SetSelected(true);

            public void OnSelectionFrameState(bool show, InputUIState state, bool showTint, bool async = false)
            {
                if (selectableComponent.GetSelectableAssetType() != SelectableWidgetType.PlaceHolder)
                {
                    if (!async)
                    {
                        if (selectableComponent.IsInitialized().hasSelectionFrame && selectableComponent.IsInitialized().hasSelectionState && selectableComponent.IsInitialized().hasTint)
                        {
                            if (show)
                            {
                                selectableComponent.Show(state, showTint);

                                if (state == InputUIState.Selected && !IsSelected())
                                    OnSelected();
                            }
                            else
                                selectableComponent.Hide();
                        }
                        else
                            LogWarning($"SelectionFrame For State Type : {state} is Missing / Null For Game Object Named : {this.name}.", this, () => OnSelectionFrameState(show, state, showTint, async = false));
                    }
                    else
                    {
                        StartCoroutine(OnSelectionFrameStateAsync(show, state, showTint));
                    }
                }
            }

            IEnumerator OnSelectionFrameStateAsync(bool show, InputUIState state, bool showTint)
            {
                yield return new WaitForSeconds(2);

                if (selectableComponent.IsInitialized().hasSelectionFrame && selectableComponent.IsInitialized().hasSelectionState && selectableComponent.IsInitialized().hasTint)
                {
                    if (show)
                        selectableComponent.Show(state, showTint);
                    else
                        selectableComponent.Hide();
                }
                else
                    LogWarning($"Selection Frame is Missing / Null For Game Object [Named] : {this.name}.", this, () => OnSelectionFrameStateAsync(show, state, showTint));
            }

            public void OnSelectionFrameState(bool show, InputUIState state, bool showTint, Vector3 sizeDelta)
            {
                if (selectableComponent.IsInitialized().hasSelectionFrame && selectableComponent.IsInitialized().hasSelectionState && selectableComponent.IsInitialized().hasTint)
                {
                    if (show)
                        selectableComponent.Show(state, showTint);
                    else
                        selectableComponent.Hide();
                }
                else
                    LogWarning("On Selection Frame State Failed : selectionFrame is Missing / Null.", this, () => OnSelectionFrameState(show, state, showTint, sizeDelta));

                widgetRect.localScale = sizeDelta;

                #region Button Functions

                //if (show)
                //    OnSetActionButtonEvent(InputActionButtonType.OpenFolderButton);
                //else
                //    OnSetActionButtonEvent(InputActionButtonType.OpenFolderButton, OnActionButtonInputs);

                #endregion
            }

            public bool SetIsHovered(bool isHovered) => this.isHovered = isHovered;

            public bool IsHovered()
            {
                return isHovered;
            }

            public abstract void OnSelect(bool isInitialSelection = false);

            public abstract void OnDeselect();

            public void Selected() => OnButtonWidgetSelectionState(InputUIState.Selected);

            public void Deselected() => OnButtonWidgetSelectionState(InputUIState.Deselected);

            async Task OnDeselectionAsync()
            {
                await Task.Delay(1000);

                if (!IsSelected())
                    if (buttonComponent)
                    {
                        var actionType = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? InputActionButtonType.OpenFolderButton : InputActionButtonType.OpenSceneAssetPreview;
                        OnSetActionButtonEvent(actionType, OnActionButtonInputs);
                    }
            }

            async void OnButtonWidgetSelectionState(InputUIState selectionState)
            {
                if (this != null && GetActive())
                {
                    if (GetWidgetContainer() != null && GetWidgetContainer().GetActive().Success())
                    {
                        if (GetActive())
                        {
                            var actionType = (selectableComponent.GetSelectableAssetType() == SelectableWidgetType.Folder) ? InputActionButtonType.OpenFolderButton : InputActionButtonType.OpenSceneAssetPreview;

                            if (selectionState == InputUIState.Selected)
                            {
                                OnSetActionButtonState(actionType, InputUIState.Disabled);

                                OnSetActionButtonEvent(actionType);
                                OnSelectionFrameState(true, selectionState, true);

                                SetSelected(true);
                            }

                            if (selectionState == InputUIState.Deselected)
                            {
                                OnSelectionFrameState(false, selectionState, false);

                                OnSetActionButtonState(actionType, InputUIState.Enabled);

                                SetSelected(false);

                                await OnDeselectionAsync();
                            }

                            SetFingerDown(false);

                            if(GetWidgetRect() != null)
                                GetWidgetRect().localScale = Vector3.one;
                        }
                        else
                        {
                            OnReset();
                            SetSelected(false);
                        }
                    }
                }
            }

            #endregion
        }

        #endregion

        #region Scene Content

        public abstract class SceneContent : SelectableDynamicContent
        {
            #region Components

            #endregion

            #region Main

            #endregion
        }

        #endregion

        #region Content Bsse Abstract

        public abstract class SelectableDynamicContent : UIScreenWidgetBaseInput<SelectableWidgetType, WidgetType>, IContent, IPointerDownHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerUpHandler
        {
            #region Components

            #endregion

            #region Main

            #region Visibility

            public void Deselect()
            {
               
            }

            public void Hide()
            {
                
            }

            #endregion

            #region Unity Events

            #region Drag Events Callback

            public void OnBeginDrag(PointerEventData eventData) => OnBeginDragExecuted(eventData);

            public void OnDrag(PointerEventData eventData) => OnDragExecuted(eventData);

            public void OnEndDrag(PointerEventData eventData) => OnEndDragExecuted(eventData);

            #endregion

            #region Pointer Events Callback

            public void OnPointerDown(PointerEventData eventData) => OnPointerDownExecuted(eventData);

            public void OnPointerUp(PointerEventData eventData) => OnPointerUpExecuted(eventData);

            #endregion

            #endregion

            #region Interactable

            public void Select()
            {
               
            }

            public void Show()
            {
               
            }

            #endregion

            #region States

            public bool GetActive() => this != null && gameObject.activeInHierarchy && gameObject.activeSelf;

            #endregion

            #region Abstracts

            #region Drag Callback

            protected abstract void OnBeginDragExecuted(PointerEventData eventData);
            protected abstract void OnDragExecuted(PointerEventData eventData);
            protected abstract void OnEndDragExecuted(PointerEventData eventData);

            #endregion

            #region Pointer Callbacks

            protected abstract void OnPointerDownExecuted(PointerEventData eventData);
            protected abstract void OnPointerUpExecuted(PointerEventData eventData);

            #endregion

            #endregion

            #endregion
        }

        #endregion

        #endregion

        public class Scene3DPreviewer : AppMonoBaseClass
        {
            //[SerializeField]
            //protected GameObject content = null;

            [Space(5)]
            [SerializeField]
            protected Transform loadedSceneAssetContainer = null;

            [Space(5)]
            [SerializeField]
            ScreenType screenDependency;

            [Space(5)]
            [SerializeField]
            ScreenType previousScreenType;

            [Space(5)]
            [SerializeField]
            LoadingItemType loaderType;

            [Space(5)]
            [SerializeField]
            float dummyLoadTime;

            [Space(5)]
            [SerializeField]
            protected bool initialVisibilityState;

            Coroutine showContentRoutine;

            public AppDatabaseManager assetsManager;
            ScreenUIManager screenManager;

            [SerializeField]
            SceneDataPackets currentDataPackets;


            // Fix This To Display Models
            protected void OnScreenChangeEvent(SceneDataPackets dataPackets)
            {

                // Temp Fix. Do Proper Checks


                if (previousScreenType == ScreenType.ContentImportExportScreen)
                {
                    previousScreenType = ScreenType.None;
                    return;
                }

                if (AppDatabaseManager.Instance != null)
                {
                    if (AppDatabaseManager.Instance.GetCurrentSceneAsset() != null)
                    {
                        if (AppDatabaseManager.Instance.GetCurrentSceneAsset().modelAsset != null)
                        {
                            Debug.Log("==> Scene Asset Found");
                            //screenDependency = dataPackets.screenType;

                            //Transform contentContainer = assetsManager.GetSceneAssetsContainer(screenDependency);

                            //if (contentContainer != null)
                            //    loadedSceneAssetContainer = contentContainer;
                            //else
                            //    Debug.LogWarning($"-->OnScreenChangeEvent Content Container For Screen type : {screenDependency} Missing / Not Found ");

                            currentDataPackets = dataPackets;
                            OnSceneAssetScreenPreviewEvent(AppDatabaseManager.Instance.GetCurrentSceneAsset());
                        }
                        else
                            LogWarning("SceneAssetsManager.Instance.GetCurrentSceneAsset().modelAsset Is Null.", this, () => OnScreenChangeEvent(dataPackets));

                    }
                    else
                        LogWarning("SceneAssetsManager.Instance.GetCurrentSceneAsset() Is Null.", this, () => OnScreenChangeEvent(dataPackets));
                }
                else
                    LogWarning("SceneAssetsManager Instance Is Not Initialed!", this, () => OnScreenChangeEvent(dataPackets));
            }

            protected void OnScreenExitEvent(ScreenType screenType)
            {
                Hide();
            }

            protected void OnClearPreviewedSceneAssetObjectEvent()
            {
                if (loadedSceneAssetContainer.childCount == 0)
                    return;

                for (int i = 0; i < loadedSceneAssetContainer.childCount; i++)
                {
                    //Destroy(loadedSceneAssetContainer.GetChild(i).gameObject);
                    loadedSceneAssetContainer.GetChild(i).gameObject.SetActive(false);
                    LogInfo($"Asset : {loadedSceneAssetContainer.GetChild(i).gameObject.name} Disabled", this, () => OnClearPreviewedSceneAssetObjectEvent());
                }
            }

            protected void OnSceneAssetScreenPreviewEvent(SceneAsset sceneAsset)
            {
                if (sceneAsset.modelAsset)
                {
                    if (ScreenUIManager.Instance != null)
                    {
                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                        {
                            if (screenDependency != ScreenType.None && screenDependency == ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData())
                            {
                                Show();
                            }
                            else
                                LogWarning($"On New Asset Data Created Event Screen UI Manager Instance Get Current Screen Data Value Screen Type : {ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData()} - Doesn't Match The Screen Dependency : {screenDependency}.", this, () => OnSceneAssetScreenPreviewEvent(sceneAsset));
                        }
                        else
                            LogWarning("On New Asset Data Created Event Screen UI Manager Instance Get Current Screen Data Value Is Missing / Null.", this, () => OnSceneAssetScreenPreviewEvent(sceneAsset));
                    }
                    else
                        LogWarning("On New Asset Data Created Event Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnSceneAssetScreenPreviewEvent(sceneAsset));
                }
            }

            public void Show()
            {
                if (screenManager == null)
                    screenManager = ScreenUIManager.Instance;

                if (showContentRoutine != null)
                    StopCoroutine(showContentRoutine);

                showContentRoutine = StartCoroutine(OnShowPreviewContent());
            }

            public void Hide()
            {
                if (AppDatabaseManager.Instance)
                {
                    if (AppDatabaseManager.Instance.GetSceneAssetDynamicContentContainer().Count > 0)
                    {
                        foreach (var container in AppDatabaseManager.Instance.GetSceneAssetDynamicContentContainer())
                        {
                            if (container.value != null)
                                container.Hide(currentDataPackets.resetContentContainerPose, false);
                            else
                                LogWarning("Container Value Is Null.", this);
                        }
                    }
                    else
                        LogWarning("Assets Manager GetSceneAssetDynamicContentContainer Is Null.", this);
                }
                else
                    LogWarning("Assets Manager Not Yet Initialized.", this);
            }

            IEnumerator OnShowPreviewContent()
            {
                try
                {
                    if (assetsManager == null)
                        assetsManager = AppDatabaseManager.Instance;

                    if (screenManager != null)
                    {

                        screenManager.ShowLoadingItem(loaderType, true);

                        yield return Helpers.GetWaitForSeconds(dummyLoadTime);

                        screenManager.ShowLoadingItem(loaderType, false);

                        if (screenManager.HasCurrentScreen().Success())
                        {
                            SceneAssetDynamicContentContainer container = assetsManager.GetSceneAssetsContainerData(screenDependency);
                            container.Show(currentDataPackets.resetContentContainerPose, false);

                            previousScreenType = screenDependency;

                        }
                        else
                            LogWarning("Couldn't Show Preview Content - Current Screen Is Null.", this);
                    }
                    else
                        LogWarning("Couldn't Show Preview Content - Assets Manager Not Yet Initialized.", this);
                }
                finally
                {
                    LogInfo("Finally : On Show Preview Content.", this);
                }
            }
        }

        #region UI Action Components

        [Serializable]
        public class UIActionButtonComponent<ComponentType, T, U, V> where ComponentType : UIInputComponent<T, U, V> where T : Component where U : DataPackets
        {
            #region Components

            [Tooltip("UI Action Buttons Component")]
            [Header("Action Buttons")]

            [Space(10)]
            public string name;
   
            [Space(5)]
            public List<ComponentType> components;

            [Space(5)]
            public InputType inputType;

            [Space(5)]
            public bool initializeComponent;

            T fromClass;

            #endregion

            #region Main

            public void GetValues(Action<CallbackDataList<ComponentType>> callback)
            {
                CallbackDataList<ComponentType> callbackResults = new CallbackDataList<ComponentType>();

                HasRequiredComponents(hasComponentsCallback =>
                {
                    callbackResults = hasComponentsCallback;
                });

                callback.Invoke(callbackResults);
            }

            public void HasRequiredComponents(Action<CallbackDataList<ComponentType>> callback)
            {
                CallbackDataList<ComponentType> callbackResults = new CallbackDataList<ComponentType>();

                if (HasComponentsAssigned())
                {
                    bool assigned = true;
                    string missingValueInfo = string.Empty;

                    foreach (var uiComponent in GetUIComponentList())
                    {
                        if(!uiComponent.value)
                        {
                            assigned = false;
                            missingValueInfo = uiComponent.name;
                            break;
                        }
                    }

                    if(assigned)
                    {
                        callbackResults.result = $"UI Action Component : {name} Has Required Components";
                        callbackResults.data = GetUIComponentList();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"UI Action Component : {name} Has Some Missing Data For Component : {missingValueInfo}. Value Is Not Assigned In The Editor IInspector";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"{name} Is Set To Initialize Component But However, Buttons Are Not Assigned In The Inspector Panel. Triggered From : {fromClass.name}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public bool HasComponentsAssigned()
            {
                return components != null && components.Count > 0;
            }

            public List<ComponentType> GetUIComponentList()
            {
                return components;
            }

            #endregion
        }

        #endregion

        [Serializable]
        public class UIScreenViewerComponent : DataDebugger
        {
            #region Component

            [Space(5)]
            [SerializeField]
            private GameObject view;

            [Space(5)]
            [SerializeField]
            private ScreenFaderComponent fader = new ScreenFaderComponent();

            ScreenType screenType;
            UIScreenWidgetVisibilityState initialVisibility;

            #endregion

            #region Main

            public void Init(ScreenUIData screenData, Action<CallbackData<ScreenType>> callback = null)
            {
                try
                {
                    CallbackData<ScreenType> callbackResults = new CallbackData<ScreenType>();

                    Helpers.GetAppComponentValid(screenData, screenData.name, componentValidCallbackResults =>
                    {
                        callbackResults.SetResult(componentValidCallbackResults);

                        if (callbackResults.Success())
                        {
                            if (callbackResults.Success())
                            {
                                OnInitializeScreenDataSetup(screenData.GetUIScreenType(), screenData.GetUIScreenInitialVisibility(), screenDataSetupCallbackResults =>
                                {
                                    callbackResults = screenDataSetupCallbackResults;

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(InitializeViewFaderCallbackResults());

                                        if (callbackResults.Success())
                                        {
                                            callbackResults.SetResult(GetActiveViewFader());

                                            if (callbackResults.Success())
                                                GetActiveViewFader().data.Init(this, initializationCallbackResults => { callbackResults = initializationCallbackResults; });
                                        }
                                        else
                                        {
                                            callbackResults.data = screenDataSetupCallbackResults.data;
                                            callbackResults.resultCode = Helpers.SuccessCode;
                                        }

                                        if (callbackResults.Success())
                                            OnScreenViewVisibility(IsScreenViewVisible(screenData.GetUIScreenInitialVisibility()).Success());
                                    }
                                });
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                    }, $"Checking App Component Validity For Screen Data Component On View : {name} Failed - Screen UI Data Component Param Is Missing / Null / Not Assigned From Base Init.");

                    callback?.Invoke(callbackResults);
                }
                catch(NullReferenceException exception)
                {
                    LogError($"Screen Data Param Value Missing On Initialization - A Null Reference Exception Found : {exception.Message} Has Been Detected Please Varify Before Procceding.", this);
                    return;
                }
                catch(Exception exception)
                {
                    throw exception;
                }
            }

            public void OnInitializeScreenDataSetup(ScreenType screenType, UIScreenWidgetVisibilityState initialVisibility, Action<CallbackData<ScreenType>> callback = null)
            {
                CallbackData<ScreenType> callbackResults = new CallbackData<ScreenType>();

                this.screenType = screenType;
                this.initialVisibility = initialVisibility;

                callbackResults.result = (this.screenType != ScreenType.None)? $"Initialized View Fader : {name} For Screen Of Type : {this.screenType}" : $"Failed To Initialize View Fader : {name} - Screen Type Is Set To Default / None.";
                callbackResults.resultCode = (this.screenType != ScreenType.None) ? Helpers.SuccessCode : Helpers.WarningCode;

                callback?.Invoke(callbackResults);
            }

            private Callback IsScreenViewVisible(UIScreenWidgetVisibilityState visibilityState)
            {
                var callbackResults = new Callback();

                var isVisible = visibilityState == UIScreenWidgetVisibilityState.Visible? true : false;

                if (isVisible)
                {
                    callbackResults.result = $"Screen View Is Visble.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Screen View Is Not Visble.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public UIScreenWidgetVisibilityState GetViewerInitialVisibilityState()
            {
                return initialVisibility;
            }

            public ScreenType GetUIScreenType()
            {
                return screenType;
            }

            public CallbackData<GameObject> GetView()
            {
                var callbackResults = new CallbackData<GameObject>();

                if(view != null)
                {
                    callbackResults.result = $"Screen View : {name} - Has Been Assigned And Initialized Successfully.";
                    callbackResults.data = view;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen View : {name} - Screen View's Value Is Missing / Null / Not Assigned In The Unity Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<GameObject> Initialized(bool onShowScreen)
            {
                CallbackData<GameObject> callbackResults = new CallbackData<GameObject>(GetView());

                if(callbackResults.Success())
                {
                    bool validScreenViewState = (onShowScreen) ? GetView().GetData().GetInActive() : GetView().GetData().GetActive();

                    LogInfo($" _____________________++++++++++++++++++++===== Screen View : {GetName()} Has Valid Screen State : {validScreenViewState} - Show Screen : {onShowScreen} - Screen Active : {GetView().GetData().GetActive()} - Screen In-Active : {GetView().GetData().GetInActive()}", this);

                    if (validScreenViewState)
                    {
                        callbackResults.result = $"Screen View : {name} - Has Been Initialized Successfully";
                        callbackResults.data = GetView().GetData();
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Initialize Screen View : {name} - Screen View State Doesn't Match Required State - Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public async Task<CallbackData<Screen>> ShowScreenViewAsync()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.SetResult(Initialized(true));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(InitializeViewFaderCallbackResults());

                    if (callbackResults.Success())
                    {
                        callbackResults.SetResult(GetActiveViewFader());
                        callbackResults.resultCode = GetActiveViewFader().resultCode;

                        if (callbackResults.Success())
                        {
                            var faderComponent = GetActiveViewFader().data;
                            
                            if(faderComponent.GetOpacity().data <= 0)
                                faderComponent.SetFaderVisibilityValue(1.0f);

                            callbackResults = faderComponent.CanFadeOutViewCallbackResults();

                            if (callbackResults.Success())
                            {
                                var fadeModeType = faderComponent.GetScreenFadeMode();

                                LogInfoChannel fadeViewResultsCode = (fadeModeType == ScreenFadeModeType.Default || fadeModeType == ScreenFadeModeType.OnShowScreen)? Helpers.SuccessCode : Helpers.ErrorCode;
                                string fadeViewResults = (fadeViewResultsCode == Helpers.SuccessCode) ? $"Successfully Fading Out And Showing Screen : {GetUIScreenType()} With Fade Mode : {fadeModeType}" : $"Fade View Mode Is Disabled On Show : Current Mode Is Set To : {fadeModeType}";

                                callbackResults.result = fadeViewResults;
                                callbackResults.resultCode = fadeViewResultsCode;

                                if (callbackResults.Success())
                                {
                                    OnScreenViewVisibility(true);

                                   return await faderComponent.FadeOut();
                                }
                                else
                                {
                                    OnScreenViewVisibility(true);
                                    callbackResults.result = $"On Show Screen : {GetUIScreenType()} - With Fader Mode Results : {callbackResults.result}.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                            }
                            else
                                Log(callbackResults.resultCode, callbackResults.result, this);
                        }
                    }
                    else
                    {
                        OnScreenViewVisibility(true);
                        callbackResults.result = $"On Show Screen Of Type : {GetUIScreenType()} - Status : {callbackResults.result}.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }

                return callbackResults;
            }

            public async Task<CallbackData<Screen>> HideScreenViewAsync()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.SetResult(Initialized(false));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(InitializeViewFaderCallbackResults());

                    if (callbackResults.Success())
                    {
                        callbackResults.SetResult(GetActiveViewFader());

                        if (callbackResults.Success())
                        {
                            var faderComponent = GetActiveViewFader().data;

                            callbackResults = faderComponent.CanFadeInViewCallbackResults();

                            if (callbackResults.Success())
                            {
                                var fadeModeType = faderComponent.GetScreenFadeMode();

                                LogInfoChannel fadeViewResultsCode = (fadeModeType == ScreenFadeModeType.Default || fadeModeType == ScreenFadeModeType.OnHideScreen) ? Helpers.SuccessCode : Helpers.ErrorCode;
                                string fadeViewResults = (fadeViewResultsCode == Helpers.SuccessCode) ? $"Successfully Fading In And Hidding Screen : {GetUIScreenType()} With Fade Mode : {fadeModeType}" : $"Fade View Mode Is Disabled On Hide : Current Mode Is Set To : {fadeModeType}";

                                callbackResults.result = fadeViewResults;
                                callbackResults.resultCode = fadeViewResultsCode;

                                if (callbackResults.Success())
                                {
                                    await faderComponent.FadeIn();
                                    OnScreenViewVisibility(false);

                                    await Task.Yield();
                                    faderComponent.SetFaderVisibilityValue(0.0f);
                                }
                                else
                                {
                                    OnScreenViewVisibility(false);
                                    faderComponent.SetFaderVisibilityValue(0.0f);

                                    callbackResults.result = $"On Hide Screen : {GetUIScreenType()} - With Fader Mode Results : {callbackResults.result}.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                            }
                            else
                                Log(callbackResults.resultCode, callbackResults.result, this);
                        }
                    }
                    else
                    {
                        OnScreenViewVisibility(false);
                        callbackResults.result = $"On Hide Screen Of Type : {GetUIScreenType()} - Status : {callbackResults.result}.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<ScreenFaderComponent> GetActiveViewFader()
            {
                CallbackData<ScreenFaderComponent> callbackResults = new CallbackData<ScreenFaderComponent>();

                callbackResults.result = fader.GetActiveFader().result;
                callbackResults.resultCode = fader.GetActiveFader().resultCode;

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Get Active View Fader : {name} Is Initialized And Active.";
                    callbackResults.data = fader;
                }

                return callbackResults;
            }

            public CallbackData<ScreenFaderComponent> InitializeViewFaderCallbackResults()
            {
                CallbackData<ScreenFaderComponent> callbackResults = new CallbackData<ScreenFaderComponent>();

                callbackResults.result = fader.OnCanInitializeViewFaderResults().result;
                callbackResults.resultCode = fader.OnCanInitializeViewFaderResults().resultCode;

                callbackResults.result = (callbackResults.Success())? callbackResults.result : $"View Fader Is Not Applicable For Screen : {GetUIScreenType()}";
                callbackResults.data = (callbackResults.Success()) ? fader : default;

                return callbackResults;
            }

            private void OnScreenViewVisibility(bool value, Action<Callback> callback = null)
            {
                var callbackResults = new Callback(GetView());

                if (callbackResults.Success())
                {
                    if (value)
                    {
                        GetView().GetData().Show();

                        if (GetView().GetData().GetActive())
                            callbackResults.result = $"Screen View : {GetName()} Is Showing.";
                        else
                        {
                            callbackResults.result = $"Failed To Show Screen View : {GetName()} - Invalid Operation - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        GetView().GetData().Hide();

                        if (GetView().GetData().GetInActive())
                            callbackResults.result = $"Screen View : {GetName()} Is Hidden.";
                        else
                        {
                            callbackResults.result = $"Failed To Hide Screen View : {GetName()} - Invalid Operation - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Screen View Name Is Not Assigned.";

            #endregion
        }

        public abstract class ScreenUIData : UIScreenWidget<ScreenType, WidgetType>, IUIScreenData
        {
            [Header("Screen Info")]

            [SerializeField]
            string screenTitle;

            [Space(5)]
            [SerializeField]
            UIScreenViewerComponent screenView = new UIScreenViewerComponent();

            [Space(5)]
            [SerializeField]
            ScreenBlurObject screenBlur = new ScreenBlurObject();

            [Space(5)]
            [SerializeField]
            AssetInfoDisplayer infoDisplayer = new AssetInfoDisplayer();

            [Space(5)]
            [SerializeField]
            Transform widgetsContainer;

            [Space(5)]
            [SerializeField]
            Vector2 screenPosition = Vector2.zero;

            [Space(5)]
            [Header("Screen Data")]

            [Space(5)]
            [SerializeField]
            protected List<LoadingItemData> loadingItemList = new List<LoadingItemData>();

            [Space(5)]
            [SerializeField]
            List<ScreenTogglableWidget<GameObject>> screenTogglableWidgetsList = new List<ScreenTogglableWidget<GameObject>>();

            [Space(5)]
            [SerializeField]
            protected bool includesLoadingAssets;

            [Space(5)]
            [SerializeField]
            protected bool initializeScreenWidgets = true;

            [Space(5)]
            [SerializeField]
            protected List<Widget> widgets;

            LoadingItemData currentLoadingItem = new LoadingItemData();

            bool canResetAssetPose = false;

            #region Widgets 

            protected Dictionary<string, ScreenUIData> registeredScreens = new Dictionary<string, ScreenUIData>();

            #endregion

            public void Init(Action<CallbackData<WidgetStatePacket<ScreenType, WidgetType>>> callback = null, params EventActionData[] eventActions)
            {
                var callbackResults = new CallbackData<WidgetStatePacket<ScreenType, WidgetType>>(GetType());

                #region Base Initialization

                if (callbackResults.Success())
                {
                    GetScreenView().Init(this, screenViewInitializationCallbackResults =>
                    {
                        callbackResults.SetResult(screenViewInitializationCallbackResults);

                        if (callbackResults.Success())
                        {
                            RegisterEventAction(eventActionRegisteredCallbacResults => 
                            {
                                callbackResults.SetResult(eventActionRegisteredCallbacResults);

                                if (callbackResults.Success())
                                {
                                    OnRegisterScreen(this, onRegisterScreenCallbackResults => 
                                    {
                                        callbackResults.SetResult(eventActionRegisteredCallbacResults);

                                        if(callbackResults.Success())
                                        {
                                            var widgetStatePacket = new WidgetStatePacket<ScreenType, WidgetType>(this, WidgetStateType.Initialized);

                                            SetWidgetStatePacket(widgetStatePacket, widgetStatePacketSetCallbackResults =>
                                            {
                                                callbackResults.SetResult(widgetStatePacketSetCallbackResults);

                                                if (callbackResults.Success())
                                                {
                                                    InitializeWidgets(screenWidgetsInitializationCallbackResults =>
                                                    {
                                                        callbackResults.SetResult(screenWidgetsInitializationCallbackResults);

                                                        if (callbackResults.Success())
                                                        {
                                                            callbackResults.SetResult(GetInitialVisibilityState());

                                                            if (callbackResults.Success())
                                                            {
                                                                LogInfo($" ______________________________________+_______________ Set Screen Initialization State : {GetInitialVisibilityState().GetData()}", this);
                                                            }
                                                        }

                                                    });
                                                }
                                            });
                                        }
                                    });
                                }

                            }, eventActions);
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    });
                }

                #endregion

                callback?.Invoke(callbackResults);
            }

            protected void OnRegisterScreen<T>(T screen, Action<Callback> callback = null) where T : ScreenUIData
            {
                if (screen != null)
                {
                    Callback callbackResults = new Callback(Helpers.GetAppComponentValid(screen, $"{(!string.IsNullOrEmpty(screen?.GetName()) ? screen?.GetName() : "Screen")}", $"Screen : {(!string.IsNullOrEmpty(screen?.GetName()) ? screen?.GetName() : "Screen Name Not Assigned")} Is Not Yet Initialized."));

                    if (callbackResults.Success())
                    {
                        if (!GetRegisteredScreens().ContainsKey(screen.GetName()) && !GetRegisteredScreens().ContainsValue(screen))
                        {
                            GetRegisteredScreens().Add(screen.GetName(), screen);

                            if (GetRegisteredScreens().ContainsKey(screen.GetName()) && GetRegisteredScreens().ContainsValue(screen))
                            {
                                callbackResults.result = $"Widget : {screen.GetName()} Of Type : {screen.GetType()} Has Been Registered Successfully.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"On Register Widget Failed - Widget : {screen.GetName()} - Of Type : {screen.GetType()} Is Not Registred - Unexpected Invalid Operation - Please Check Here.";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"On Register Widget Failed - Widget : {screen.GetName()} - Of Type : {screen.GetType()} Already Exists In Registred Widgets.";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                else
                    throw new ArgumentNullException("On Register Widget Failed - Widget Is Null / Missing");
            }

            protected Dictionary<string, ScreenUIData> GetRegisteredScreens() => registeredScreens;

            private async void InitializeWidgets(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if(initializeScreenWidgets)
                {
                    callbackResults.SetResult(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized."));

                    if (callbackResults.Success())
                    {
                        var appDatabaseManagerInstance = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                        callbackResults.SetResult(appDatabaseManagerInstance.GetAssetBundlesLibrary());

                        if (callbackResults.Success())
                        {
                            var assetBundlesLibrary = appDatabaseManagerInstance.GetAssetBundlesLibrary().GetData();

                            var awaitLoadedScreensTaskCallbackResults = await assetBundlesLibrary.OnAwaitAssetsInitialization(AssetBundleResourceLocatorType.Widget);

                            callbackResults.SetResult(awaitLoadedScreensTaskCallbackResults);

                            if (callbackResults.Success())
                            {
                                callbackResults.SetResult(assetBundlesLibrary.GetLoadedWidgets(GetType().GetData()));

                                if (callbackResults.Success())
                                {
                                    var loadedWidgets = assetBundlesLibrary.GetLoadedWidgets(GetType().GetData()).GetData();

                                    for (int i = 0; i < loadedWidgets.Count; i++)
                                    {
                                        var widgetComponent = Instantiate(loadedWidgets[i].gameObject).GetComponent<Widget>();
                                        widgetComponent.gameObject.SetName(loadedWidgets[i].GetName());

                                        callbackResults.SetResult(Helpers.GetAppComponentValid(widgetComponent, "Widget Component", $"Initialize Widgets Failed - Widget Component Not Found From Instantiated Object For Widget : {loadedWidgets[i].GetName()} - Of Type : {loadedWidgets[i].GetType().GetData()} - Invalid Operation, Please Check Here."));

                                        if (callbackResults.Success())
                                        {
                                            widgetComponent.Initilize(initializationCallbackResults =>
                                            {
                                                callbackResults.SetResult(initializationCallbackResults);

                                                if (callbackResults.Success())
                                                {
                                                    AddWidget(widgetComponent, screenWidgetAddedCallbackResults =>
                                                    {
                                                        callbackResults.SetResult(screenWidgetAddedCallbackResults);

                                                        if (callbackResults.UnSuccessful())
                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                    });
                                                }
                                            });
                                        }

                                        if(callbackResults.UnSuccessful())
                                        {
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                            break;
                                        }
                                    }
                                }

                                if(callbackResults.Success())
                                {
                                    callbackResults.SetResult(Helpers.GetAppComponentsValid(referencedWidgetDependencyAssets, "Referenced Widget Dependency Assets", $"There Are No Referenced Widget Dependency Assets To Be Initialized For Screen : {GetName()} - Of Type : {GetType().GetData()} - Resuming Execution Un-interrupted."));

                                    if (callbackResults.Success())
                                    {
                                        callbackResults.SetResult(assetBundlesLibrary.GetLoadedWidgets(screenReferencedWidgets: Helpers.GetArray(referencedWidgetDependencyAssets)));

                                        if (callbackResults.Success())
                                        {
                                            var loadedWidgets = assetBundlesLibrary.GetLoadedWidgets(screenReferencedWidgets: Helpers.GetArray(referencedWidgetDependencyAssets)).GetData();

                                            for (int i = 0; i < loadedWidgets.Count; i++)
                                            {
                                                var widgetComponent = Instantiate(loadedWidgets[i].gameObject).GetComponent<Widget>();
                                                widgetComponent.gameObject.SetName(loadedWidgets[i].GetName());

                                                widgetComponent.SetContentContainerType(referencedWidgetDependencyAssets[i].GetContentContainerType().GetData());
                                                widgetComponent.SetScreenUIPlacementType(referencedWidgetDependencyAssets[i].GetScreenUIPlacementType().GetData());
                                                widgetComponent.SetUIScreenWidgetVisibilityState(referencedWidgetDependencyAssets[i].GetInitialVisibilityState().GetData());

                                                callbackResults.SetResult(Helpers.GetAppComponentValid(widgetComponent, "Widget Component", $"Initialize Widgets Failed - Widget Component Not Found From Instantiated Object For Widget : {loadedWidgets[i].GetName()} - Of Type : {loadedWidgets[i].GetType().GetData()} - Invalid Operation, Please Check Here."));

                                                if (callbackResults.Success())
                                                {
                                                    widgetComponent.Initilize(initializationCallbackResults =>
                                                    {
                                                        callbackResults.SetResult(initializationCallbackResults);

                                                        if (callbackResults.Success())
                                                        {
                                                            AddWidget(widgetComponent, screenWidgetAddedCallbackResults =>
                                                            {
                                                                callbackResults.SetResult(screenWidgetAddedCallbackResults);

                                                                if (callbackResults.UnSuccessful())
                                                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                            });
                                                        }
                                                    });
                                                }

                                                if (callbackResults.UnSuccessful())
                                                {
                                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                    }
                                    else
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                {
                    callbackResults.result = $"Screen Widgets Initialization Is Not Enabled For Screen : {GetName()} - Of Type : {GetUIScreenType()}";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            private void AddWidget(Widget widget, Action<CallbackDataList<Widget>> callback = null)
            {
                var callbackResults = new CallbackDataList<Widget>(GetType());

                if (callbackResults.Success())
                {
                    if (!widgets.Contains(widget))
                    {
                        widgets.Add(widget);

                        if (widgets.Contains(widget))
                        {
                            callbackResults.SetResult(GetDynamicContainer(GetType().GetData(), widget.GetContentContainerType().GetData(), widget.GetScreenUIPlacementType().GetData()));

                            if (callbackResults.Success())
                            {
                                var container = GetDynamicContainer(GetType().GetData(), widget.GetContentContainerType().GetData(), widget.GetScreenUIPlacementType().GetData()).GetData();

                                callbackResults.SetResult(widget.GetInitialVisibility());

                                if (callbackResults.Success())
                                {
                                    container.AddContent<Widget, WidgetType, WidgetType>(uiScreenWidgetComponent: widget, keepWorldPosition: false, isActive: widget.GetInitialVisibility().GetData(), overrideContainerActiveState: true, updateContainer: true, widgetnAddedCallbackResults =>
                                    {
                                        callbackResults.SetResult(widgetnAddedCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            widget.SetParentWidget(this, parentSetCallbackResults =>
                                            {
                                                callbackResults.SetResult(parentSetCallbackResults);

                                                if (callbackResults.Success())
                                                {
                                                    callbackResults.result = $"Widget : {widget.GetName()} Of Type : {widget.GetType().GetData()} Has Been Added To Screen Widgets List.";
                                                    callbackResults.data = widgets;
                                                }
                                            });
                                        }
                                    });

                                    callbackResults.result = $"Screen Widget : {widget.GetName()} - Has Been Added Successfully To Screen Widgets List For Screen : {GetName()} - Of Type : {GetType().GetData()}.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                        else
                        {
                            callbackResults.result = $"Failed To Add Screen Widget : {widget.GetName()} - To Screen Widgets List For Screen : {GetName()} - Of Type : {GetType().GetData()} - Invalid Operation -Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Screen Widget : {widget.GetName()} Already Exists In Screen Widgets List For Screen : {GetName()} - Of Type : {GetType().GetData()}.";
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            public UIScreenWidgetVisibilityState GetUIScreenInitialVisibility()
            {
                return initialVisibilityState;
            }

            protected void OnWidgetsEvents(WidgetType widgetType, InputActionButtonType actionType, SceneDataPackets dataPackets)
            {
                if (widgets.Count == 0)
                    return;

                switch (widgetType)
                {
                    case WidgetType.ConfirmationPopUpWidget:


                        switch (actionType)
                        {
                            case InputActionButtonType.CloseButton:

                                HideScreenWidget(widgetType, dataPackets);

                                break;

                            case InputActionButtonType.ConfirmationButton:

                                //Debug.Log("--> Confirmed From Pop Up.");

                                //if (SceneAssetsManager.Instance.HasSelectedAssets())

                                //    SceneAssetsManager.Instance.DeleteSelectedSceneAssets((results) => 
                                //    {
                                //        if(results)
                                //        {
                                //            HideScreenWidget(widgetType, dataPackets);

                                //            if (ScreenUIManager.Instance != null)
                                //                ScreenUIManager.Instance.Refresh();
                                //        }
                                //        else
                                //            HideScreenWidget(widgetType, dataPackets);

                                //    });

                                break;
                        }

                        break;

                    case WidgetType.SliderValueWidget:

                        switch (actionType)
                        {
                            case InputActionButtonType.CloseButton:

                                HideScreenWidget(widgetType, dataPackets);

                                break;
                        }

                        break;
                }
            }

            protected async void OnScreenChangedEvent(ScreenType screenType)
            {
                if (screenType == ScreenType.ARViewScreen)
                {
                    ActionEvents.OnSetCurrentActiveSceneCameraEvent(SceneEventCameraType.ARViewCamera);
                    HideScreenWidget(WidgetType.SceneAssetPreviewWidget, new SceneDataPackets());
                }
                else
                    ActionEvents.OnSetCurrentActiveSceneCameraEvent(SceneEventCameraType.AssetPreviewCamera);


                OnScreenTogglableStateEvent(AppData.TogglableWidgetType.ResetAssetModelRotationButton, false);

                if (GetType().GetData() == screenType)
                    await ScreenUIManager.Instance.RefreshAsync();
            }

            protected void OnScreenTogglableStateEvent(TogglableWidgetType widgetType, bool state = false, bool useInteractability = false)
            {
                if (ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData() == GetType().GetData())
                {
                    if (!state)
                    {
                        ScreenTogglableWidget<GameObject> screenTogglableWidget = screenTogglableWidgetsList.Find((x) => x.widgetType == widgetType);

                        if (screenTogglableWidget.value != null)
                        {
                            if (useInteractability)
                            {
                                screenTogglableWidget.Interactable(state);
                            }
                            else
                            {
                                if (state)
                                    screenTogglableWidget.Show();
                                else
                                    screenTogglableWidget.Hide();
                            }
                        }
                        else
                            LogWarning($"Screen Togglable Widget Value For Widget Type : {widgetType} Is Null.", this, () => OnScreenTogglableStateEvent(widgetType, state = false, useInteractability = false));

                        canResetAssetPose = false;
                    }
                    else
                    {
                        if (!canResetAssetPose)
                        {
                            ScreenTogglableWidget<GameObject> screenTogglableWidget = screenTogglableWidgetsList.Find((x) => x.widgetType == widgetType);

                            if (screenTogglableWidget.value != null)
                            {
                                if (useInteractability)
                                    screenTogglableWidget.Interactable(state);
                                else
                                {
                                    if (state)
                                        screenTogglableWidget.Show();
                                    else
                                        screenTogglableWidget.Hide();
                                }

                                canResetAssetPose = true;
                            }
                        }
                    }
                }
            }

            protected void OnAssetPoseReset()
            {
                OnScreenTogglableStateEvent(TogglableWidgetType.ResetAssetModelRotationButton, false);
                canResetAssetPose = false;
            }

            protected void OnScreenRefreshed(Screen screen)
            {
                LogInfo($"Screen : {screen.name} - Refreshed Successfully", this, () => OnScreenRefreshed(screen));
            }

            #region UI Widgets States

            public void SetActionButtonChildWidgetsState(InputActionButtonType actionType, bool interactable, bool isSelected)
            {
                //if (ScreenUIManager.Instance.GetCurrentScreenData().value.GetUIScreenType() == GetType().GetData())
                //{
                //    if (screenActionButtonList != null)
                //    {
                //        foreach (var actionButton in screenActionButtonList)
                //        {
                //            if (actionType != InputActionButtonType.None)
                //            {
                //                if (actionButton.dataPackets.action == actionType)
                //                {
                //                    actionButton.SetChildWidgetsState(interactable, isSelected);
                //                    break;
                //                }
                //            }
                //            else
                //            {
                //                actionButton.SetChildWidgetsState(interactable, isSelected);
                //            }
                //        }
                //    }
                //    else
                //        LogWarning("Screen Action Button List Not Yet Initialized.", this, () => SetActionButtonChildWidgetsState(actionType, interactable, isSelected));
                //}
            }

            #endregion

            #region UI Screen View

            public void SetScreenView(UIScreenViewerComponent screenView) => this.screenView = screenView;

            public UIScreenViewerComponent GetScreenView()
            {
                return screenView;
            }

            #endregion

            #region Show View Async

            public async Task<CallbackData<Screen>> ShowViewAsync()
            {
                var showViewTaskResultsCallback = await GetScreenView().ShowScreenViewAsync();

                if (showViewTaskResultsCallback.Success())
                {
                    SubscribeToEvents(callback: subscriptionCallbackResults => 
                    {
                        if(subscriptionCallbackResults.UnSuccessful())
                            Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                    });
                }
                else
                    Log(showViewTaskResultsCallback.GetResultCode, showViewTaskResultsCallback.GetResult, this);

                return showViewTaskResultsCallback;
            }

            #endregion

            #region Hide View Async

            public async Task<CallbackData<Screen>> HideViewSync()
            {
                var hideViewTaskResultsCallback = await GetScreenView().HideScreenViewAsync();

                if (hideViewTaskResultsCallback.Success())
                {
                    UnSubscribeFromEvents(callback: subscriptionCallbackResults =>
                    {
                        if (subscriptionCallbackResults.UnSuccessful())
                            Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                    });
                }
                else
                    Log(hideViewTaskResultsCallback.GetResultCode, hideViewTaskResultsCallback.GetResult, this);

                return hideViewTaskResultsCallback;
            }

            #endregion

            public void ShowLoadingItem(LoadingItemType loaderType, bool status)
            {
                if (!includesLoadingAssets || loadingItemList.Count == 0)
                    return;

                foreach (var loadingItem in loadingItemList)
                {
                    if (loadingItem.type == loaderType)
                    {
                        switch (loaderType)
                        {
                            case LoadingItemType.Bar:

                                currentLoadingItem = loadingItem;
                                currentLoadingItem.isShowing = status;

                                SetObjectVisibilityState(loadingItem.loadingWidgetsContainer, status);

                                break;

                            case LoadingItemType.Spinner:

                                currentLoadingItem = loadingItem;
                                currentLoadingItem.isShowing = status;

                                SetObjectVisibilityState(loadingItem.loadingWidgetsContainer, status);

                                break;

                            case LoadingItemType.Text:

                                currentLoadingItem = loadingItem;
                                currentLoadingItem.isShowing = status;

                                SetObjectVisibilityState(loadingItem.loadingWidgetsContainer, status);

                                break;
                        }

                        break;
                    }
                }
            }

            public void DisplaySceneAssetInfo(Screen screen, Action<CallbackData<Screen>> callback = null)
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                //Helpers.GetComponentIsNotNullOrEmpty(screen.value.GetSceneAsset(), componentCheckCallback => 
                //{
                //    if(componentCheckCallback.Success())
                //    {
                //        AssetInfoHandler info = componentCheckCallback.data.GetInfo();

                //        if (componentCheckCallback.data.assetMode == AssetModeType.CreateMode)
                //        {
                //            AssetInfoField titleField = info.GetInfoField(InfoDisplayerFieldType.Title);
                //            titleField.name = AppDatabaseManager.Instance.GetDefaultAssetName();

                //            AssetInfoField verticesField = info.GetInfoField(InfoDisplayerFieldType.VerticesCounter);
                //            verticesField.value = 0;

                //            AssetInfoField trianglesField = info.GetInfoField(InfoDisplayerFieldType.TriangleCounter);
                //            trianglesField.value = 0;

                //            info.UpdateInfoField(titleField);
                //            info.UpdateInfoField(verticesField);
                //            info.UpdateInfoField(trianglesField);
                //        }

                //        infoDisplayer.SetAssetInfo(info);
                //    }
                //    else
                //    {
                //        callbackResults.result = componentCheckCallback.result;
                //        callbackResults.resultCode = componentCheckCallback.resultCode;
                //    }
                //});

                callback?.Invoke(callbackResults);
            }

            public bool GetLoadingItemState()
            {
                return currentLoadingItem.isShowing;
            }

            public Transform GetWidgetsContainer()
            {
                return widgetsContainer;
            }

            public void ShowWidget(WidgetType widgetType, bool blurScreen = false, string title = null, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (widgets.Count == 0)
                    return;

                var widget = widgets.Find(widget => widget.GetType().GetData() == widgetType);

                if (widget)
                {
                    SceneDataPackets dataPackets = new SceneDataPackets
                    {
                        widgetTitle = title,
                        widgetType = widgetType,
                        blurScreen = blurScreen
                    };

                    if (blurScreen)
                        Blur(dataPackets);

                    widget.ResetScrollPosition(scrollerResetCallback =>
                    {
                        if (scrollerResetCallback.Success())
                            widget.ShowScreenWidget(dataPackets);
                        else
                            Log(scrollerResetCallback.resultCode, scrollerResetCallback.result, this);
                    });
                }
                else
                    LogError($"Widget Of Type : {widgetType} - Missing / Not Found.", this);

                callback?.Invoke(callbackResults);
            }

            public async Task<Callback> ShowWidgetAsync(WidgetType widgetType, bool blurScreen = false, string title = null)
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(widgets, "Screen Widgets", screenWidgetsCallbackResults => 
                {
                    callbackResults.SetResult(screenWidgetsCallbackResults);

                }, "Screen Widgets Are Not Yet initialized.");

                if (callbackResults.Success())
                {
                    var widget = widgets.Find(widget => widget.GetType().GetData() == widgetType);

                    await Task.Yield();

                    if (widget)
                    {
                        SceneDataPackets dataPackets = new SceneDataPackets
                        {
                            widgetTitle = title,
                            widgetType = widgetType,
                            blurScreen = blurScreen
                        };

                        if (blurScreen)
                            Blur(dataPackets);

                        widget.ResetScrollPosition(scrollerResetCallback =>
                        {
                            if (scrollerResetCallback.Success())
                                widget.ShowScreenWidget(dataPackets);
                            else
                                Log(scrollerResetCallback.resultCode, scrollerResetCallback.result, this);
                        });
                    }
                    else
                        LogError($"Widget Of Type : {widgetType} - Missing / Not Found.", this);
                }

                return callbackResults;
            }

            public void ShowWidget(Widget widget)
            {
                if (widgets.Count == 0)
                    return;

                var widgetToShow = widgets.Find(data => data.GetType().GetData() == widget.GetType().GetData());

                if (widgetToShow)
                {
                    if (widget.GetBlurScreenState().GetData())
                        Blur(ScreenUIPlacementType.Default);

                    widget.ResetScrollPosition(scrollerResetCallback =>
                    {
                        if (scrollerResetCallback.Success())
                            widget.ShowScreenWidget(widget.GetType().GetData());
                        else
                            Log(scrollerResetCallback.resultCode, scrollerResetCallback.result, this);
                    });
                }
                else
                    LogError($"Widget Of Type : {widget.GetType().GetData()} - Missing / Not Found.", this);
            }

            public void ShowWidget(SceneDataPackets dataPackets)
            {
                if (widgets.Count == 0)
                    return;

                var widget = widgets.Find(widget => widget.GetType().GetData() == dataPackets.GetReferencedWidgetType().GetData().GetValue().GetData());

                if (widget)
                {
                    if (dataPackets.blurScreen)
                        Blur(dataPackets);

                    widget.ResetScrollPosition(scrollerResetCallback => 
                    {
                        if (scrollerResetCallback.Success())
                        {
                            Helpers.GetComponent(SelectableManager.Instance, validComponentCallbackResults => 
                            {
                                if (validComponentCallbackResults.Success())
                                {
                                    SelectableManager.Instance.GetProjectStructureSelectionSystem(selectionSystemCallbackResults => 
                                    {
                                        if (selectionSystemCallbackResults.Success())
                                        {
                                            selectionSystemCallbackResults.data.OnClearInputSelection(dataPackets.GetReferencedScreenType().GetData().GetValue().GetData(), inputsClearedCallbackResults => 
                                            {
                                                if (inputsClearedCallbackResults.Success())
                                                    widget.ShowScreenWidget(dataPackets);
                                                else
                                                    Log(inputsClearedCallbackResults.resultCode, inputsClearedCallbackResults.result, this);
                                            });
                                        }
                                        else
                                            Log(selectionSystemCallbackResults.resultCode, selectionSystemCallbackResults.result, this);
                                    });
                                }
                                else
                                    Log(validComponentCallbackResults.resultCode, validComponentCallbackResults.result, this);
                            });
                        }
                        else
                            Log(scrollerResetCallback.resultCode, scrollerResetCallback.result, this);
                    });
                }
                else
                    LogError($"Widget Of Type : {dataPackets.widgetType} - Missing / Not Found.", this);
            }

            public void ShowWidget(SceneDataPackets dataPackets, Action<bool> callback)
            {
                if (widgets.Count == 0)
                    return;

                foreach (var widget in widgets)
                {
                    if (widget.GetType().GetData() == dataPackets.widgetType)
                    {
                        if (dataPackets.blurScreen)
                            Blur(dataPackets);

                        widget.ShowScreenWidget(dataPackets);

                        callback.Invoke(true);

                        break;
                    }
                }
            }

            public void HideScreenWidget(WidgetType widgetType, bool canTransition = true)
            {
                LogInfo($"===========> Now Hide Widget Of Type : {widgetType}.................", this);

                if (widgets.Count == 0)
                    return;

                var widget = widgets.Find(widget => widget.GetType().GetData() == widgetType);

                if (widget != null)
                {
                    SelectableManager.Instance.GetProjectStructureSelectionSystem(selectionSystemCallbackResults =>
                    {
                        if (selectionSystemCallbackResults.Success())
                        {
                            selectionSystemCallbackResults.data.OnClearInputSelection(widgetType, selectionsClearedCallbackResults =>
                            {
                                if(selectionsClearedCallbackResults.Success())
                                {
                                    widget.HideWidget(hideCallback =>
                                    {
                                        if (hideCallback.Success())
                                        {
                                            Focus();
                                        }
                                        else
                                            Log(hideCallback.resultCode, hideCallback.result, this);
                                    });
                                }
                                else
                                    Log(selectionsClearedCallbackResults.resultCode, selectionsClearedCallbackResults.result, this);
                            });
                        }
                        else
                            Log(selectionSystemCallbackResults.resultCode, selectionSystemCallbackResults.result, this);
                    });
                }
                else
                    LogError($"Couldn't Hide Widget Of Type : {widgetType} - Widget Missing / Not Found.", this);
            }

            public async Task<Callback> HideScreenWidgetAsync(WidgetType widgetType, bool canTransition = true)
            {
                LogInfo($"===========> Now Hide Widget Of Type : {widgetType}.................", this);

                Callback callbackResults = new Callback();

                if (widgets.Count != 0)
                {
                    var widget = widgets.Find(widget => widget.GetType().GetData() == widgetType);

                    if (widget != null)
                    {
                        await widget.HideAsync();

                        Focus();
                    }
                    else
                        LogError($"Couldn't Hide Widget Of Type : {widgetType} - Widget Missing / Not Found.", this);
                }
                else
                    callbackResults.SetResults("Screen Widgets List Is Null", LogInfoChannel.Error);

                return callbackResults;
            }

            public async Task<Callback> HideScreenWidgetAsync(Widget widget, bool canTransition = true)
            {
                Callback callbackResults = new Callback();

                if (widgets.Count != 0)
                {
                    var widgetToHide = widgets.Find(toHide => toHide.GetType().GetData() == widget.GetType().GetData());

                    if (widgetToHide != null)
                    {
                        await widgetToHide.HideAsync();

                        Focus();
                    }
                    else
                        LogError($"Couldn't Hide Widget Of Type : {widget.GetType().GetData()} - Widget Missing / Not Found.", this);
                }
                else
                    callbackResults.SetResults("Screen Widgets List Is Null", LogInfoChannel.Error);

                return callbackResults;
            }

            public void HideScreenWidget(Widget widget, bool canTransition = true)
            {
                if (widgets.Count == 0)
                    return;

                if (widget != null)
                {
                    SelectableManager.Instance.GetProjectStructureSelectionSystem(selectionSystemCallbackResults =>
                    {
                        if (selectionSystemCallbackResults.Success())
                        {
                            selectionSystemCallbackResults.data.OnClearInputSelection(widget.GetType().GetData(), selectionsClearedCallbackResults =>
                            {
                                if (selectionsClearedCallbackResults.Success())
                                {
                                    widget.HideWidget(hideCallback =>
                                    {
                                        if (hideCallback.Success())
                                            Focus();
                                        else
                                            Log(hideCallback.resultCode, hideCallback.result, this);
                                    });
                                }
                                else
                                    Log(selectionsClearedCallbackResults.resultCode, selectionsClearedCallbackResults.result, this);
                            });
                        }
                        else
                            Log(selectionSystemCallbackResults.resultCode, selectionSystemCallbackResults.result, this);
                    });
                }
                else
                    LogError($"Couldn't Hide Widget Of Type : {widget} - Widget Missing / Not Found.", this);
            }

            public Widget GetWidget(WidgetType widgetType)
            {
                if (GetWidgetOfType(widgetType).Success())
                    return GetWidgetOfType(widgetType).GetData();
                else
                    Log(GetWidgetOfType(widgetType).GetResultCode, GetWidgetOfType(widgetType).GetResult, this);

                return null;
            }

            public CallbackData<Widget> GetWidgetOfType(WidgetType widgetType)
            {
                CallbackData<Widget> callbackResults = new CallbackData<Widget>(GetWidgets());

                if (callbackResults.Success())
                {
                    if (widgetType != WidgetType.None)
                    {
                        var widget = GetWidgets().GetData().Find(widget => widget.GetType().GetData() == widgetType);

                        if (widget != null)
                        {
                            callbackResults.result = $"Widget : {widget.GetName()} - Of Type : {widgetType} Has Been Loaded.";
                            callbackResults.data = widget;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Failed to Get Widget - Widget Of Type : {widgetType} Doesn't Exist In Screen Widgets List - Not Found.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Failed to Get Widget - Parameter Value Is Set To Default : {widgetType}";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }


            public Widget GetWidget(Widget widget)
            {
                return widgets.Find(data => data.GetType().GetData() == widget.GetType().GetData());
            }


            public CallbackDataList<Widget> GetWidgets()
            {
                CallbackDataList<Widget> callbackResults = new CallbackDataList<Widget>();

                Helpers.GetAppComponentsValid(widgets, "Screen Widgets List", componentsValidCallbackResults => 
                {
                    callbackResults.SetResult(componentsValidCallbackResults);

                    if (callbackResults.Success())
                        callbackResults.SetData(widgets);

                }, $"Screen Widegts For Screen : {GetName()} Of type : {GetUIScreenType()} - Are Not Yet Initialized.");

                return callbackResults;
            }

            public void HideScreenWidget(WidgetType widgetType, SceneDataPackets dataPackets, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetWidgets());

                if (callbackResults.Success())
                 {
                    var widget = widgets.Find(widget => widget.GetType().GetData() == widgetType);

                    Helpers.GetAppComponentValid(widget, "Widget", componentValidCallbackResults => 
                    {
                        callbackResults.SetResult(componentValidCallbackResults);
                    
                        if(callbackResults.Success())
                        {
                            SelectableManager.Instance.GetProjectStructureSelectionSystem(selectionSystemCallbackResults =>
                            {
                                callbackResults.SetResult(selectionSystemCallbackResults);

                                if (callbackResults.Success())
                                {
                                    selectionSystemCallbackResults.data.OnClearInputSelection(widgetType, selectionsClearedCallbackResults =>
                                    {
                                        callbackResults.SetResult(selectionsClearedCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            widget.HideWidget();

                                            if (widgetType == WidgetType.ConfirmationPopUpWidget)
                                            {
                                                if (SelectableManager.Instance)
                                                {
                                                    if (!SelectableManager.Instance.HasAssetSelected() && !SelectableManager.Instance.HasSelection())
                                                        ActionEvents.OnTransitionSceneEventCamera(dataPackets);
                                                    else
                                                        LogWarning("There Is Still A Selection Active.", this, () => HideScreenWidget(widgetType, dataPackets));
                                                }
                                                else
                                                    LogError("Selectable Manager Not Yet Initialized.", this, () => HideScreenWidget(widgetType, dataPackets));
                                            }

                                            if (widget.GetType().GetData() == WidgetType.SceneAssetPreviewWidget)
                                                if (SelectableManager.Instance.GetSceneAssetInteractableMode() == SceneAssetInteractableMode.Orbit)
                                                    ActionEvents.OnResetCameraToDefaultPoseEvent();

                                            Focus();
                                        }
                                        else
                                            LogError("Selectable Manager Not Yet Initialized.", this, () => HideScreenWidget(widgetType, dataPackets));
                                    });
                                }
                                else
                                    Log(callbackResults.resultCode, callbackResults.result, this);
                            });
                        }
                    
                    }, $"Widget Of Type : {widgetType} not Found For Screen : {GetName()} Of Type : {GetUIScreenType()}.", $"Widget : {widget.GetName()} Of Type : {widget.GetType()} Has been Successfully Found For Screen : {GetName()} Of Type : {GetUIScreenType()}.");
                }

                callback?.Invoke(callbackResults);
            }

            public void HideScreenWidgets()
            {
                if (widgets.Count == 0)
                    return;

                foreach (var widget in widgets)
                {
                    widget.HideWidget();
                }

                Focus();
            }

            public Widget GeWidget(WidgetType type)
            {
                Widget widget = null;

                if (widgets != null)
                {
                    foreach (var widgetComponent in widgets)
                    {
                        if (widgetComponent.GetType().GetData() == type)
                        {
                            widget = widgetComponent;
                            break;
                        }
                        else
                            continue;
                    }
                }

                return widget;
            }

            public void HidePopUp(WidgetType popUpType)
            {
                screenBlur.Hide();
            }

            public void Focus()
            {
                screenBlur.Hide();

                ActionEvents.OnScreenViewStateChangedEvent(ScreenViewState.Focused);
            }

            public void Blur(SceneDataPackets dataPackets)
            {
                if (dataPackets.blurScreen)
                {
                    screenBlur.Show(dataPackets.GetReferencedUIScreenPlacementType().GetData().GetValue().GetData());

                    if (dataPackets.screenViewState == ScreenViewState.None)
                        dataPackets.screenViewState = ScreenViewState.Blurred;

                    ActionEvents.OnScreenViewStateChangedEvent(dataPackets.screenViewState);
                }
                else
                    screenBlur.Hide();
            }

            public void Blur(ScreenUIPlacementType placementType)
            {
                screenBlur.Show(placementType);

                //if (dataPackets.blurScreen)
                //{
                  

                //    if (dataPackets.screenViewState == ScreenViewState.None)
                //        dataPackets.screenViewState = ScreenViewState.Blurred;

                //    ActionEvents.OnScreenViewStateChangedEvent(dataPackets.screenViewState);
                //}
                //else
                //    screenBlur.Hide();
            }

            public GameObject GetScreenObject()
            {
                return GetScreenView().GetView().GetData();
            }

            public Vector2 GetScreenPosition()
            {
                return screenPosition;
            }

            public string GetScreenTitle()
            {
                return screenTitle;
            }

            public ScreenType GetUIScreenType()
            {
                return GetType().GetData();
            }

            void OnButtonClicked(Widget widget, InputActionButtonType actionType, SceneDataPackets dataPackets)
            {
                widget.OnWidgetActionEvent(widget.GetType().GetData(), actionType, dataPackets);
            }

            //public SceneAsset GetSceneAsset()
            //{
            //    return GetDataPackets().GetData().sceneAsset;
            //}

            void SetObjectVisibilityState(GameObject value, bool state) => value.SetActive(state);
        
            public SceneDataPackets GetActionButtonDataPackets(InputActionButtonType actionType)
            {
                SceneDataPackets dataPackets = new SceneDataPackets();

                //if (screenActionButtonList.Count > 0)
                //{
                //    foreach (var actionButton in screenActionButtonList)
                //    {
                //        if (actionButton.value != null)
                //        {
                //            dataPackets = actionButton.dataPackets;
                //            Debug.Log("--> Action Button Data Packets Assigned Successfully.");
                //        }
                //        else
                //            LogWarning($"Action Button : {actionButton.name} Value Is Missing / Null.", this, () => GetActionButtonDataPackets(actionType));
                //    }
                //}
                //else
                //    LogWarning($"Action Button List Not Initialized for : {this.gameObject.name}", this, () => GetActionButtonDataPackets(actionType));

                return dataPackets;
            }
        }

        public abstract class Selectable : AppMonoBaseClass
        {
            #region Components

            #endregion

            #region Unity Callbacks

            void OnEnable()
            {
                SetupTouchSupport(true);
                OnSubscribeToActionEvents(true);
            }

            private void OnDisable() => OnSubscribeToActionEvents(false);

            private void Start() => OnInitialization();

            void Update() => UpdateSelectableStateAction();

            #endregion

            #region Main

            void SetupTouchSupport(bool subscribe)
            {
                if (subscribe)
                {
                    EnhancedTouchSupport.Enable();
                    TouchSimulation.Enable();

                    Touch.onFingerDown += OnFingerDown;
                    Touch.onFingerMove += OnFingerMoved;
                    Touch.onFingerUp += OnFingerUp;

                }
                else
                {
                    EnhancedTouchSupport.Disable();
                    TouchSimulation.Disable();

                    Touch.onFingerDown -= OnFingerDown;
                    Touch.onFingerMove -= OnFingerMoved;
                    Touch.onFingerUp -= OnFingerUp;
                }
            }

            #region Overrides

            protected abstract void OnInitialization();
            protected abstract void OnSubscribeToActionEvents(bool subscribe);
            protected abstract void OnFingerDown(Finger finger);
            protected abstract void OnFingerMoved(Finger finger);
            protected abstract void OnFingerUp(Finger finger);
            protected abstract void UpdateSelectableStateAction();

            #endregion

            #endregion
        }

        [Serializable]
        public class UIScreenData
        {
            #region Components

            public string name;

            #endregion
        }

        public class UIScreenGroupContent : UIScreenData
        {
            #region Components

            public InputUIState state;
            public List<string> contents = new List<string>();

            public InputActionButtonType buttonActionType;
            public InputDropDownActionType dropDownActionType;
            public InputFieldActionType inputFieldActionType;
            public CheckboxInputActionType checkboxActionType;

            public InputType inputType;

            public string content;
            public string placeHolder;

            public bool value;

            #endregion

            #region Main

            public UIScreenGroupContent()
            {

            }

            public UIScreenGroupContent(InputUIState state = InputUIState.Normal, string content = null, List<string> contents = null, string placeHolder = null, bool value = false, InputActionButtonType buttonActionType = InputActionButtonType.None, InputDropDownActionType dropDownActionType = InputDropDownActionType.None, InputFieldActionType inputFieldActionType = InputFieldActionType.None, CheckboxInputActionType checkboxActionType = CheckboxInputActionType.None)
            {
                this.state = state;
                this.content = content;
                this.contents = contents;
                this.placeHolder = placeHolder;
                this.buttonActionType = buttonActionType;
                this.dropDownActionType = dropDownActionType;
                this.inputFieldActionType = inputFieldActionType;
                this.checkboxActionType = checkboxActionType;
                this.value = value;
            }

            public void SetUIInputState(InputUIState state) => this.state = state;

            public void SetValue(bool value) => this.value = value;

            public void SetPlaceHolder(string placeHolder) => this.placeHolder = placeHolder;
            public void SetContent(string content) => this.content = content;
            public void SetContent(List<string> contents) => this.contents = contents;

            #endregion
        }

        public class Interactable : AppMonoBaseClass
        {

        }

        public class SceneAssetModel : AppMonoBaseClass
        {
            #region Components

            public GameObject value;

            Transform container;

            [SerializeField]
            Vector3 defaultScale;

            bool assetInitialized = false;

            #endregion

            #region Unity Callbacks

            void OnEnable() => OnSubscribeToEvents(true);

            void OnDisable() => OnSubscribeToEvents(false);

            #endregion

            #region Main

            public void Init(Vector3 scale)
            {
                if (!assetInitialized)
                {
                    defaultScale = scale;
                    assetInitialized = true;
                }
            }

            void OnSubscribeToEvents(bool subscribed)
            {
                if (subscribed)
                    ActionEvents._OnUpdateSceneAssetDefaultRotation += SetSceneAssetModelRotation;
                else
                    ActionEvents._OnUpdateSceneAssetDefaultRotation -= SetSceneAssetModelRotation;
            }


            public void SetSceneAssetModelRotation(Quaternion rotation)
            {
                if (value)
                    value.transform.rotation = rotation;
                else
                    Debug.LogWarning("--> Scele Asset Model Value Missing / Null");
            }

            public void SetSceneAssetModelPosition(Vector3 position)
            {
                if (value)
                    value.transform.localScale = position;
                else
                    Debug.LogWarning("--> Scele Asset Model Value Missing / Null");
            }

            public void SetSceneAssetModelScale(Vector3 scale)
            {
                if (value)
                    value.transform.localScale = scale;
                else
                    Debug.LogWarning("--> Scele Asset Model Value Missing / Null");
            }

            public void Reset(bool setActive = false, bool revertTodefaultScale = true, Transform parent = null)
            {
                if (value)
                {
                    value.SetActive(setActive);

                    if (parent != null)
                        value.transform.SetParent(parent);

                    if (revertTodefaultScale)
                        value.transform.localScale = defaultScale;

                    value.transform.position = Vector3.zero;
                }
                else
                    Debug.LogWarning("--> Scele Asset Model Value Missing / Null");
            }

            public Vector3 GetSceneAssetModelScale()
            {
                return value.transform.localScale;
            }

            public void SetContainer(Transform assetContainer)
            {
                container = assetContainer;
            }

            public Transform GetContainer()
            {
                return container;
            }

            #endregion
        }

        [Serializable]
        public struct WidgetLayoutView
        {
            #region Components

            public string layoutName;

            [Space(5)]
            public GameObject layout;

            [Space(5)]
            public WidgetLayoutViewType viewType;

            #endregion

            #region Main

            public string GetName() => !string.IsNullOrEmpty(layoutName) ? layoutName : "Layout View Name Is Not Assigned.";
            public void SetName(string layoutName) => this.layoutName = layoutName;

            public new CallbackData<WidgetLayoutViewType> GetType()
            {
                var callbackResults = new CallbackData<WidgetLayoutViewType>();

                if(viewType == WidgetLayoutViewType.DefaultView)
                {
                    callbackResults.result = $"Layout View : {GetName()} Is Set To View Type : {viewType}";
                    callbackResults.data = viewType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Layout View Type For Layout View : {GetName()} - View Type Is Set To Default : {viewType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void ShowLayout(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(Initialized());

                if (callbackResults.Success())
                    Initialized().GetData().Show();

                callback?.Invoke(callbackResults);
            }

            public void HideLayout(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(Initialized());

                if (callbackResults.Success())
                    Initialized().GetData().Hide();

                callback?.Invoke(callbackResults);
            }

            public CallbackData<GameObject> Initialized()
            {
                var callbackResults = new CallbackData<GameObject>(GetType());

                if (callbackResults.Success())
                {
                    if (layout != null)
                    {
                        callbackResults.result = $"Layout View : {GetName()} Of View Type : {GetType().GetData()} - Has Been Initialized Successfully.";
                        callbackResults.data = layout;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Failed To Initialize Layout : {GetName()} Of View Type : {GetType().GetData()} - Layout Value Is Missing / Null / Not Assigned In The Unity Editor Inspector Panel.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class UIScreenWidgetsPrefabDataLibrary
        {
            #region Components

            [Header("Widgets Prefabs Library")]

            [Space(5)]
            public List<UIScreenWidgetsPrefabData> screenWidgetPrefabDataList = new List<UIScreenWidgetsPrefabData>() ;

            #endregion

            #region Main

            public void GetAllUIScreenWidgetsPrefabData(Action<CallbackDataList<UIScreenWidgetsPrefabData>> callback)
            {
                CallbackDataList<UIScreenWidgetsPrefabData> callbackResults = new CallbackDataList<UIScreenWidgetsPrefabData>();

                if (screenWidgetPrefabDataList != null && screenWidgetPrefabDataList.Count > 0)
                {
                    var initializedWidgetPrefabList = screenWidgetPrefabDataList.FindAll(widgetPrefab => widgetPrefab.IsInitialized());

                    if (initializedWidgetPrefabList != null && initializedWidgetPrefabList.Count > 0 )
                    {
                        callbackResults.result = $"{screenWidgetPrefabDataList.Count} Initialized Screen UI Widgets Prefabs Data Found - Loaded.";
                        callbackResults.data = screenWidgetPrefabDataList;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Initialized UI Screen Widgets Prefab Data From UI Screen Widgets Prefab Data Library. - Screen Widget Prefab Data List Has No Data / Is Null / Empty / Not Initialized In Scene Assets Manager Editor Inspector.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Couldn't Get All UI Screen Widgets Prefab Data From UI Screen Widgets Prefab Data Library. - Screen Widget Prefab Data List Has No Data / Is Null / Empty / Not Initialized In Scene Assets Manager Editor Inspector.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void GetAllUIScreenWidgetsPrefabDataForScreen(ScreenType screenType, Action<CallbackDataList<UIScreenWidgetsPrefabData>> callback)
            {
                CallbackDataList<UIScreenWidgetsPrefabData> callbackResults = new CallbackDataList<UIScreenWidgetsPrefabData>();

                if(screenWidgetPrefabDataList != null && screenWidgetPrefabDataList.Count > 0 )
                {
                    var widgetsPefabsFoundForScreenTypeList = screenWidgetPrefabDataList.FindAll(widgetPrefab => widgetPrefab.GetScreenType() == screenType);

                    if(widgetsPefabsFoundForScreenTypeList != null && widgetsPefabsFoundForScreenTypeList.Count > 0)
                    {
                        var initializedWidgetPrefabList = widgetsPefabsFoundForScreenTypeList.FindAll(widgetPrefab => widgetPrefab.IsInitialized());

                        if (initializedWidgetPrefabList != null && initializedWidgetPrefabList.Count > 0)
                        {
                            callbackResults.result = $"{widgetsPefabsFoundForScreenTypeList.Count} Initialized UI Screen Widget Prefab(s) For Screen Type : {screenType} Found - Loaded.";
                            callbackResults.data = widgetsPefabsFoundForScreenTypeList;
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Find Initialized UI Screen Widgets Prefab Data For Screen Type : {screenType} - From UI Screen Widgets Prefab Data Library. - Screen Widget Prefab Data List Has No Data / Is Null / Empty / Not Initialized In Scene Assets Manager Editor Inspector.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Find Any UI Screen Widget Prefab Data For Screen Type : {screenType} - Please Make Sure UI Screen Widget Prefabs Data For Screen Type : {screenType} Is Initialized In Scene Assets Manager Editor Inspector.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Couldn't Get All UI Screen Widgets Prefab Data For Screen Type : {screenType} - Screen Widget Prefab Data List Has No Data / Is Null / Empty / Not Initialized In Scene Assets Manager Editor Inspector.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion
        }


        [Serializable]
        public class UIScreenWidgetsPrefabData : AppComponent
        {
            #region Components

            [Space(5)]
            public List<UIScreenWidget> screenWidgetPrefabList = new List<UIScreenWidget>();

            [Space(5)]
            public ScreenType screenType;

            [Space(5)]
            public bool initializePrefabData = false;

            #endregion

            #region Main

            public void SetInitialized(bool initialize) => initializePrefabData = initialize;

            public bool IsInitialized()
            {
                return initializePrefabData;
            }

            public List<UIScreenWidget> GetUIScreenWidgetsPrefabData()
            {
                return screenWidgetPrefabList;
            }

            public void AddUIScreenWidgetPrefabData(UIScreenWidget widgetPrefab, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (screenWidgetPrefabList != null)
                {
                    if (widgetPrefab != null)
                    {
                        if (widgetPrefab.GetUIWidgetPresenterScreenType() == screenType)
                        {
                            if (!screenWidgetPrefabList.Contains(widgetPrefab))
                            {
                                screenWidgetPrefabList.Add(widgetPrefab);

                                if (screenWidgetPrefabList.Contains(widgetPrefab))
                                {
                                    callbackResults.result = $"Added UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} To UI Screen Widgets Prefab Data Library For Screen Type : {screenType}.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"Couldn't Add UI Screen Widget Prefab Data For Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} To UI Screen Widgets Prefab Data Library Of Screen Type : {screenType} - UI Screen Widget Prefab Data Named : {widgetPrefab.name} With Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()}. Not Sure What Could Be The Issue, Please Check Scene Assets Manager Prefab Library..";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Couldn't Add UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} To UI Screen Widgets Prefab Data Of Screen Type : {screenType} - UI Screen Widget Prefab Data Named : {widgetPrefab.name} With Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} Already Exists In The UI Screen Woidgets Data Library.";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Add UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} To UI Screen Widgets Prefab Data Of Screen Type : {screenType} - Screen Type : Is Invalid For This Data. Please Add To Matching Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()}";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Add UI Screen Widget Prefab Data To UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - Widget Is Null / Missing / Not Found.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Couldn't Add UI Screen Widget Prefab Dat To UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - Screen Widgets List Is Null / Not Initialized In SCene Assets Manager's Editor.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void RemoveUIScreenWidgetPrefabData(UIScreenWidget widgetPrefab, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (screenWidgetPrefabList != null)
                {
                    if (widgetPrefab != null)
                    {
                        if (widgetPrefab.GetUIWidgetPresenterScreenType() == screenType)
                        {
                            if (screenWidgetPrefabList.Contains(widgetPrefab))
                            {
                                screenWidgetPrefabList.Remove(widgetPrefab);

                                if (!screenWidgetPrefabList.Contains(widgetPrefab))
                                {
                                    callbackResults.result = $"Removed UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} From UI Screen Widgets Prefab Data Library For Screen Type : {screenType}.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"Couldn't Remove UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} From UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - UI Screen Widget Prefab Data Named : {widgetPrefab.name} With Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} Not Removed. Not Sure What Could Be The Issue, Please Check Here.";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"Couldn't Remove UI Screen Widget Prefab Data Of Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} From UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - UI Screen Widget Prefab Data Named : {widgetPrefab.name} With Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} Doesn't Exist In The UI Screen Widgets Data Library.";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Couldn't Remove UI Screen Widget Prefab Data For Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()} From UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - Screen Type : Is Invalid For This Data. Please Check To See If Is Matching Screen Type : {widgetPrefab.GetUIWidgetPresenterScreenType()}";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Remove UI Screen Widget Prefab From UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - Widget Is Null / Missing / Not Found.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Couldn't Remove UI Screen Widget Prefab From UI Screen Widgets Prefab Data Library For Screen Type : {screenType} - Screen Widgets List Is Null / Not Initialized In SCene Assets Manager's Editor.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetUIScreenWidgetData(SelectableWidgetType assetType, LayoutViewType viewType, Action<CallbackData<UIScreenWidget>> callback)
            {
                CallbackData<UIScreenWidget> callbackResults = new CallbackData<UIScreenWidget>();

                if (screenWidgetPrefabList != null && screenWidgetPrefabList.Count > 0)
                {
                    // Find Asset Type
                    var foundScreenWidgetsList = screenWidgetPrefabList.FindAll(widgets => widgets.GetSelectableWidgetType() == assetType);

                    if (foundScreenWidgetsList != null && foundScreenWidgetsList.Count > 0)
                    {
                        // Find Layout View Type
                        var foundWidgetOfViewType = foundScreenWidgetsList.FindAll(widgets => widgets.GetLayoutViewType() == viewType);

                        if (foundWidgetOfViewType != null && foundWidgetOfViewType.Count > 0)
                        {
                            var widget = foundWidgetOfViewType.FirstOrDefault(widget => widget.GetUIWidgetPresenterScreenType() == screenType);

                            if (widget != null)
                            {
                                callbackResults.result = $"UI Screen Widgets Prefab Data Of Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Found / Loaded.";
                                callbackResults.data = widget;
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"UI Screen Widgets Prefab Data Of Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Null / Missing / Not Found - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of Asset Type : {assetType} And View Type : {viewType} For UI Screen Widget Presenter Of Type : {screenType} In Scene Assets Manager's Editor Panel.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Layout View Type : {viewType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of View Type : {viewType} In Scene Assets Manager's Editor Panel.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Selectable Asset Type : {assetType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized In Scene Assets Manager's Editor Panel.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Screen Widgets For UI SCreen Widgets Asset Of Screen Type : {screenType} Is Null / Empty / Missing / Not Assigned  In Scene Assets Manager Editor Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public CallbackData<UIScreenWidget> GetUIScreenWidgetData(SelectableWidgetType assetType, LayoutViewType viewType)
            {
                CallbackData<UIScreenWidget> callbackResults = new CallbackData<UIScreenWidget>();

                if (screenWidgetPrefabList != null && screenWidgetPrefabList.Count > 0)
                {
                    // Find Asset Type
                    var foundScreenWidgetsList = screenWidgetPrefabList.FindAll(widgets => widgets.GetSelectableWidgetType() == assetType);

                    if (foundScreenWidgetsList != null && foundScreenWidgetsList.Count > 0)
                    {
                        // Find Layout View Type
                        var foundWidgetOfViewType = foundScreenWidgetsList.FindAll(widgets => widgets.GetLayoutViewType() == viewType);

                        if (foundWidgetOfViewType != null && foundWidgetOfViewType.Count > 0)
                        {
                            var widget = foundWidgetOfViewType.FirstOrDefault(widget => widget.GetUIWidgetPresenterScreenType() == screenType);

                            if (widget != null)
                            {
                                callbackResults.result = $"UI Screen Widgets Prefab Data Of Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Found / Loaded.";
                                callbackResults.data = widget;
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"UI Screen Widgets Prefab Data Of Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Null / Missing / Not Found - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of Asset Type : {assetType} And View Type : {viewType} For UI Screen Widget Presenter Of Type : {screenType} In Scene Assets Manager's Editor Panel.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Layout View Type : {viewType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of View Type : {viewType} In Scene Assets Manager's Editor Panel.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Selectable Asset Type : {assetType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized In Scene Assets Manager's Editor Panel.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Screen Widgets For UI SCreen Widgets Asset Of Screen Type : {screenType} Is Null / Empty / Missing / Not Assigned  In Scene Assets Manager Editor Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void GetUIScreenWidgetData(SelectableWidgetType widgetType, SelectableWidgetType assetType, LayoutViewType viewType, Action<CallbackData<UIScreenWidget>> callback)
            {
                CallbackData<UIScreenWidget> callbackResults = new CallbackData<UIScreenWidget>();

                if (screenWidgetPrefabList != null && screenWidgetPrefabList.Count > 0)
                {
                    // Find Widget Type
                    var foundWidgetsOfTypeList = screenWidgetPrefabList.FindAll(widgets => widgets.GetSelectableType() == widgetType);

                    if(foundWidgetsOfTypeList != null && foundWidgetsOfTypeList.Count > 0)
                    {
                        // Find Asset Type
                        var foundScreenWidgetsList = foundWidgetsOfTypeList.FindAll(widgets => widgets.GetSelectableWidgetType() == assetType);

                        if (foundScreenWidgetsList != null && foundScreenWidgetsList.Count > 0)
                        {
                            // Find Layout View Type
                            var foundWidgetOfViewType = foundScreenWidgetsList.FindAll(widgets => widgets.GetLayoutViewType() == viewType);

                            if(foundWidgetOfViewType != null && foundWidgetOfViewType.Count > 0)
                            {
                                var widget = foundWidgetOfViewType.FirstOrDefault(widget => widget.GetUIWidgetPresenterScreenType() == screenType);

                                if(widget != null)
                                {
                                    callbackResults.result = $"UI Screen Widgets Prefab Data Of Widget Type : {widgetType} - On Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Found / Loaded.";
                                    callbackResults.data = widget;
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"UI Screen Widgets Prefab Data Of Widget Type : {widgetType} - On Asset Type : {assetType} With Layout View Type : {viewType} - For UI Widget Presenter Screen Type : {screenType} Null / Missing / Not Found - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of Asset Type : {assetType} And View Type : {viewType} For UI Screen Widget Presenter Of Type : {screenType} In Scene Assets Manager's Editor Panel.";
                                    callbackResults.data = default;
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                            else
                            {
                                callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Layout View Type : {viewType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized With UI Screen Widgets Prefab Data Of View Type : {viewType} In Scene Assets Manager's Editor Panel.";
                                callbackResults.data = default;
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"There Are No UI Screen Widgets Prefab Data Of Selectable Asset Type : {assetType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} - Please Varify If For UI Screen Widgets Prefab Data Library Is Initialized In Scene Assets Manager's Editor Panel.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"There Are No Screen Widgets Of Selectable Widgets Type : {widgetType} Found On UI Screen Widgets Prefab Data For UI Screen Type : {screenType} Please Varify If UI Screen Widgets Prefab Data Library Is Initialized With Widget Of Type : {widgetType} - In Scene Assets Manager's Editor Panel.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Screen Widgets For UI SCreen Widgets Asset Of Screen Type : {screenType} Is Null / Empty / Missing / Not Assigned  In Scene Assets Manager Editor Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }    

                callback.Invoke(callbackResults);
            }

            public UIScreenWidget GetUIScreenWidgetData(SelectableWidgetType widgetType, SelectableWidgetType assetType, LayoutViewType viewType)
            {
                UIScreenWidget screenWidgetData = null;

                if (screenWidgetPrefabList != null && screenWidgetPrefabList.Count > 0)
                {
                    // Find Widget Type
                    var foundWidgetsOfTypeList = screenWidgetPrefabList.FindAll(widgets => widgets.GetSelectableType() == widgetType);

                    if (foundWidgetsOfTypeList != null && foundWidgetsOfTypeList.Count > 0)
                    {
                        // Find Asset Type
                        var foundScreenWidgetsList = foundWidgetsOfTypeList.FindAll(widgets => widgets.GetSelectableWidgetType() == assetType);

                        if (foundScreenWidgetsList != null && foundScreenWidgetsList.Count > 0)
                        {
                            // Find Layout View Type
                            var foundWidgetOfViewType = foundScreenWidgetsList.FindAll(widgets => widgets.GetLayoutViewType() == viewType);

                            if (foundWidgetOfViewType != null && foundWidgetOfViewType.Count > 0)
                            {
                                var widget = foundWidgetOfViewType.FirstOrDefault(widget => widget.GetUIWidgetPresenterScreenType() == screenType);

                                if (widget != null)
                                    screenWidgetData = widget;
                            }
                        }
                    }
                }

                return screenWidgetData;
            }

            public ScreenType GetScreenType()
            {
                return screenType;
            }

            public void Clear() => screenWidgetPrefabList.Clear();

            #endregion
        }

        public class WidgetStatePacket<T, U> where T : Enum where U : Enum
        {
            #region Components

            public string name;
            public T type;
            public WidgetStateType state;
            public UIScreenWidget<T, U> value;

            #endregion

            #region Constructors

            public WidgetStatePacket()
            {

            }

            public WidgetStatePacket(UIScreenWidget<T, U> value, WidgetStateType stateType)
            {
                SetName(value.GetName());
                SetType(value.GetType().GetData());
                SetStateType(stateType);
                SetValue(value);
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetName(string name) => this.name = name;
            public void SetType(T type) => this.type = type;
            public void SetStateType(WidgetStateType state) => this.state = state;
            public void SetValue(UIScreenWidget<T, U> value) => this.value = value;

            #endregion

            #region Data Getters

            public string GetName() => !string.IsNullOrEmpty(name)? name : "Widget State Object Name Is Not Assigned";

            public new CallbackData<T> GetType()
            {
                var callbackResults = new CallbackData<T>();

                if (type.ToString().ToLower() != "none")
                {
                    callbackResults.result = $"State Widget : {GetName()} - Is Set To Type : {type}";
                    callbackResults.data = type;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get State Widget Type For Widget State Packet : {GetName()} - State Widget Type Is Set To Default : {type}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<WidgetStateType> GetStateType()
            {
                var callbackResults = new CallbackData<WidgetStateType>();

                if (state.ToString().ToLower() != "none")
                {
                    callbackResults.result = $"Widget State : {GetName()} - Is Set To Type : {state}";
                    callbackResults.data = state;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get State For Widget State Packet : {GetName()} - State Is Set To Default : {state}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public CallbackData<UIScreenWidget<T, U>> GetValue()
            {
                var callbackResults = new CallbackData<UIScreenWidget<T, U>>();

                if(value != null)
                {
                    callbackResults.result = $"Widget State Packet : {GetName()} - Of Type : {GetType().GetData()} Value Has Been Loaded And Initialized Successfully With State Type : {GetStateType().GetData()}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Widget State Packet : {GetName()}'s Get Value Function Failed. Value Is Null / Not Yet Intialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public Callback Initialized(T widgetType)
            {
                Callback callbackResults = new Callback(GetType());

                if (callbackResults.Success())
                { 
                    if (widgetType.ToString() == GetType().GetData().ToString())
                    {
                        callbackResults.result = $"Widget State Object : {GetName()} - Of Type : {GetType().GetData()} Has Been Successfully Initialized With State : {GetStateType().GetData()} Successfully.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Widget State Object : {GetName()} - Type : {GetType().GetData()} - Doesn't Match Required Type : {widgetType}.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Widget State Object : {GetName()} - Is Not Yet Initialized - Type : {GetType().GetData()} - State : {GetStateType().GetData()}.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [DisallowMultipleComponent]
        [Serializable]
        public abstract class UIScreenWidget<T, U> : AppMonoBaseClass, IScreenWidget<T, U> where T : Enum where U : Enum
        {
            #region Components

            [Space(15)]
            [Header("Widget Properties")]

            [Space(15)]
            [SerializeField]
            protected TMP_Text titleDisplayer;

            [Space(5)]
            [SerializeField]
            protected T widgetType;

            [Space(5)]
            [SerializeField]
            protected ContentContainerType uIPlacementContainerType = ContentContainerType.None;

            [Space(5)]
            [SerializeField]
            protected ScreenUIPlacementType uIPlacementType;

            [Space(5)]
            [SerializeField]
            protected int orderInLayer = 0;

            [Space(5)]
            [SerializeField]
            protected TransitionType transitionType = TransitionType.None;

            [Space(5)]
            [SerializeField]
            protected UIScreenWidgetVisibilityState initialVisibilityState = UIScreenWidgetVisibilityState.None;

            [Space(15)]
            [Header("Referenced Dependencies")]

            [Space(10)]
            [SerializeField]
            protected List<ScreenReferencedWidgetDependencyAssetBundle<U>> referencedWidgetDependencyAssets = new List<ScreenReferencedWidgetDependencyAssetBundle<U>>();

            [Space(10)]
            [Header("Dynamic Containers")]

            [Space(15)]
            [SerializeField]
            List<DynamicContainerBase> dynamicContainerList = new List<DynamicContainerBase>();

            [Space(15)]
            [Header("Action Events")]

            [Space(10)]
            [SerializeField]
            protected List<EventActionData> eventActions = new List<EventActionData>();

            #region UI Transitonable Components

            private List<TransitionableUIComponent> transitionableUIComponentList = new List<TransitionableUIComponent>();

            #endregion

            #region Timed Events

            private List<TimedEventComponent> timedEventComponentList = new List<TimedEventComponent>();

            #endregion

            #region Event Actions

            [Space(5)]
            [SerializeField]
            protected bool subscribeToActionEvents = false;

            private List<EventAction> eventActionList = new List<EventAction>();

            protected WidgetStatePacket<T, U> widgetStatePacket;

            #endregion

            #region Actions

            private Action OnEnabledEventAction,
                           OnDisabledEventAction;

            #endregion

            #endregion

            #region Main

            public void Initilize(Action<CallbackData<WidgetStatePacket<T, U>>> callback)
            {
                var callbackResults = new CallbackData<WidgetStatePacket<T, U>>();

                OnInitilize(initializationCallbackResults => 
                {
                    callbackResults.SetResult(initializationCallbackResults);
                });

                callback?.Invoke(callbackResults);
            }

            #region Data Setters

            protected void SetWidgetStatePacket(WidgetStatePacket<T, U> statePacket, Action<CallbackData<WidgetStatePacket<T, U>>> callback = null)
            {
                var callbackResults = new CallbackData<WidgetStatePacket<T, U>>(GetType());

                if (callbackResults.Success())
                {
                    widgetStatePacket = statePacket;

                    callbackResults.SetResult(Helpers.GetAppComponentValid(widgetStatePacket, "Widget State Packet", $"Failed To Set Widget State Packet For Widget : {GetName()} - Of Type : {GetType().GetData()} - Widget State Packet Parameter Is Null - Invalid Operation."));

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()}'s State Packet : {widgetStatePacket.GetName()} - With State Type : {widgetStatePacket.GetStateType()} - Have Been Set.";
                        callbackResults.data = statePacket;
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            public void SetContentContainerType(ContentContainerType containerType) => this.uIPlacementContainerType = containerType;

            public void SetScreenUIPlacementType(ScreenUIPlacementType uIPlacementType) => this.uIPlacementType = uIPlacementType;

            public void SetUIScreenWidgetVisibilityState(UIScreenWidgetVisibilityState initialVisibilityState) => this.initialVisibilityState = initialVisibilityState;

            public void SetOrderInLayer(int orderInLayer) => transform.SetSiblingIndex(orderInLayer);

            #endregion

            #region Data Getters

            public CallbackDataList<DynamicContainerBase> GetDynamicContainerList()
            {
                var callbackResults = new CallbackDataList<DynamicContainerBase>(GetType());

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(dynamicContainerList, "Dynamic Container List", $"Dynamic Container List Are Not Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{dynamicContainerList.Count} : Dynamic Containers Have Been Successfully Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}";
                        callbackResults.data = dynamicContainerList;
                    }
                    else
                    {
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackData<DynamicContainerBase> GetDynamicContainer(ScreenType screenType, ContentContainerType containerType, ScreenUIPlacementType screenPlacementType)
            {
                var callbackResults = new CallbackData<DynamicContainerBase>(GetDynamicContainerList());

                if (callbackResults.Success())
                {
                    var dynamicContainer = GetDynamicContainerList().GetData().Find(container => container.GetContainerType().GetData() == containerType && container.GetScreenViewUIPlacementType().GetData() == screenPlacementType && container.GetScreenType().GetData() == screenType);

                    callbackResults.SetResult(Helpers.GetAppComponentValid(dynamicContainer, "Dynamic Container", $"Get Dynamic Container Failed - Couldn't Find Dynamic Container Of Type : {containerType} - With Placement Type : {screenPlacementType} - Invalid Operation - Please Chec Here."));

                    if(callbackResults.Success())
                    {
                        callbackResults.result = $"Dynamic Container : {dynamicContainer.GetName()} - Of Type : {containerType} - With Placement Type : {screenPlacementType} - Have Been Found.";
                        callbackResults.data = dynamicContainer;
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackData<ScreenUIPlacementType> GetScreenUIPlacementType()
            {
                var callbackResults = new CallbackData<ScreenUIPlacementType>(GetType());

                if (callbackResults.Success())
                {
                    if (uIPlacementType != ScreenUIPlacementType.None)
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s UI Pacement Type Is Set To : {uIPlacementType}";
                        callbackResults.data = uIPlacementType;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s UI Placement Type Is Set To Default : NONE - Invalid Operation - Not Applicable To Screen Space UI - Please Check Here";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<ContentContainerType> GetContentContainerType()
            {
                var callbackResults = new CallbackData<ContentContainerType>(GetType());

                if (callbackResults.Success())
                {
                    if (uIPlacementContainerType != ContentContainerType.None)
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s UI Pacement Container Type Is Set To : {uIPlacementContainerType}";
                        callbackResults.data = uIPlacementContainerType;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s UI Placement Container Type Is Set To Default : NONE - Invalid Operation - Not Applicable To Screen Space UI - Please Check Here";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public int GetOrderInLayer() => orderInLayer;

            public CallbackData<UIScreenWidgetVisibilityState> GetInitialVisibilityStateType()
            {
                var callbackResults = new CallbackData<UIScreenWidgetVisibilityState>(GetType());

                if (callbackResults.Success())
                {
                    if (initialVisibilityState != UIScreenWidgetVisibilityState.None)
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s Initial Visibilty State Type Is Set To : {initialVisibilityState}";
                        callbackResults.data = initialVisibilityState;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Screen Widget : {GetName()} - Of Type : {GetType().GetData()}'s Initial Visibilty State Type Is Set To Default : {initialVisibilityState} - Invalid Operation - Not Applicable To Screen Space UI - Please Check Here";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<bool> GetInitialVisibility()
            {
                var callbackResults = new CallbackData<bool>(GetInitialVisibilityStateType());

                if (callbackResults.Success())
                {
                    if(GetInitialVisibilityStateType().GetData() == UIScreenWidgetVisibilityState.Visible)
                    {
                        callbackResults.result = $"Initiali Visiblity State For Screen Widget : {GetName()} - Of type : {GetType().GetData()} Is Set To : {GetInitialVisibilityStateType().GetData()} - Widget Should Be Shown";
                        callbackResults.data = true;
                    }
                    else
                    {
                        callbackResults.result = $"Initiali Visiblity State For Screen Widget : {GetName()} - Of type : {GetType().GetData()} Is Set To : {GetInitialVisibilityStateType().GetData()} - Widget Should Be Hidden";
                        callbackResults.data = false;
                    }
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                return callbackResults;
            }

            public CallbackDataList<ScreenReferencedWidgetDependencyAssetBundle<U>> GetReferencedWidgetDependencyAssets()
            {
                var callbackResults = new CallbackDataList<ScreenReferencedWidgetDependencyAssetBundle<U>>(Helpers.GetAppComponentsValid(referencedWidgetDependencyAssets, "Referenced Widget Dependency Assets", $"There Are Nore Referenced Widget Dependency Assets Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}."));

                if(callbackResults.Success())
                {
                    callbackResults.result = $"There Are : {referencedWidgetDependencyAssets.Count} Referenced Widget Dependency Assets Found For Widget : {GetName()} - Of Type : {GetType().GetData()}.";
                    callbackResults.data = referencedWidgetDependencyAssets;
                }
                else
                {
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion

            #region Events

            protected void RegisterEventAction(Action<Callback> callback = null, params EventActionData[] eventParams)
            {
                Callback callbackResults = new Callback();

                if (subscribeToActionEvents)
                {
                    Helpers.GetAppComponentsValid(Helpers.GetList(eventParams), "Subscribed Events List", async componentsValidCallbackResults =>
                    {
                        callbackResults.SetResult(componentsValidCallbackResults);

                        if (callbackResults.Success())
                        {
                            for (int i = 0; i < eventParams.Length; i++)
                            {
                                var eventAction = eventParams[i];
                                callbackResults.SetResult(eventAction.Initialized());

                                if (callbackResults.Success())
                                {
                                    await Task.Yield();

                                    if (!eventActionList.Contains(eventAction))
                                    {
                                        eventActionList.Add(eventAction);

                                        if (eventActionList.Contains(eventAction))
                                        {
                                            callbackResults.result = $"Event Action : {eventAction.GetName()} Has Been Subscribed Successfully In Subscribed Events List.";
                                            callbackResults.resultCode = Helpers.SuccessCode;
                                        }
                                        else
                                        {
                                            callbackResults.result = $"Failed To Subscribe Event Action - Event Action : {eventAction.GetName()} Couldn't Be Added To Subscribed Events List - Please Check Here.";
                                            callbackResults.resultCode = Helpers.ErrorCode;
                                        }
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Failed To Subscribe Event Action - Event Action: {eventAction.GetName()} Already Exists In Subscribed Events List.";
                                        callbackResults.resultCode = Helpers.WarningCode;
                                    }
                                }
                            }
                        }

                    }, "Event Action Params Is Null / Not Assigned In Parameter / Not Initialized.");
                }
                else
                {
                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Not Subscribed To Events.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void SubscribeToEvents(EventAction eventAction = null, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetRegisteredEventActions());

                if (callbackResults.Success())
                {
                    var subsciptionList = GetRegisteredEventActions().GetData();

                    if (eventAction != null && subsciptionList.Contains(eventAction))
                    {
                        ActionEvents.OnEventActionSubscription(eventAction, callback: subscriptionCallbackResults =>
                        {
                            callbackResults.SetResult(subscriptionCallbackResults);
                        });
                    }
                    else
                    {
                        for (int i = 0; i < subsciptionList.Count; i++)
                        {
                            ActionEvents.OnEventActionSubscription(subsciptionList[i], callback: subscriptionCallbackResults =>
                            {
                                callbackResults.SetResult(subscriptionCallbackResults);
                            });
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected void UnSubscribeFromEvents(EventAction eventAction = null, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetRegisteredEventActions());

                if (callbackResults.Success())
                {
                    var subsciptionList = GetRegisteredEventActions().GetData();

                    if (eventAction != null && subsciptionList.Contains(eventAction))
                    {
                        ActionEvents.OnEventActionSubscription(eventAction, false, subscriptionCallbackResults =>
                        {
                            callbackResults.SetResult(subscriptionCallbackResults);
                        });
                    }
                    else
                    {
                        for (int i = 0; i < subsciptionList.Count; i++)
                        {
                            ActionEvents.OnEventActionSubscription(subsciptionList[i], false, subscriptionCallbackResults =>
                            {
                                callbackResults.SetResult(subscriptionCallbackResults);
                            });
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected Callback SubscribedToEvents(params EventAction[] eventActions)
            {
                var callbackResults = new Callback(GetRegisteredEventActions());

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(eventActions, "Event Actions", "Event Action Not Assigned In Parameter."));

                    if(callbackResults.Success())
                    {
                        foreach (var eventAction in eventActionList)
                        {
                            if(!eventActionList.Contains(eventAction))
                            {
                                callbackResults.result = $"Action Event : {eventAction.GetName()} For Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Not Registered In Event Action List.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }
                    else
                        callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} - Has Been Registered Successfully To Action Events.";
                }
                else
                {
                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Not Yet Subscribed To Action Events.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            private CallbackDataList<EventAction> GetRegisteredEventActions()
            {
                CallbackDataList<EventAction> callbackResults = new CallbackDataList<EventAction>();

                Helpers.GetAppComponentsValid(eventActionList, "Subscribed Events List", eventsListCallbackResults =>
                {
                    callbackResults.SetResult(eventsListCallbackResults);

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{eventActionList.Count} : Subscribed Event Action(s) Found.";
                        callbackResults.data = eventActionList;
                    }

                }, "Subscribed Events List Is Not Yet Initialized.");

                return callbackResults;
            }

            #endregion

            #region Action Events

            protected void OnEnabled() => OnEnabledEventAction?.Invoke();
            protected void OnDisabled() => OnDisabledEventAction?.Invoke();

            #endregion

            #region Transitionable UI Components

            protected Callback OnRegisterTransitionableUIComponents(params TransitionableUIComponent[] transitionableUIParams)
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(Helpers.GetList(transitionableUIParams), "Transitionable UI", async componentsValidCallbackResults =>
                {
                    callbackResults.SetResult(componentsValidCallbackResults);

                    if (callbackResults.Success())
                    {
                        for (int i = 0; i < transitionableUIParams.Length; i++)
                        {
                            var initializationTaskResults = await transitionableUIParams[i].Initialized();

                            callbackResults.SetResult(initializationTaskResults);

                            if (callbackResults.Success())
                            {
                                await Task.Yield();

                                if (!transitionableUIComponentList.Contains(transitionableUIParams[i]))
                                {
                                    OnEnabledEventAction += transitionableUIParams[i].OnEnabled;
                                    OnDisabledEventAction += transitionableUIParams[i].OnDisabled;

                                    transitionableUIComponentList.Add(transitionableUIParams[i]);

                                    if (transitionableUIComponentList.Contains(transitionableUIParams[i]))
                                    {
                                        callbackResults.result = $"Transitionable UI Component : {transitionableUIParams[i].GetName()} Has Been Registered Successfully In Transitionable UI Component List.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Failed To Register Transitionable UI Component - Transitionable UI Component : {transitionableUIParams[i].GetName()} Could Be Added To Transitionable UI Component List - Please Check Here.";
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Failed To Register Transitionable UI Component - Transitionable UI Component : {transitionableUIParams[i].GetName()} Already Exists In Transitionable UI Component List.";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }
                        }
                    }

                }, "Transitionable UI Componets Params Is Null / Not Assigned In Parameter / Not Initialized.");

                return callbackResults;
            }

            protected async void SetTransitionableUITarget(UITransitionType transitionType, Vector3 target, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var transitionableUITaskResultsCallback = await GetTransitionableUIComponent(transitionType);

                callbackResults.SetResult(transitionableUITaskResultsCallback);

                if (callbackResults.Success())
                {
                    var transitionableUI = transitionableUITaskResultsCallback.GetData();
                    transitionableUI.SetTarget(target);

                    callbackResults.result = $"Target Set For Transitionable UI : {transitionableUI.name} Of Transition Type : {transitionType}";
                }

                callback?.Invoke(callbackResults);
            }

            protected async void SetTransitionableUITarget((Vector2 position, Vector2 scale, Vector3 rotationAngle) target, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var transitionableUIListTaskResultsCallback = await GetTransitionableUIComponent();

                callbackResults.SetResult(transitionableUIListTaskResultsCallback);

                if (callbackResults.Success())
                {
                    var transitionableUIList = transitionableUIListTaskResultsCallback.GetData();

                    for (int i = 0; i < transitionableUIList.Count; i++)
                    {
                        callbackResults.SetResult(transitionableUIList[i].GetTransitionType());

                        if (callbackResults.Success())
                        {
                            switch (transitionableUIList[i].GetTransitionType().data)
                            {
                                case UITransitionType.Translate:

                                    transitionableUIList[i].SetTarget(target.position);

                                    break;

                                case UITransitionType.Scale:

                                    transitionableUIList[i].SetTarget(target.scale);

                                    break;

                                case UITransitionType.Rotate:

                                    transitionableUIList[i].SetTarget(target.rotationAngle);

                                    break;
                            }
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected async void InvokeTransitionableUI(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var transitionableUIListTaskResultsCallback = await GetTransitionableUIComponent();

                callbackResults.SetResult(transitionableUIListTaskResultsCallback);

                if (callbackResults.Success())
                {
                    var transitionableUIList = transitionableUIListTaskResultsCallback.GetData();

                    for (int i = 0; i < transitionableUIList.Count; i++)
                    {
                        var transitionableUITasResultsCallback = await transitionableUIList[i].InvokeTransitionAsync();
                        callbackResults.SetResult(transitionableUITasResultsCallback);

                        if (callbackResults.UnSuccessful())
                            break;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected async void InvokeTransitionableUI(UITransitionType transitionType, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var transitionableUITaskResultsCallback = await GetTransitionableUIComponent(transitionType);

                callbackResults.SetResult(transitionableUITaskResultsCallback);

                if (callbackResults.Success())
                {
                    var transitionableUI = transitionableUITaskResultsCallback.GetData();
                    var transitionableUITasResultsCallback = await transitionableUI.InvokeTransitionAsync();

                    callbackResults.SetResult(transitionableUITasResultsCallback);

                    if (callbackResults.Success())
                        callbackResults.result = $"Transitionable UI : {transitionableUI.name} Of Transition Type : {transitionType} Has Been Invoked.";
                }

                callback?.Invoke(callbackResults);
            }

            protected async void CancelAllInvokedTransitionableUI(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var transitionableUIListTaskResultsCallback = await GetTransitionableUIComponent();

                callbackResults.SetResult(transitionableUIListTaskResultsCallback);

                if (callbackResults.Success())
                {
                    var transitionableUIList = transitionableUIListTaskResultsCallback.GetData();

                    await Task.Yield();

                    for (int i = 0; i < transitionableUIList.Count; i++)
                    {
                        var transitionableUITasResultsCallback = await transitionableUIList[i].CancelTransitionAsync();
                        callbackResults.SetResult(transitionableUITasResultsCallback);

                        while (callbackResults.UnSuccessful())
                            await Task.Yield();
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected async void CancelInvokedTransitionableUI(UITransitionType transitionType = UITransitionType.None, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (transitionType != UITransitionType.None)
                {
                    var transitionableUITaskResultsCallback = await GetTransitionableUIComponent(transitionType);

                    callbackResults.SetResult(transitionableUITaskResultsCallback);

                    if (callbackResults.Success())
                    {
                        var transitionableUI = transitionableUITaskResultsCallback.GetData();
                        var cancelTransitionTaskResultsCallback = await transitionableUI.CancelTransitionAsync();

                        callbackResults.SetResult(cancelTransitionTaskResultsCallback);
                    }
                }
                else
                {
                    var transitionableUIListTaskResultsCallback = await GetTransitionableUIComponent();

                    callbackResults.SetResult(transitionableUIListTaskResultsCallback);

                    if (callbackResults.Success())
                    {
                        var transitionableUIList = transitionableUIListTaskResultsCallback.GetData();

                        for (int i = 0; i < transitionableUIList.Count; i++)
                        {
                            var transitionableUITasResultsCallback = await transitionableUIList[i].CancelTransitionAsync();
                            callbackResults.SetResult(transitionableUITasResultsCallback);

                            if (callbackResults.UnSuccessful())
                                break;
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            private async Task<CallbackData<TransitionableUIComponent>> GetTransitionableUIComponent(UITransitionType transitionType)
            {
                CallbackData<TransitionableUIComponent> callbackResults = new CallbackData<TransitionableUIComponent>(GetType());

                if (callbackResults.Success())
                {
                    var getTransitionableUIComponentTaskResultsCallback = await GetTransitionableUIComponent();

                    callbackResults.SetResult(getTransitionableUIComponentTaskResultsCallback);

                    if (callbackResults.Success())
                    {
                        var transitionableUIComponent = getTransitionableUIComponentTaskResultsCallback.GetData().Find(component => component.GetTransitionType().Success() && component.GetTransitionType().data == transitionType);

                        callbackResults.SetResult(Helpers.GetAppComponentValid(transitionableUIComponent, "Transitionable UI Component", $"Get Transitionable UI Component Failed - Couldn't Find Transitionable UI Component Of Type : {transitionType} For Screen Widget : {GetName()} Of Type : {GetType().GetData()}."));

                        if (callbackResults.Success())
                        {
                            callbackResults.result = $"Transitionable UI Component : {transitionableUIComponent.GetName()} Of Type : {transitionType} Have Been Found In Transitionable UI Component List For Screen Widget : {GetName()} Of Type : {GetType().GetData()}.";
                            callbackResults.data = transitionableUIComponent;
                        }
                        else
                        {
                            callbackResults.result = $"Transitionable UI Component Failed : {transitionableUIComponent.GetName()} Of Type : {transitionType} Have Been Not Found In Transitionable UI Component List For Screen Widget : {GetName()} Of Type : {GetType().GetData()}.";
                            callbackResults.data = default;
                        }
                    }
                }

                return callbackResults;
            }

            private async Task<CallbackDataList<TransitionableUIComponent>> GetTransitionableUIComponent()
            {
                CallbackDataList<TransitionableUIComponent> callbackResults = new CallbackDataList<TransitionableUIComponent>(GetType());

                if (callbackResults.Success())
                {
                    while (callbackResults.UnSuccessful())
                    {
                        callbackResults.SetResult(Helpers.GetAppComponentsValid(transitionableUIComponentList, "Transitionable UI Component List", "Transitionable UI Componets Params Is Null / Not Assigned In Parameter / Not Initialized."));
                        await Task.Yield();
                    }

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"Transitionable UI Components List With : {transitionableUIComponentList.Count} Transitionables Has Been Loaded Successfully For Screen Widget Of Type : {GetType().GetData()}.";
                        callbackResults.data = transitionableUIComponentList;
                    }
                }

                return callbackResults;
            }

            public WidgetStatePacket<T, U> GetStatePacket() => widgetStatePacket;

            public CallbackData<WidgetStatePacket<T, U>> GetState() => OnGetState();

            #endregion

            #region Timed Events

            protected Callback OnRegisterTimedEventComponents(params TimedEventComponent[] timedEventComponentParams)
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(Helpers.GetList(timedEventComponentParams), "Timed Event Components", async componentsValidCallbackResults =>
                {
                    callbackResults.SetResult(componentsValidCallbackResults);

                    if (callbackResults.Success())
                    {
                        for (int i = 0; i < timedEventComponentParams.Length; i++)
                        {
                            var initializationTaskResults = await timedEventComponentParams[i].Initialized();

                            callbackResults.SetResult(initializationTaskResults);

                            if (callbackResults.Success())
                            {
                                await Task.Yield();

                                if (!timedEventComponentList.Contains(timedEventComponentParams[i]))
                                {
                                    OnEnabledEventAction += timedEventComponentParams[i].OnEnabled;
                                    OnDisabledEventAction += timedEventComponentParams[i].OnDisabled;

                                    timedEventComponentList.Add(timedEventComponentParams[i]);

                                    if (timedEventComponentList.Contains(timedEventComponentParams[i]))
                                    {
                                        callbackResults.result = $"Timed Event Component : {timedEventComponentParams[i].GetName()} Has Been Registered Successfully In Timed Event Component List.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Failed To Register Timed Event Component - Timed Event Component : {timedEventComponentParams[i].GetName()} Could'nt Be Added To Timed Event Component List - Please Check Here.";
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Failed To Register Timed Event Component - Timed Event Component : {timedEventComponentParams[i].GetName()} Already Exists In Timed Event Component List.";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }
                            }
                        }
                    }

                }, "Timed Event Components Params Is Null / Not Assigned In Parameter / Not Initialized.");

                return callbackResults;
            }

            protected async void InvokeTimedEvents(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                var timedEventComponentListTaskResultsCallback = await GetTimedEventComponents();

                callbackResults.SetResult(timedEventComponentListTaskResultsCallback);

                if (callbackResults.Success())
                {
                    var timedEventComponentList = timedEventComponentListTaskResultsCallback.GetData();

                    for (int i = 0; i < timedEventComponentList.Count; i++)
                        timedEventComponentList[i].Start();
                }

                callback?.Invoke(callbackResults);
            }

            private async Task<CallbackDataList<TimedEventComponent>> GetTimedEventComponents()
            {
                CallbackDataList<TimedEventComponent> callbackResults = new CallbackDataList<TimedEventComponent>(GetType());

                if (callbackResults.Success())
                {
                    while (callbackResults.UnSuccessful())
                    {
                        callbackResults.SetResult(Helpers.GetAppComponentsValid(timedEventComponentList, "Timed Event Component List", "Timed Event Componets Params Is Null / Not Assigned In Parameter / Not Initialized."));
                        await Task.Yield();
                    }

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"Timed Event Components List With : {timedEventComponentList.Count} Timed event Component(s) Has Been Loaded Successfully For Screen Widget Of Type : {GetType().GetData()}.";
                        callbackResults.data = timedEventComponentList;
                    }
                }

                return callbackResults;
            }

            #endregion

            public GameObject GetSceneObject() => this.gameObject;

            public new CallbackData<T> GetType()
            {
                var callbackResults = new CallbackData<T>();

                if (!widgetType.ToString().ToLower().Equals("none"))
                {
                    callbackResults.result = $"Screen : {name} - Is Set To Type : {widgetType.ToString()}";
                    callbackResults.data = widgetType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Failed To Get Screen Type For Screen : {name} - Screen Type Is Set To Default : {widgetType.ToString()}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            protected CallbackData<TransitionType> GetTransitionType()
            {
                var callbackResults = new CallbackData<TransitionType>();

                if (transitionType != TransitionType.None)
                {
                    callbackResults.result = $"Transition Type For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Set To : {transitionType}";
                    callbackResults.data = transitionType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Transition Type Failed For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Transition Type Is Set To Default : {transitionType}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            protected CallbackData<UIScreenWidgetVisibilityState> GetInitialVisibilityState()
            {
                var callbackResults = new CallbackData<UIScreenWidgetVisibilityState>();

                if (initialVisibilityState != UIScreenWidgetVisibilityState.None)
                {
                    callbackResults.result = $"Initial Visiblity State For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Set To : {initialVisibilityState}";
                    callbackResults.data = initialVisibilityState;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Initial Visiblity State Failed For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Initial Visiblity State Is Set To Default : {initialVisibilityState}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            protected abstract CallbackData<WidgetStatePacket<T, U>> OnGetState();

            #endregion

            #region Abstract Overrides

            protected abstract void OnInitilize(Action<CallbackData<WidgetStatePacket<T, U>>> callback);

            #endregion
        }

        [DisallowMultipleComponent]
        [Serializable]
        public abstract class UIScreenWidgetBaseInput<T, U> : UIScreenWidget<T, U> where T : Enum where U : Enum
        {
            #region Components

            #region UI

            [Space(15)]
            [Header("Widget Inputs")]

            [Space(10)]
            [Header("::: Component UI Action Groups")]

            [Space(10)]
            public List<UIScreenActionGroup> actionGroup = new List<UIScreenActionGroup>();

            [Space(10)]
            private bool initializeActionGroup = false;

            #endregion

            #endregion

            #region Main

            public void InitializeInputs(Action<Callback> callback = null)
            {
                var callbackResults = new Callback(GetType());

                if (callbackResults.Success())
                {
                    if (initializeActionGroup)
                    {
                        callbackResults.SetResult(Helpers.GetAppComponentsValid(actionGroup, "Action Group", $"There Are No Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                        if (callbackResults.Success())
                        {
                            var initialized = actionGroup.FindAll(input => input.initialize);

                            callbackResults.SetResult(Helpers.GetAppComponentsValid(initialized, "Initialized Action Group", $"There Were No Initialized Action Groups Found For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                            if (callbackResults.Success())
                            {
                                foreach (var item in initialized)
                                {
                                    foreach (var action in item.screenActionGroup)
                                    {
                                        callbackResults.SetResult(action.GetType());

                                        if (callbackResults.Success())
                                        {
                                            switch (action.GetType().GetData())
                                            {
                                                case InputType.Button:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionButton = action.GetButtonComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionButton.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionButton.Selectable());


                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionButton, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionButton.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionButton.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionButton.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionButton.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.InputField:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionInputField = action.GetInputFieldComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionInputField.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionInputField.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionInputField, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionInputField.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionInputField.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionInputField.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionInputField.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.InputSlider:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionInputSlider = action.GetInputSliderComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionInputSlider.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionInputSlider.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionInputSlider, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionInputSlider.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionInputSlider.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionInputSlider.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionInputSlider.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.Slider:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionSlider = action.GetSliderComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionSlider.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionSlider.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionSlider, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionSlider.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionSlider.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionSlider.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionSlider.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.DropDown:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionDropdown = action.GetDropdownComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionDropdown.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionDropdown.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionDropdown, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionDropdown.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionDropdown.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionDropdown.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionDropdown.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.Checkbox:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionCheckbox = action.GetCheckboxComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionCheckbox.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionCheckbox.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionCheckbox, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionCheckbox.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionCheckbox.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionCheckbox.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionCheckbox.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.Text:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionText = action.GetTextComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionText.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionText.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionText, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionText.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionText.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionText.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionText.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;

                                                case InputType.Image:

                                                    action.Init<ButtonDataPackets>(initializationCallback =>
                                                    {
                                                        callbackResults.SetResult(initializationCallback);

                                                        if (callbackResults.Success())
                                                        {
                                                            var actionImage = action.GetImageComponent();

                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(actionImage.value, "Action Input", $"Action Input At Index : {item.screenActionGroup.IndexOf(action)}'s Value Not Found For Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                            if (callbackResults.Success())
                                                            {
                                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                {
                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                    if (callbackResults.Success())
                                                                    {
                                                                        callbackResults.SetResult(actionImage.Selectable());

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            callbackResults.SetResult(Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                               $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}",
                                                                               $"Selectable Manager Instance Been Successfully Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                                                                            if (callbackResults.Success())
                                                                            {
                                                                                var selectableManager = Helpers.GetAppComponentValid(SelectableManager.Instance, SelectableManager.Instance.name,
                                                                                $"Selectable Manager Instance Is Not Yet Initialized In Screen Widget : {GetName()} - Of Type : {GetType().GetData()}").GetData();

                                                                                selectableManager.GetProjectStructureSelectionSystem(structureCallbackResults =>
                                                                                {
                                                                                    callbackResults.SetResult(structureCallbackResults);

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        structureCallbackResults.GetData().OnRegisterInputToSelectableEventListener(GetType().GetData(), actionImage, selectableCallbackResults =>
                                                                                        {
                                                                                            callbackResults.SetResult(selectableCallbackResults);

                                                                                            if (callbackResults.Success())
                                                                                            {
                                                                                                actionImage.Initialize(initializationCallbackResults =>
                                                                                                {
                                                                                                    callbackResults.SetResult(initializationCallbackResults);

                                                                                                    if (callbackResults.UnSuccessful())
                                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                                });
                                                                                            }
                                                                                            else
                                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.resultCode, callbackResults.result, this);
                                                                                });
                                                                            }
                                                                            else
                                                                            {
                                                                                Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            };
                                                                        }
                                                                        else if (callbackResults.Warning())
                                                                        {
                                                                            callbackResults.result = $"Button : {actionImage.GetName()} - Is Not A Selectable Type  - Results : {callbackResults.GetResult}";
                                                                            callbackResults.resultCode = Helpers.SuccessCode;

                                                                            actionImage.Initialize(initializationCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(initializationCallbackResults);

                                                                                if (callbackResults.UnSuccessful())
                                                                                    Log(callbackResults.resultCode, callbackResults.result, this);
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Button : {actionImage.name}'s Value Missing / Not Assigned In The Editor Inspector.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }

                                                        Log(initializationCallback.resultCode, initializationCallback.result, this);
                                                    });

                                                    break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            #region UI Accessors

            public void GetActionButtonOfType(InputActionButtonType actionType, Action<CallbackData<List<UIButton<ButtonDataPackets>>>> callback)
            {
                CallbackData<List<UIButton<ButtonDataPackets>>> callbackResults = new CallbackData<List<UIButton<ButtonDataPackets>>>();

                //if (buttons != null && buttons.Count > 0)
                //{
                //    List<UIButton<ButtonDataPackets>> foundButtons = buttons.FindAll(x => x.dataPackets.action == actionType);

                //    if (foundButtons.Count > 0)
                //    {
                //        callbackResults.result = $"{foundButtons.Count} Button(s) Matching Action Type : {actionType} Found For Widget Type : {widgetType} - Named : {name}";
                //        callbackResults.data = foundButtons;
                //        callbackResults.resultCode = Helpers.SuccessCode;
                //    }
                //    else
                //    {
                //        callbackResults.result = $"No Buttons Matching Action Type : {actionType} Found For Widget Type : {widgetType} - Named : {name}";
                //        callbackResults.data = default;
                //        callbackResults.resultCode = Helpers.ErrorCode;
                //    }
                //}
                //else
                //{
                //    callbackResults.result = $"No Buttons Found For Widget Type : {widgetType} - Named : {name}";
                //    callbackResults.data = default;
                //    callbackResults.resultCode = Helpers.ErrorCode;
                //}

                callback.Invoke(callbackResults);
            }

            #endregion

            #region Set Action Values

            #region Input Fields

            protected void SetInputFieldValue(InputFieldActionType actionType, string value)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input.value != null)
                //    {
                //        if (!string.IsNullOrEmpty(value))
                //            input.SetValue(value);
                //        else
                //            input.OnClearField();
                //    }
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this);
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this);
            }

            protected void SetInputFieldPlaceHolder(InputFieldActionType actionType, string placeHolder)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input.value != null)
                //    {
                //        if (!string.IsNullOrEmpty(placeHolder))
                //            input.SetPlaceHolderText(placeHolder);
                //        else
                //            input.OnClearField();
                //    }
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this);
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this);
            }

            protected void GetInputField(InputFieldActionType actionType, Action<CallbackData<UISelectable>> callback)
            {
                CallbackData<UISelectable> callbackResults = new CallbackData<UISelectable>();

                //if (inputFields != null && inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input.value != null)
                //    {
                //        callbackResults.result = $"Found Input Field : {input.name} Of Type : {actionType}";
                //        callbackResults.data = input;
                //        callbackResults.resultCode = Helpers.SuccessCode;
                //    }
                //    else
                //    {
                //        callbackResults.result = $"Couldn't Find Input Field Of Type : {actionType}";
                //        callbackResults.data = default;
                //        callbackResults.resultCode = Helpers.ErrorCode;
                //    }
                //}
                //else
                //{
                //    callbackResults.result = "There Are No Inputs Found.";
                //    callbackResults.data = default;
                //    callbackResults.resultCode = Helpers.ErrorCode;
                //}

                callback.Invoke(callbackResults);
            }

            protected void OnInputFieldValidation(ValidationResultsType results, InputFieldActionType actionType)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input != null)
                //    {
                //        input.SetValidationResults(results);

                //        SelectableManager.Instance.GetProjectStructureSelectionSystem(selectionSystemCallbackResults =>
                //        {
                //            if (selectionSystemCallbackResults.Success())
                //            {
                //                selectionSystemCallbackResults.data.OnSelectUIInput(widgetType, input, selectionCallbackResults =>
                //                {
                //                    Log(selectionCallbackResults.resultCode, selectionCallbackResults.result, this);
                //                });
                //            }
                //            else
                //                Log(selectionSystemCallbackResults.resultCode, selectionSystemCallbackResults.result, this);
                //        });
                //    }
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this);
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this);
            }

            protected void OnClearInputFieldValue(InputFieldActionType actionType)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input != null)
                //        input.OnClearField();
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this);
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this);
            }

            protected void OnClearInputFieldValidation(InputFieldActionType actionType)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);

                //    if (input != null)
                //        input.OnClearValidation();
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this);
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this);
            }


            protected void HighlightInputFieldValue(InputFieldActionType actionType, bool highlight = true)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> input = inputFields.Find((input) => input.dataPackets.action == actionType);
                //    input.OnSelect();
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this, () => HighlightInputFieldValue(actionType, highlight = true));
            }

            #endregion

            #region Checkbox

            protected void SetCheckboxValue(bool value, CheckboxInputActionType actionType)
            {
                //if (checkboxes.Count > 0)
                //{
                //    UICheckbox<CheckboxDataPackets> checkbox = checkboxes.Find((checkbox) => checkbox.dataPackets.action == actionType);

                //    if (checkbox.value != null)
                //        checkbox.SetSelectionState(value);
                //    else
                //        LogWarning($"Couldn't Find Input Field Of Type : {actionType}", this, () => SetCheckboxValue(value, actionType));
                //}
                //else
                //    LogWarning("Set Input Field Value Failed : No Input Fields Found.", this, () => SetCheckboxValue(value, actionType));
            }

            #endregion

            #endregion


            #region UI Action Button States

            public void SetActionButtonUIImageValue(InputActionButtonType actionType, UIImageDisplayerType displayerType, UIImageType imageType)
            {
                //if (buttons.Count > 0)
                //{
                //    UIButton<ButtonDataPackets> button = buttons.Find(button => button.dataPackets.action == actionType);

                //    if (button != null)
                //        button.SetUIImageValue(AppDatabaseManager.Instance.GetImageFromLibrary(imageType), displayerType);
                //    else
                //        LogWarning($"Button Of Type : {actionType} With Displayer : {displayerType} & Image Type : {imageType} Not Found In Widget Type : {widgetType} With Action Button List With : {buttons.Count} Buttons.", this, () => SetActionButtonUIImageValue(actionType, displayerType, imageType));
                //}
                //else
                //    LogWarning("Screen Action Button List Is Null / Empty.", this, () => SetActionButtonUIImageValue(actionType, displayerType, imageType));
            }

            public void SetActionButtonState(InputUIState state)
            {
                //if (buttons.Count > 0)
                //{
                //    foreach (var button in buttons)
                //    {
                //        if (button.value != null)
                //            button.SetUIInputState(state);
                //        else
                //            LogWarning($"Button Of Type : {button.dataPackets.action}'s Value Missing.", this, () => SetActionButtonState(state));
                //    }
                //}
                //else
                //    LogWarning("Screen Action Button List Is Null / Empty.", this, () => SetActionButtonState(state));
            }

            public void SetActionButtonTitle(InputActionButtonType actionType, string title)
            {
                //if (buttons.Count > 0)
                //{
                //    UIButton<ButtonDataPackets> button = buttons.Find(button => button.dataPackets.action == actionType);

                //    if (button != null)
                //        button.SetTitle(title);
                //    else
                //        LogWarning($"To Set Title {title} For Button Of Type : {actionType} - Button Missing / Not Found.", this, () => SetActionButtonTitle(actionType, title));
                //}
                //else
                //    LogWarning("--> Screen Action Button List Is Null / Empty.", this, () => SetActionButtonTitle(actionType, title));
            }

            public void SetActionButtonState(InputActionButtonType actionType, InputUIState state)
            {
                //if (buttons.Count > 0)
                //{
                //    UIButton<ButtonDataPackets> button = buttons.Find(button => button.dataPackets.action == actionType);

                //    if (button != null)
                //        button.SetUIInputState(state);
                //    else
                //        LogWarning($"Button Of Type : {actionType} Not Found In Widgt Type : {widgetType} With Action Button List With : {buttons.Count} Buttons", this, () => SetActionButtonState(actionType, state));
                //}
                //else
                //    LogWarning("Screen Action Button List Is Null / Empty.", this, () => SetActionButtonState(actionType, state));
            }

            #endregion

            #region UI Action Input States

            public void SetActionInputFieldState(InputUIState state)
            {
                //if (inputFields.Count > 0)
                //{
                //    foreach (var inputField in inputFields)
                //    {
                //        if (inputField.value != null)
                //            inputField.SetUIInputState(state);
                //        else
                //            LogWarning($"Failed : Input Field Of Type : {inputField.dataPackets.action}'s Value Missing.", this);
                //    }
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            public void SetActionInputFieldState(InputFieldActionType actionType, InputUIState state)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> inputField = inputFields.Find(inputField => inputField.dataPackets.action == actionType);

                //    if (inputField != null)
                //        inputField.SetUIInputState(state);
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {inputFields.Count} Input Fields");
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            public void SetActionInputFieldValueText(InputFieldActionType actionType, string value)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> inputField = inputFields.Find(inputField => inputField.dataPackets.action == actionType);

                //    if (inputField != null)
                //        inputField.SetValue(value);
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {inputFields.Count} Input Fields", this);
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            public void SetActionInputFieldValueText(InputFieldActionType actionType, int value)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> inputField = inputFields.Find(inputField => inputField.dataPackets.action == actionType);

                //    if (inputField != null)
                //        inputField.SetValue(value.ToString());
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {inputFields.Count} Input Fields", this);
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            public void SetActionInputFieldPlaceHolderText(InputFieldActionType actionType, string placeholder)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> inputField = inputFields.Find(inputField => inputField.dataPackets.action == actionType);

                //    if (inputField != null)
                //        inputField.SetPlaceHolderText(placeholder);
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {inputFields.Count} Input Fields", this);
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            public void SetActionInputFieldPlaceHolderText(InputFieldActionType actionType, int placeholder)
            {
                //if (inputFields.Count > 0)
                //{
                //    UIInputField<InputFieldDataPackets> inputField = inputFields.Find(inputField => inputField.dataPackets.action == actionType);

                //    if (inputField != null)
                //        inputField.SetPlaceHolderText(placeholder);
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {inputFields.Count} Input Fields", this);
                //}
                //else
                //    LogWarning("SetActionInputState Failed : screenActionInputFieldList Is Null / Empty.", this);
            }

            #endregion

            #region UI Action Dropdown States

            public void SetActionDropdownState(InputDropDownActionType actionType, InputUIState state)
            {
                //if (dropdowns.Count > 0)
                //{
                //    UIDropDown<DropdownDataPackets> dropdown = dropdowns.Find(dropdown => dropdown.dataPackets.action == actionType);

                //    if (dropdown.value != null)
                //        dropdown.SetUIInputState(state);
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {dropdowns.Count} Dropdowns", this);
                //}
                //else
                //    LogWarning("SetActionDropdownState Failed : screenActionDropDownList Is Null / Empty.", this);
            }

            public void SetActionDropdownState(InputDropDownActionType actionType, InputUIState state, List<string> content)
            {
                //if (dropdowns.Count > 0)
                //{
                //    UIDropDown<DropdownDataPackets> dropdown = dropdowns.Find(dropdown => dropdown.dataPackets.action == actionType);

                //    if (dropdown.value != null)
                //    {
                //        dropdown.SetContent(content);
                //        dropdown.SetUIInputState(state);
                //    }
                //    else
                //        LogWarning($"Failed : Input Field Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {dropdowns.Count} Dropdowns", this);
                //}
                //else
                //    LogWarning("SetActionDropdownState Failed : screenActionDropDownList Is Null / Empty.", this);
            }

            public void SetActionDropdownState(InputUIState state)
            {
                //foreach (var dropdown in dropdowns)
                //{
                //    if (dropdown.value != null)
                //        dropdown.SetUIInputState(state);
                //    else
                //        LogWarning($"Failed : Dropdown Of Type : {dropdown.dataPackets.action}'s Value Missing.", this);
                //}
            }

            public void SetActionDropdownState(InputUIState state, List<string> content)
            {
                //foreach (var dropdown in dropdowns)
                //{
                //    if (dropdown.value != null)
                //    {
                //        dropdown.SetContent(content);
                //        dropdown.SetUIInputState(state);
                //    }
                //    else
                //        LogWarning($"Failed : Dropdown Of Type : {dropdown.dataPackets.action}'s Value Missing.", this);
                //}
            }

            public void SetActionDropdownContent(params UIScreenGroupContent[] groupContentParams)
            {
                //if (groupContentParams != null && groupContentParams.Length > 0)
                //{
                //    foreach (var groupContent in groupContentParams)
                //    {
                //        var dropdown = dropdowns.Find(x => x.dataPackets.action == groupContent.dropDownActionType);

                //        if (dropdown != null)
                //        {
                //            if (dropdown.value != null)
                //            {
                //                dropdown.SetUIInputState(groupContent.state);

                //                if (groupContent.contents != null && groupContent.contents.Count > 0)
                //                {
                //                    dropdown.value.ClearOptions();

                //                    List<TMP_Dropdown.OptionData> dropdownOption = new List<TMP_Dropdown.OptionData>();

                //                    foreach (var content in groupContent.contents)
                //                        dropdownOption.Add(new TMP_Dropdown.OptionData() { text = content });

                //                    dropdown.value.AddOptions(dropdownOption);
                //                    //dropdown.value.onValueChanged.AddListener((value) => OnDropDownOptionValueChange(value, dropdown.dataPackets));
                //                }
                //                else
                //                    dropdown.SetContent(new List<string> { groupContent.placeHolder });
                //            }
                //            else
                //                LogError($"Failed : Dropdown Of Type : {dropdown.dataPackets.action}'s Value Missing.", this);
                //        }
                //        else
                //            LogError($"Dropdown Of Type : {groupContent.dropDownActionType} Not Found.", this);
                //    }
                //}
                //else
                //    LogError("Group Content Params Not Assigned", this);
            }

            public void SetActionDropdownSelection(InputDropDownActionType actionType, int index)
            {
                //var dropdown = dropdowns.Find(x => x.dataPackets.action == actionType);

                //if (dropdown != null)
                //{
                //    if (dropdown.value != null)
                //        dropdown.value.value = index;
                //    else
                //        LogError($"Failed : Dropdown Of Type : {dropdown.dataPackets.action}'s Value Missing.", this);
                //}
                //else
                //    LogError($"Dropdown Of Type : {actionType} Not Found.", this);
            }

            public void SetActionDropdownSelectionWithoutNotify(InputDropDownActionType actionType, int index)
            {
                //var dropdown = dropdowns.Find(x => x.dataPackets.action == actionType);

                //if (dropdown != null)
                //{
                //    if (dropdown.value != null)
                //        dropdown.value.SetValueWithoutNotify(index);
                //    else
                //        LogError($"Failed : Dropdown Of Type : {dropdown.dataPackets.action}'s Value Missing.", this);
                //}
                //else
                //    LogError($"Dropdown Of Type : {actionType} Not Found.", this);
            }


            //protected void OnInputDropdownSelectedEvent(InputDropDownActionType actionType)
            //{
            //    var dropdown = dropdowns.Find(x => x.dataPackets.action == actionType && x.selectable && x.GetInteractableState());
            //    var dropdownContent = dropdowns.FindAll(x => x.dataPackets.action != actionType && x.selectable && x.GetInteractableState());

            //    if (dropdown != null)
            //        dropdown.SetUIInputState(InputUIState.Selected);
            //    else
            //        LogError("Dropdown Component Not Found.", this);

            //    if (dropdownContent != null && dropdownContent.Count > 0)
            //    {
            //        if (dropdownContent != null && dropdowns.Count > 0)
            //        {
            //            foreach (var content in dropdownContent)
            //            {
            //                if (content != null)
            //                {
            //                    if (content.GetUIInputState() == InputUIState.Selected)
            //                    {
            //                        content.SetUIInputState(InputUIState.Deselected);
            //                        content.value.Hide();
            //                    }
            //                }
            //                else
            //                {
            //                    LogError("Dropdown Components Were Not Found.", this);
            //                    break;
            //                }
            //            }
            //        }
            //    }
            //    else
            //        LogError("On Input Dropdown Selected Event Failed - There Are No Drodown Components Found", this);
            //}

            #endregion

            #region UI Action Slider States

            public void SetActionSliderState(SliderValueType valueType, InputUIState state)
            {
                //if (sliders.Count > 0)
                //{
                //    UISlider<SliderDataPackets> slider = sliders.Find(slider => slider.dataPackets.valueType == valueType);

                //    if (slider.value != null)
                //        slider.SetUIInputState(state);
                //    else
                //        Debug.LogWarning($"--> Failed : Slider Of Type : {valueType} Not Found In Widget Type : {widgetType} With Sliders List With : {sliders.Count} Sliders");
                //}
                //else
                //    Debug.LogWarning("--> SetActionSliderState Failed : screenActionSliderList Is Null / Empty.");
            }

            public void SetActionSliderState(InputUIState state)
            {
                //if (sliders.Count > 0)
                //{
                //    foreach (var slider in sliders)
                //    {
                //        if (slider != null)
                //            slider.SetUIInputState(state);
                //        else
                //            Debug.LogWarning($"--> Failed : Slider Of Type : {slider.valueType}'s Value Missing.");
                //    }
                //}
                //else
                //    Debug.LogWarning("--> SetActionSliderState Failed : screenActionSliderList Is Null / Empty.");
            }

            #endregion

            #region UI Action Checkbox States

            public void SetActionCheckboxState(CheckboxInputActionType actionType, InputUIState state)
            {
                //if (checkboxes.Count > 0)
                //{
                //    UICheckbox<CheckboxDataPackets> checkbox = checkboxes.Find(checkbox => checkbox.dataPackets.action == actionType);

                //    if (checkbox != null)
                //        checkbox.SetUIInputState(state);
                //    else
                //        Debug.LogWarning($"--> Failed :Checkbox Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {checkboxes.Count} Checkboxes");
                //}
                //else
                //    Debug.LogWarning("--> SetActionCheckboxState Failed : screenActionCheckboxList Is Null / Empty.");
            }

            public void SetActionCheckboxState(InputUIState state)
            {
                //if (checkboxes.Count > 0)
                //{
                //    foreach (var checkbox in checkboxes)
                //    {
                //        if (checkbox != null)
                //            checkbox.SetUIInputState(state);
                //        else
                //            Debug.LogWarning($"--> Failed : Checkbox Of Type : {checkbox.actionType}'s Value Missing.");
                //    }
                //}
                //else
                //    Debug.LogWarning("--> SetActionCheckboxState Failed : screenActionCheckboxList Is Null / Empty.");
            }

            #endregion

            #region UI Action Checkbox Value

            public void SetActionCheckboxValue(CheckboxInputActionType actionType, bool value)
            {
                //if (checkboxes.Count > 0)
                //{
                //    UICheckbox<CheckboxDataPackets> checkbox = checkboxes.Find(checkbox => checkbox.dataPackets.action == actionType);

                //    if (checkbox != null)
                //        checkbox.SetSelectionState(value);
                //    else
                //        Debug.LogWarning($"--> Failed : Checkbox Of Type : {actionType} Not Found In Widget Type : {widgetType} With Input Field List With : {checkboxes.Count} Checkboxes");
                //}
                //else
                //    Debug.LogWarning("--> SetActionCheckboxValue Failed : screenActionCheckboxList Is Null / Empty.");
            }

            public void SetActionCheckboxValue(bool value)
            {
                //if (checkboxes.Count > 0)
                //{
                //    foreach (var checkbox in checkboxes)
                //    {
                //        if (checkbox != null)
                //            checkbox.SetSelectionState(value);
                //        else
                //            Debug.LogWarning($"--> Failed : Checkbox Of Type : {checkbox.actionType}'s Value Missing.");
                //    }
                //}
                //else
                //    Debug.LogWarning("--> SetActionCheckboxValue Failed : screenActionCheckboxList Is Null / Empty.");
            }

            #endregion

            #region UI Text Displayer Value

            public void SetUITextDisplayerValue(ScreenTextType textType, string value)
            {
                //if (textDisplayerList.Count > 0)
                //{
                //    UIText<TextDataPackets> textDisplayer = textDisplayerList.Find(textDisplayer => textDisplayer.dataPackets.textType == textType);

                //    if (textDisplayer != null)
                //        textDisplayer.SetScreenUITextValue(value);
                //    else
                //        Debug.LogWarning($"--> Failed : Text Displayer Of Type : {textType} Not Found In Widget Type : {widgetType} With Input Field List With : {textDisplayerList.Count} Text Displayers");
                //}
                //else
                //    Debug.LogWarning("--> SetUITextDisplayerValue Failed : screenTextList Is Null / Empty.");
            }

            //public void SetUITextDisplayerValue(ScreenTextType textType, int value)
            //{
            //    if (textDisplayerList.Count > 0)
            //    {
            //        UIText<TextDataPackets> textDisplayer = textDisplayerList.Find(textDisplayer => textDisplayer.dataPackets.textType == textType);

            //        if (textDisplayer != null)
            //            textDisplayer.SetScreenUITextValue(value.ToString());
            //        else
            //            Debug.LogWarning($"--> Failed : Text Displayer Of Type : {textType} Not Found In Widget Type : {widgetType} With Input Field List With : {textDisplayerList.Count} Text Displayers");
            //    }
            //    else
            //        Debug.LogWarning("--> SetUITextDisplayerValue Failed : screenTextList Is Null / Empty.");
            //}

            #endregion

            #region UI Image Displayer Value

            public void GetUIImageDisplayer(ScreenImageType displayerType, Action<CallbackData<UIImageDisplayer<ImageDataPackets>>> callback)
            {
                CallbackData<UIImageDisplayer<ImageDataPackets>> callbackResults = new CallbackData<UIImageDisplayer<ImageDataPackets>>();

                if (initializeActionGroup)
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(actionGroup, "Action Group", $"There Are No Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                    if (callbackResults.Success())
                    {
                        var initializedActionGroups = actionGroup.FindAll(widget => widget.initialize);

                        callbackResults.SetResult(Helpers.GetAppComponentsValid(initializedActionGroups, "Initialized Action Group", $"There Are No Initialized Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                        if (callbackResults.Success())
                        {
                            foreach (var initializedActionGroup in initializedActionGroups)
                            {
                                foreach (var actionGroupData in initializedActionGroup.screenActionGroup)
                                {
                                    if (actionGroupData.HasComponent(InputType.Image))
                                    {
                                        actionGroupData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var actionGroup = actionGroupData.GetImageComponent();

                                                if (actionGroup != null && actionGroup.imageType == displayerType)
                                                {
                                                    if (actionGroup.value)
                                                    {
                                                        callbackResults.result = $"Set Action Button Event Success - Action Button : {actionGroup.GetName()} Of Type : {displayerType} Found - For Screen Widget : {name}.";
                                                        callbackResults.data = actionGroup;
                                                        callbackResults.resultCode = Helpers.SuccessCode;
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Set Action Button Event Failed - Action Button : {actionGroup.GetName()} Of Type : {displayerType} Found With Missing Value - For Screen Widget : {name}.";
                                                        callbackResults.data = default;
                                                        callbackResults.resultCode = Helpers.ErrorCode;
                                                    }
                                                }
                                                else
                                                {
                                                    callbackResults.result = "Action Group Button Component Not Found";
                                                    callbackResults.data = default;
                                                    callbackResults.resultCode = Helpers.ErrorCode;

                                                }
                                            }
                                            else
                                                callbackResults.SetResult(dataPacketsCallback);
                                        });

                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"Get UI Image Displayer Of Type : {displayerType} Failed - Input Actions Are Not Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void SetUIImageDisplayer(ScreenImageType displayerType, ImageData screenCaptureData, ImageDataPackets dataPackets)
            {
                ////if (imageDisplayers.Count > 0)
                ////{
                ////    UIImageDisplayer<ImageDataPackets> imageDisplayer = imageDisplayers.Find(imageDisplayer => imageDisplayer.dataPackets.imageType == displayerType);

                ////    if (imageDisplayer != null)
                ////        imageDisplayer.SetImageData(screenCaptureData, dataPackets);
                ////    else
                ////        Debug.LogWarning($"--> Failed : Image Displayer Of Type : {displayerType} Not Found In Widget Type : {widgetType} With Input Field List With : {imageDisplayers.Count} Image Displayers");
                ////}
                ////else
                ////    Debug.LogWarning("--> SetUIImageDisplayerValue Failed : screenImageDisplayerList Is Null / Empty.");
            }

            public void SetUIImageDisplayer(ScreenImageType displayerType, Texture2D imageData, bool preserveAspectRatio = true, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if (initializeActionGroup)
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(actionGroup, "Action Group", $"There Are No Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                    if (callbackResults.Success())
                    {
                        var initializedActionGroups = actionGroup.FindAll(widget => widget.initialize);

                        callbackResults.SetResult(Helpers.GetAppComponentsValid(initializedActionGroups, "Initialized Action Group", $"There Are No Initialized Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                        if (callbackResults.Success())
                        {
                            foreach (var initializedActionGroup in initializedActionGroups)
                            {
                                foreach (var actionGroupData in initializedActionGroup.screenActionGroup)
                                {
                                    if (actionGroupData.HasComponent(InputType.Image))
                                    {
                                        actionGroupData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var actionGroup = actionGroupData.GetImageComponent();

                                                if (actionGroup != null && actionGroup.imageType == displayerType)
                                                {
                                                    if (actionGroup.value)
                                                    {
                                                        actionGroup.value.sprite = Helpers.Texture2DToSprite(imageData);

                                                        if(actionGroup.value.sprite == Helpers.Texture2DToSprite(imageData))
                                                            callbackResults.result = $"Image Displayer : {actionGroup.GetName()} Of Type : {displayerType}'s Value Has Been Successfully Set.";
                                                        else
                                                        {
                                                            callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType} - Invalid Operation - Please Check Here.";
                                                            callbackResults.resultCode = Helpers.ErrorCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType} Found With Missing Value - For Screen Widget : {name}.";
                                                        callbackResults.resultCode = Helpers.ErrorCode;
                                                    }
                                                }
                                                else
                                                {
                                                    callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType}'s Image Displayer Component Not Found";
                                                    callbackResults.resultCode = Helpers.ErrorCode;

                                                }
                                            }
                                            else
                                                callbackResults.SetResult(dataPacketsCallback);
                                        });

                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"Set UI Image Displayer Of Type : {displayerType} Failed - Input Actions Are Not Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetUIImageDisplayer(ScreenImageType displayerType, Sprite image, bool preserveAspectRatio = true, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if (initializeActionGroup)
                {
                    callbackResults.SetResult(Helpers.GetAppComponentsValid(actionGroup, "Action Group", $"There Are No Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                    if (callbackResults.Success())
                    {
                        var initializedActionGroups = actionGroup.FindAll(widget => widget.initialize);

                        callbackResults.SetResult(Helpers.GetAppComponentsValid(initializedActionGroups, "Initialized Action Group", $"There Are No Initialized Action Groups For Widget : {GetName()} - Of Type : {GetType().GetData()}"));

                        if (callbackResults.Success())
                        {
                            foreach (var initializedActionGroup in initializedActionGroups)
                            {
                                foreach (var actionGroupData in initializedActionGroup.screenActionGroup)
                                {
                                    if (actionGroupData.HasComponent(InputType.Image))
                                    {
                                        actionGroupData.GetInputDataPacket<ImageDataPackets>(dataPacketsCallback =>
                                        {
                                            if (dataPacketsCallback.Success())
                                            {
                                                var actionGroup = actionGroupData.GetImageComponent();

                                                if (actionGroup != null && actionGroup.imageType == displayerType)
                                                {
                                                    if (actionGroup.value)
                                                    {
                                                        actionGroup.value.sprite = image;

                                                        if (actionGroup.value.sprite == image)
                                                            callbackResults.result = $"Image Displayer : {actionGroup.GetName()} Of Type : {displayerType}'s Value Has Been Successfully Set.";
                                                        else
                                                        {
                                                            callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType} - Invalid Operation - Please Check Here.";
                                                            callbackResults.resultCode = Helpers.ErrorCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType} Found With Missing Value - For Screen Widget : {name}.";
                                                        callbackResults.resultCode = Helpers.ErrorCode;
                                                    }
                                                }
                                                else
                                                {
                                                    callbackResults.result = $"Set Image Displayer Failed - Image Displayer : {actionGroup.GetName()} Of Type : {displayerType}'s Image Displayer Component Not Found";
                                                    callbackResults.resultCode = Helpers.ErrorCode;

                                                }
                                            }
                                            else
                                                callbackResults.SetResult(dataPacketsCallback);
                                        });

                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"Set UI Image Displayer Of Type : {displayerType} Failed - Input Actions Are Not Initialized For Widget : {GetName()} - Of Type : {GetType().GetData()}";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        public interface IScreenWidget<T, U> where T : Enum where U : Enum
        {
            #region Methods

            void Initilize(Action<CallbackData<WidgetStatePacket<T, U>>> callback);

            #endregion

            #region Data Setters

            void SetScreenUIPlacementType(ScreenUIPlacementType uIPlacementType);
            void SetContentContainerType(ContentContainerType containerType);
            void SetUIScreenWidgetVisibilityState(UIScreenWidgetVisibilityState initialVisibilityState);


            /// <summary>
            /// Sets The Name For The Screen Widget Component.
            /// </summary>
            /// <param name="name">The New Name To Be Set For The Screen Widget</param>
            void SetName(string name);

            #endregion

            #region Data Getters


            /// <summary>
            /// Gets The Widgets Name If Assigned.
            /// </summary>
            /// <returns>This Returns The Widgets Name If Assigned Or A Message Stating That The Name Is Not Yet Assigned</returns>
            string GetName();


            /// <summary>
            /// Gets The Screen Widget Type - 
            /// </summary>
            /// <returns>Returns A Screen Widget Type As A Callback WIth An Enum Data/returns>
            CallbackData<T> GetType();

            /// <summary>
            /// Gets The Game Obkect Linked To The Screen Widget Component
            /// </summary>
            /// <returns>A Unity Game Obkect Linked To The Screen Widget Component</returns>
            GameObject GetSceneObject();


            /// <summary>
            /// Gets The Dynamic Containers Linked To This SCreen Widget- 
            /// </summary>
            /// <returns>Returns A Callback Data List With All Assigned Dynamic Container For The Screen Widget/returns>
            CallbackDataList<DynamicContainerBase> GetDynamicContainerList();

            CallbackData<ScreenUIPlacementType> GetScreenUIPlacementType();

            /// <summary>
            /// Gets The UI Screen Space Placement Type - Screen Depth Ordering.
            /// </summary>
            /// <returns>Returns A UI Screen Widgets Screen Placement Type As A Callback WIth Enum Data/returns>
            CallbackData<ContentContainerType> GetContentContainerType();

            /// <summary>
            /// Gets All Referenced Widget Dependency Assets For The Screen Widget
            /// </summary>
            /// <returns>Returns A Callback Data List Of All Referenced Widget Dependency Assets For The Screen Widget As A Callback WIth List Data/returns>
            CallbackDataList<ScreenReferencedWidgetDependencyAssetBundle<U>> GetReferencedWidgetDependencyAssets();

            /// <summary
            /// Gets A UI Screen Widgets Visibilty State
            /// </summary>
            /// <returns>Returns A UI Screen Widgets Visibilty State Type As A Callback WIth Enum Data/returns>
            CallbackData<UIScreenWidgetVisibilityState> GetInitialVisibilityStateType();

            /// <summary
            /// Gets A UI Screen Widgets Visibilty State
            /// </summary>
            /// <returns>Returns A UI Screen Widgets Visibilty State Type As A Callback WIth A Boolean Data/returns>
            CallbackData<bool> GetInitialVisibility();

            #endregion
        }

        [Serializable]
        public abstract class Widget : UIScreenWidgetBaseInput<WidgetType, WidgetType>, IUIWidget
        {
            [Space(15)]
            [Header("Widget Configurations")]

            [Space(5)]
            [SerializeField]
            protected ScreenType screenType = ScreenType.None;

            [Space(5)]
            [SerializeField]
            protected List<WidgetLayoutView> widgetLayouts = new List<WidgetLayoutView>();

            [Space(5)]
            [SerializeField]
            protected WidgetLayoutViewType defaultLayoutType;

            [Space(5)]
            [SerializeField]
            protected SelectableWidgetType selectableAssetType;

            [Space(5)]
            [SerializeField]
            protected bool blurScreen = false;

            #region Scroller

            [Space(10)]
            [Header("Widget Scroller")]

            [Space(5)]
            public UIScroller<SceneDataPackets> scroller = new UIScroller<SceneDataPackets>();

            #endregion

            [Space(10)]
            [Header("Widget Settings")]

            [Space(5)]
            public float initializationDelay;

            [Space(5)]
            public Toggle dontShowAgainToggleField;

            [Space(5)]
            [SerializeField]
            protected bool onWidgetTransition;

            [Space(5)]
            [SerializeField]
            protected bool showWidget;

            [Space(5)]
            [SerializeField]
            protected UIScreenWidgetContainer widgetContainer = new UIScreenWidgetContainer();

            //[HideInInspector]
            public bool dontShowAgain;

            public bool isWidgetVisible = false;

            protected bool isTransitionState;

            protected RectTransform widgetRect;

            Coroutine showWidgetAsyncRoutine;

            [SerializeField]
            private ScreenUIData parentWidget;

            #region Widgets 

            protected Dictionary<string, Widget> registeredWidgets = new Dictionary<string, Widget>();

            #endregion

            public void Init(Action<CallbackData<WidgetStatePacket<WidgetType, WidgetType>>> callback, params EventActionData[] eventActions)
            {
                var callbackResults = new CallbackData<WidgetStatePacket<WidgetType, WidgetType>>(GetType());

                #region Base Initialization

                if (callbackResults.Success())
                {
                    #region Layout

                    callbackResults.SetResult(GetLayoutView());

                    #endregion

                    #region Widgets

                    if (callbackResults.Success())
                    {
                        RegisterEventAction(eventActionRegisteredCallbacResults =>
                        {
                            callbackResults.SetResult(eventActionRegisteredCallbacResults);

                            if (callbackResults.Success())
                            {
                                InitializeInputs(inputsInitializationCallbackResults =>
                                {
                                    callbackResults.SetResult(inputsInitializationCallbackResults);

                                    if (callbackResults.Success())
                                    {
                                        OnRegisterWidget(this, onRegisterWidgetCallbackResults =>
                                        {
                                            callbackResults.SetResult(onRegisterWidgetCallbackResults);

                                            if (callbackResults.Success())
                                            {
                                                var widgetStatePacket = new WidgetStatePacket<WidgetType, WidgetType>(this, WidgetStateType.Initialized);

                                                SetWidgetStatePacket(widgetStatePacket, widgetStatePacketSetCallbackResults =>
                                                {
                                                    callbackResults.SetResult(widgetStatePacketSetCallbackResults);

                                                    if (callbackResults.Success())
                                                    {
                                                        callbackResults.SetResult(GetInitialVisibilityState());

                                                        if (callbackResults.Success())
                                                        {
                                                            switch (GetInitialVisibilityState().GetData())
                                                            {
                                                                case UIScreenWidgetVisibilityState.Visible:

                                                                    ShowWidget(GetType().GetData(), ignoreScreenData: true, callback: showWidgetCallbackResults =>
                                                                    {
                                                                        callbackResults.SetResult(showWidgetCallbackResults);
                                                                    });

                                                                    break;

                                                                case UIScreenWidgetVisibilityState.Hidden:

                                                                    HideWidget(onInitialization: true, callback: hideWidgetCallbackResults =>
                                                                    {
                                                                        callbackResults.SetResult(hideWidgetCallbackResults);
                                                                    });

                                                                    break;
                                                            }

                                                            if (callbackResults.Success())
                                                            {
                                                                callbackResults.result = $"Widget : {GetName()} Of Type : {GetType().GetData()}'s State Packet Has Been Initialized Successfully.";
                                                                callbackResults.data = widgetStatePacket;
                                                            }
                                                            else
                                                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                        }
                                                        else
                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                    }
                                                    else
                                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                });
                                            }
                                        });
                                    }
                                });
                            }

                        }, eventActions);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                    #endregion
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback.Invoke(callbackResults);

                #endregion
            }

            public void SetParentWidget(ScreenUIData parentHandler, Action<CallbackData<ScreenUIData>> callback = null)
            {
                var callbackResults = new CallbackData<ScreenUIData>(Helpers.GetAppComponentValid(parentHandler, "Parent Handle", $"Parent Handle Parameter Value Is Null - For Widget : {GetName()} - Of Type : {GetType().GetData()} - Invalid Operation - Please Check Here."));

                if (callbackResults.Success())
                {
                    parentWidget = parentHandler;

                    callbackResults.result = $"Parent Handle : {parentHandler.GetName()} - Of Type : {parentHandler.GetType().GetData()} - Has Been Assigned Successfully To Widget : {GetName()} - Of Type : {GetType().GetData()}.";
                    callbackResults.data = parentHandler;
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            public CallbackData<ScreenUIData> GetParentWidget()
            {
                var callbackResults = new CallbackData<ScreenUIData>(Helpers.GetAppComponentValid(parentWidget, "Parent Widget", "Parent Widget Is Not Yet Initialized."));

                if(callbackResults.Success())
                {
                    var parentWidgetData = Helpers.GetAppComponentValid(parentWidget, "Parent Widget").GetData();

                    callbackResults.result = $"Parent Widget : {parentWidgetData.name} Found For Screen Widget : {name} Of Type : {widgetType}";
                    callbackResults.data = parentWidgetData;
                }

                return callbackResults;
            }

            protected void OnRegisterWidget<T>(T widget, Action<Callback> callback = null) where T : Widget
            {
                if (widget != null)
                {
                    Callback callbackResults = new Callback(Helpers.GetAppComponentValid(widget, $"{(!string.IsNullOrEmpty(widget?.GetName()) ? widget?.GetName() : "Widget")}", $"Widget : {(!string.IsNullOrEmpty(widget?.GetName()) ? widget?.GetName() : "Widget Name Not Assigned")} Is Not Yet Initialized."));

                    if (callbackResults.Success())
                    {
                        if (!GetRegisteredWidgets().ContainsKey(widget.GetName()) && !GetRegisteredWidgets().ContainsValue(widget))
                        {
                            GetRegisteredWidgets().Add(widget.GetName(), widget);

                            if (GetRegisteredWidgets().ContainsKey(widget.GetName()) && GetRegisteredWidgets().ContainsValue(widget))
                            {
                                callbackResults.result = $"Widget : {widget.GetName()} Of Type : {widget.GetType()} Has Been Registered Successfully.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"On Register Widget Failed - Widget : {widget.GetName()} - Of Type : {widget.GetType()} Is Not Registred - Unexpected Invalid Operation - Please Check Here.";
                                callbackResults.resultCode = Helpers.WarningCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"On Register Widget Failed - Widget : {widget.GetName()} - Of Type : {widget.GetType()} Already Exists In Registred Widgets.";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }

                    callback?.Invoke(callbackResults);
                }
                else
                    throw new ArgumentNullException("On Register Widget Failed - Widget Is Null / Missing");
            }

            protected Dictionary<string, Widget> GetRegisteredWidgets() => registeredWidgets;

            void OnDropDownOptionValueChange(int value, DropdownDataPackets dataPackets) => OnActionDropdownValueChanged(value, dataPackets);

            public void OnWidgetActionEvent(WidgetType popUpType, InputActionButtonType actionType, SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(AppDatabaseManager.Instance, validComponentCallbackResults => 
                {
                    if (validComponentCallbackResults.Success())
                    {
                        Helpers.GetComponent(ScreenUIManager.Instance, validComponentCallbackResults =>
                        {
                            if (validComponentCallbackResults.Success())
                            {
                                switch (actionType)
                                {
                                    case InputActionButtonType.OpenPopUp:

                                        break;

                                    case InputActionButtonType.SelectionOptionsButton:

                                        OnSelectionOptions_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.SelectionButton:

                                        OnSelection_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.Undo:

                                        UndoChanges();

                                        break;

                                    case InputActionButtonType.Delete:

                                        OnDelete_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.Info:

                                        OnInfo_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.PinButton:

                                        OnPinItem_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.BuildNewAsset:

                                        OnBuildNewAsset_ActionEvent(popUpType, dataPackets);

                                        break;

                                    case InputActionButtonType.CloseButton:

                                        OnHideScreenWidget_ActionEvent(popUpType, dataPackets);

                                        break;

                                    case InputActionButtonType.OpenFilePicker_OBJ:

                                        OnOpenFilePicker_ActionEvent(popUpType, dataPackets);

                                        break;

                                    case InputActionButtonType.OpenARView:

                                        OnOpenARView_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.ConfirmationButton:

                                        OnConfirm_ActionEvent(popUpType, dataPackets);

                                        break;

                                    case InputActionButtonType.Cancel:

                                        OnCancel_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.ResetAssetPreviewPose:

                                        OnResetAssetPreviewPose_ActionEvent(AssetModeType.PreviewMode);

                                        break;

                                    case InputActionButtonType.ExportAsset:

                                        OnExportAsset_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.OpenRenderSettings:

                                        OnOpenRendererSettings_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.PublishAsset:

                                        OnPublishAsset_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.CaptureSnapShot:

                                        OnCaptureSnapShot_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.ScrollToTopButton:

                                        OnScrollToTop_ActionEvent();

                                        break;

                                    case InputActionButtonType.ScrollToBottomButton:

                                        OnScrollToBottom_ActionEvent();

                                        break;

                                    case InputActionButtonType.NextNavigationButton:

                                        OnPaginationNavigation_ActionEvent(PaginationNavigationActionType.GoToNextPage);

                                        break;

                                    case InputActionButtonType.PreviousNavigationButton:

                                        OnPaginationNavigation_ActionEvent(PaginationNavigationActionType.GoToPreviousPage);

                                        break;

                                    case InputActionButtonType.FolderActionButton:

                                        OnProject_FolderActions_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.DeselectButton:

                                        OnDeselect_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.Copy_PasteButton:

                                        OnCopyPasteOptions_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.Edit:

                                        OnEdit_ActionEvent(dataPackets);

                                        break;

                                    case InputActionButtonType.HelpButton:

                                        OnHelp_ActionEvent(popUpType, dataPackets);

                                        break;

                                    case InputActionButtonType.GoToSelectedScreen:

                                        OnGoToSelectedScreen_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.OpenProfileButton:

                                        OnOpenProfile_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.OpenInboxButton:

                                        OnOpenInbox_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.OpenScreenSettingsButton:

                                        OnOpenSettings_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.SignUpButton:

                                        OnSignUp_ActionEvents(dataPackets);

                                        break;


                                    case InputActionButtonType.SignInButton:

                                        OnSignIn_ActionEvents(dataPackets);

                                        break;

                                    case InputActionButtonType.ReadButton:

                                        OnSkipSignIn_ActionEvents(dataPackets);

                                        break;
                                }
                            }
                            else
                                Log(validComponentCallbackResults.resultCode, validComponentCallbackResults.result, this);
                        });
                    }
                    else
                        Log(validComponentCallbackResults.resultCode, validComponentCallbackResults.result, this);
                });

                ActionEvents.OnPopUpActionEvent(popUpType, actionType, dataPackets);
                ActionEvents.OnActionButtonClicked(actionType);

                OnActionButtonEvent(popUpType, actionType, dataPackets);
            }

            #region Action Inputs Callbacks

            void OnSelectionOptions_ActionEvents(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                    {
                        if (AppDatabaseManager.Instance != null)
                        {
                            AppDatabaseManager.Instance.GetRefreshData().screenContainer.HasAllWidgetsSelected(allWidgetsSelectedCallback => 
                            {
                                if(allWidgetsSelectedCallback.Success())
                                {
                                    if(SelectableManager.Instance)
                                        SelectableManager.Instance.DeselectAll();
                                    else
                                        LogError("Selectable Manager Instance Is Not Yet Initialized.", this);
                                }
                                else
                                    ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                            });
                        }
                        else
                            LogError("Scene Assets Manager Instance Is Not Yet Initialized.", this);
                    }
                    else
                        LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this);
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnSelection_ActionEvents(SceneDataPackets dataPackets)
            {
                if (AppDatabaseManager.Instance != null && ScreenUIManager.Instance != null)
                {
                    var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                    if (widgetsContainer != null)
                    {
                        switch (dataPackets.selectionOption)
                        {
                            case SelectionOption.Default:

                                break;

                            case SelectionOption.SelectPage:

                                widgetsContainer.SelectAllWidgets(true, selectionCallback =>
                                {
                                    if (Helpers.IsSuccessCode(selectionCallback.resultCode))
                                    {
                                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.SelectionOptionsWidget);
                                        else
                                            LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this);


                                        //Check This Man And Below
                                        widgetsContainer.OnFocusedSelectionStateUpdate();
                                    }
                                    else
                                        LogError(selectionCallback.result, this);
                                });

                                break;

                            case SelectionOption.SelectAll:

                                widgetsContainer.SelectAllWidgets(false, selectionCallback =>
                                {
                                    if (selectionCallback.Success())
                                    {
                                        if (widgetsContainer.GetContentCount().Success())
                                        {
                                            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                                                ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.SelectionOptionsWidget);
                                            else
                                                LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this);

                                            if (widgetsContainer.GetContentCount().data == SelectableManager.Instance.GetFocusedSelectionDataCount())
                                            {
                                                AppDatabaseManager.Instance.GetLayoutViewType(layoutViewCallbackResults =>
                                                {
                                                    if (layoutViewCallbackResults.Success())
                                                    {
                                                        switch (layoutViewCallbackResults.data)
                                                        {
                                                            case LayoutViewType.ItemView:

                                                                ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.FileSelectionOptionsWidget).SetActionButtonUIImageValue(InputActionButtonType.SelectionOptionsButton, UIImageDisplayerType.InputIcon, UIImageType.ItemViewDeselectionIcon);

                                                                break;

                                                            case LayoutViewType.ListView:

                                                                ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.FileSelectionOptionsWidget).SetActionButtonUIImageValue(InputActionButtonType.SelectionOptionsButton, UIImageDisplayerType.InputIcon, UIImageType.ListViewDeselectionIcon);

                                                                break;
                                                        }

                                                    }
                                                    else
                                                        Log(layoutViewCallbackResults.resultCode, layoutViewCallbackResults.result, this);
                                                });
                                            }

                                            //Check This Man And Above
                                            widgetsContainer.OnFocusedSelectionStateUpdate();
                                        }
                                        else
                                            Log(widgetsContainer.GetContentCount().GetResultCode, widgetsContainer.GetContentCount().GetResult, this);
                                    }
                                    else
                                        LogError(selectionCallback.result, this);
                                });

                                break;
                        }
                    }
                    else
                        LogError("Widgets Container Not Found", this);
                }
                else
                    LogError("Scene Assets Manager / Screen UI Manager Instance Is Not Yet Initialized", this);
            }

            void OnDelete_ActionEvent(SceneDataPackets dataPackets)
            {
                int selectionCount = SelectableManager.Instance.GetFocusedSelectionDataCount();

                Helpers.ValueAssigned(selectionCount, valueCallbackResults => 
                {
                    if (valueCallbackResults.Success())
                    {
                        SelectableManager.Instance.GetProjectStructureSelectionSystem(projectSelectionCallbackResults =>
                        {
                            if (projectSelectionCallbackResults.Success())
                            {
                                if (AppDatabaseManager.Instance.GetRefreshData().screenContainer.GetPaginationViewType() == PaginationViewType.Pager)
                                {
                                    List<UIScreenWidget> currentPage = AppDatabaseManager.Instance.GetRefreshData().screenContainer.Pagination_GetCurrentPage();

                                    if (currentPage != null && currentPage.Count > 0)
                                    {
                                        List<UIScreenWidget> selectedWidgets = new List<UIScreenWidget>();

                                        foreach (var selectedWidget in currentPage)
                                            if (selectedWidget.IsSelected())
                                                selectedWidgets.Add(selectedWidget);

                                        Helpers.ValueNotAssigned(selectedWidgets.Count, valueCallbackResults =>
                                        {
                                            if (valueCallbackResults.Success())
                                            {
                                                SelectableManager.Instance.GetProjectStructureSelectionSystem(projectSelectionSystemCallbackResults =>
                                                {
                                                    if (projectSelectionSystemCallbackResults.Success())
                                                    {
                                                        AppDatabaseManager.Instance.GetSortedWidgetsFromList(projectSelectionSystemCallbackResults.data.GetCurrentSelections(), dataPackets.selectableAssetType, getFolderStructureSelectionData =>
                                                        {
                                                            if (Helpers.IsSuccessCode(getFolderStructureSelectionData.resultCode))
                                                            {
                                                                int lastSelectionIndex = getFolderStructureSelectionData.data.Count - 1;
                                                                UIScreenWidget lastSelectedWidget = getFolderStructureSelectionData.data[lastSelectionIndex];

                                                                if (lastSelectedWidget != null)
                                                                    AppDatabaseManager.Instance.GetRefreshData().screenContainer.Pagination_GoToItemPage(lastSelectedWidget);
                                                                else
                                                                    LogWarning("Show Delete Asset Widget Failed - Last Selected Widget Not Found.", this, () => OnDelete_ActionEvent(dataPackets));
                                                            }
                                                            else
                                                                LogWarning(getFolderStructureSelectionData.result, this, () => OnDelete_ActionEvent(dataPackets));
                                                        });

                                                        if (selectionCount == 1)
                                                        {
                                                            string assetName = projectSelectionCallbackResults.data.GetCurrentSelections()[0].name;
                                                            string formattedAssetName = assetName.Replace("_FolderData", "");
                                                            bool hasContent = false;
                                                            SelectableWidgetType assetType = projectSelectionCallbackResults.data.GetCurrentSelections()[0].GetSelectableWidgetType();

                                                            if (assetType == SelectableWidgetType.Folder)
                                                            {
                                                                int contentCount = projectSelectionCallbackResults.data.GetCurrentSelections()[0].GetFolderData().GetFileCount();
                                                                hasContent = contentCount > 0;
                                                            }

                                                            string fileType = (assetType == SelectableWidgetType.Folder) ? "folder" : "asset";
                                                            string hasContentInfo = (hasContent) ? "with its content" : "";
                                                            dataPackets.widgetTitle = (assetType == SelectableWidgetType.Folder) ? "Delete Folder" : "Delete Asset";
                                                            dataPackets.popUpMessage = $"Are you sure you want to remove {fileType} { "'" + formattedAssetName + "'"} {hasContentInfo} permanently?";
                                                        }

                                                        Helpers.ValueIsGraterThanReference(selectionCount, 1, valueAssignedCallbackResults => 
                                                        {
                                                            if (valueAssignedCallbackResults.Success())
                                                            {
                                                                int fileCount = 0;
                                                                int folderCount = 0;

                                                                bool hasMultipleAssetTypes = false;

                                                                string messageTitle = string.Empty;
                                                                string messageInfo = string.Empty;

                                                                foreach (var item in projectSelectionSystemCallbackResults.data.GetCurrentSelections())
                                                                {
                                                                    if (item.GetSelectableWidgetType() == SelectableWidgetType.Folder)
                                                                        folderCount++;

                                                                    if (item.GetSelectableWidgetType() == SelectableWidgetType.Asset)
                                                                        fileCount++;
                                                                }

                                                                if (fileCount > 0 && folderCount > 0)
                                                                    hasMultipleAssetTypes = true;

                                                                if (hasMultipleAssetTypes)
                                                                {
                                                                    string files = (fileCount > 1) ? "Files" : "File";
                                                                    string folders = (folderCount > 1) ? "Folders" : "Folder";

                                                                    messageTitle = "Delete Selections";
                                                                    messageInfo = $"Are you sure you want to remove {fileCount} {files} and {folderCount} {folders} permanently?";
                                                                }
                                                                else
                                                                {
                                                                    if (folderCount > 0 && fileCount == 0)
                                                                    {
                                                                        messageTitle = "Delete Folders";
                                                                        messageInfo = $"Are you sure you want to remove {folderCount} folders permanently?";
                                                                    }

                                                                    if (fileCount > 0 && folderCount == 0)
                                                                    {
                                                                        messageTitle = $"Delete Assets";
                                                                        messageInfo = $"Are you sure you want to remove {fileCount} assets permanently?";
                                                                    }
                                                                }


                                                                dataPackets.widgetTitle = messageTitle;
                                                                dataPackets.popUpMessage = messageInfo;
                                                            }
                                                            else
                                                                Log(valueAssignedCallbackResults.resultCode, valueAssignedCallbackResults.result, this);
                                                        });
                                                    }
                                                    else
                                                        LogError(projectSelectionSystemCallbackResults.result);
                                                });
                                            }
                                            else
                                                Debug.LogError(valueCallbackResults.result);
                                        });
                                    }
                                    else
                                        LogWarning("Show Delete Asset Widget Failed - Current Page Not Found.", this, () => OnDelete_ActionEvent(dataPackets));
                                }

                                if (showWidgetAsyncRoutine != null)
                                {
                                    StopCoroutine(showWidgetAsyncRoutine);
                                    showWidgetAsyncRoutine = null;
                                }

                                if (showWidgetAsyncRoutine == null)
                                    showWidgetAsyncRoutine = StartCoroutine(ShowWidgetAsync(dataPackets));
                            }
                            else
                                Log(projectSelectionCallbackResults.resultCode, projectSelectionCallbackResults.result, this);
                        });
                    }
                    else
                        Debug.LogError(valueCallbackResults.result);
                });
            }

            void OnOpenFilePicker_ActionEvent(WidgetType popUpType, SceneDataPackets dataPackets) => ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(popUpType, dataPackets);

            void OnPinItem_ActionEvent(SceneDataPackets dataPackets)
            {
                var callbackResults = new Callback(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized."));

                if (callbackResults.Success())
                {
                    var appDatabaseManagerInstance = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                    SelectableManager.Instance.GetProjectStructureSelectionSystem(projectSelectionCallbackResults => 
                    {
                        callbackResults.SetResult(projectSelectionCallbackResults);

                        if (callbackResults.Success())
                        {
                            var pinData = SelectableManager.Instance.HasPinnedSelection(projectSelectionCallbackResults.GetData().GetCurrentSelections());
                            DefaultUIWidgetActionState widgetActionState = DefaultUIWidgetActionState.Default;

                            if (pinData.pinned)
                                widgetActionState = DefaultUIWidgetActionState.Default;
                            else
                                widgetActionState = DefaultUIWidgetActionState.Pinned;

                            int pinItemsCount = SelectableManager.Instance.GetFocusedSelectionDataCount();

                            if (pinItemsCount > 0)
                            {
                                var currentSelection = projectSelectionCallbackResults.data.GetCurrentSelections();

                                appDatabaseManagerInstance.SetDefaultUIWidgetActionState(currentSelection, widgetActionState, assetsPinnedCallback =>
                                {
                                    if (Helpers.IsSuccessCode(assetsPinnedCallback.resultCode))
                                    {
                                        Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, screenUIManagerCallbackResults =>
                                        {
                                            if (screenUIManagerCallbackResults.Success())
                                            {
                                                var screenUIManager = screenUIManagerCallbackResults.data;

                                                screenUIManager.GetCurrentScreen().GetData().GetWidget(WidgetType.FileSelectionOptionsWidget).SetActionButtonUIImageValue(InputActionButtonType.PinButton, UIImageDisplayerType.InputIcon, (widgetActionState == DefaultUIWidgetActionState.Pinned) ? UIImageType.PinDisabledIcon : UIImageType.PinEnabledIcon);

                                                if (dataPackets.notification.showNotifications)
                                                {
                                                    if (pinItemsCount == 1)
                                                    {
                                                        string assetName = appDatabaseManagerInstance.GetFormattedName(currentSelection[0].name, currentSelection[0].GetSelectableWidgetType());
                                                        dataPackets.notification.message = (widgetActionState == DefaultUIWidgetActionState.Pinned) ? $"{assetName} Pinned" : $"{assetName} Removed From Pinned Items";
                                                    }

                                                    if (pinItemsCount > 1)
                                                        dataPackets.notification.message = (widgetActionState == DefaultUIWidgetActionState.Pinned) ? $"{pinItemsCount} Items Pinned" : $"{pinItemsCount} Items Removed From Pinned";

                                                    if (callbackResults.Success())
                                                    {
                                                        callbackResults.SetResult(appDatabaseManagerInstance.GetAssetBundlesLibrary());

                                                        if (callbackResults.Success())
                                                        {
                                                            var assetBundlesLibrary = appDatabaseManagerInstance.GetAssetBundlesLibrary().GetData();

                                                            assetBundlesLibrary.GetDynamicContainer<DynamicWidgetsContainer>(screenUIManager.GetCurrentScreenType().GetData(), ContentContainerType.FolderStuctureContent, ContainerViewSpaceType.Screen, dynamicContainerCallbackResults =>
                                                            {
                                                                callbackResults.SetResult(dynamicContainerCallbackResults);

                                                                if (callbackResults.Success())
                                                                {
                                                                    var container = dynamicContainerCallbackResults.GetData();

                                                                    container.GetContent(contentLoadedCallbackResults =>
                                                                    {
                                                                        callbackResults.SetResult(contentLoadedCallbackResults);

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            appDatabaseManagerInstance.SortScreenWidgets(contentLoadedCallbackResults.data, async widgetsSortedCallbackResults =>
                                                                            {
                                                                                callbackResults.SetResult(widgetsSortedCallbackResults);

                                                                                if (callbackResults.Success())
                                                                                {
                                                                                    callbackResults.SetResult(appDatabaseManagerInstance.GetProjectStructureData());

                                                                                    if (callbackResults.Success())
                                                                                    {
                                                                                        var lastSelectionWidget = currentSelection.FindLast(x => x.GetActive());

                                                                                        if (lastSelectionWidget != null)
                                                                                            SelectableManager.Instance.Select(lastSelectionWidget.name, FocusedSelectionType.SelectedItem);
                                                                                        else
                                                                                            LogError("Last Selected Widget Missing / Not Found", this);

                                                                                        await ScreenUIManager.Instance.RefreshAsync();

                                                                                        if (appDatabaseManagerInstance.GetProjectStructureData().data.GetPaginationViewType() == PaginationViewType.Pager)
                                                                                            StartCoroutine(GoToItemPageAsync(currentSelection[pinItemsCount - 1].name));
                                                                                        else if (appDatabaseManagerInstance.GetProjectStructureData().data.GetPaginationViewType() == PaginationViewType.Scroller)
                                                                                            StartCoroutine(SctollToItemAsync(currentSelection[pinItemsCount - 1].name));

                                                                                        NotificationSystemManager.Instance.ScheduleNotification(dataPackets.notification);
                                                                                    }
                                                                                    else
                                                                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                                }
                                                                                else
                                                                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                            });
                                                                        }
                                                                        else
                                                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                                                    });
                                                                }
                                                            });
                                                        }
                                                    }
                                                }
                                            }

                                        }, "Screen UI Manager Is Not Yet Initialized.");
                                    }
                                    else
                                        LogWarning(assetsPinnedCallback.result, this);
                                });
                            }
                            else
                                LogWarning("Pin Button Failed - There Are No Selections Found.", this);
                        }
                        else
                            Log(projectSelectionCallbackResults.resultCode, projectSelectionCallbackResults.result, this);
                    });
                }
                else
                    LogError("Scene Assets Manager Instance Is Not Yet Initialized.", this);
            }

            void OnBuildNewAsset_ActionEvent(WidgetType widgetType, SceneDataPackets dataPackets)
            {
                #region Double Check

                //Folder currentFolder = AppDatabaseManager.Instance.GetCurrentFolder();

                //if (!string.IsNullOrEmpty(currentFolder.storageData.projectDirectory))
                //{
                //    AppDatabaseManager.Instance.DirectoryFound(currentFolder.storageData.projectDirectory, directoryFoundCallback =>
                //    {
                //        if (Helpers.IsSuccessCode(directoryFoundCallback.resultCode))
                //        {
                //            AppDatabaseManager.Instance.BuildSceneAsset(currentFolder.storageData, async (assetBuiltCallback) =>
                //            {
                //                if (Helpers.IsSuccessCode(assetBuiltCallback.resultCode))
                //                {
                //                    if (ScreenUIManager.Instance != null)
                //                    {
                //                        ActionEvents.OnPopUpActionEvent(widgetType, InputActionButtonType.CloseButton, dataPackets);
                //                        await ScreenUIManager.Instance.ShowScreenAsync(widgetType);
                //                    }
                //                    else
                //                        LogWarning("Screen Manager Missing.", this, () => OnBuildNewAsset_ActionEvent(widgetType, dataPackets));
                //                }
                //                else
                //                    LogWarning(assetBuiltCallback.result, this, () => OnBuildNewAsset_ActionEvent(widgetType, dataPackets));
                //            });
                //        }
                //        else
                //            LogWarning(directoryFoundCallback.result, this, () => OnBuildNewAsset_ActionEvent(widgetType, dataPackets));
                //    });
                //}
                //else
                //    LogWarning("Build New Asset Failed - Current Directory Data Is Null.", this, () => OnBuildNewAsset_ActionEvent(widgetType, dataPackets));

                #endregion
            }

            async void OnHideScreenWidget_ActionEvent(WidgetType widgetType, SceneDataPackets dataPackets)
            {
                try
                {
                    if (widgetType == WidgetType.SceneAssetPreviewWidget)
                    {
                        AppDatabaseManager.Instance.OnClearPreviewedContent(false, async contentClrearedCallback =>
                        {
                            if (Helpers.IsSuccessCode(contentClrearedCallback.resultCode))
                            {
                                AppDatabaseManager.Instance.SetCurrentSceneAsset(AppDatabaseManager.Instance.GetSceneAssets()[0]);
                                //ScreenUIManager.Instance.ShowScreenAsync(dataPackets);

                                await ScreenUIManager.Instance.RefreshAsync();
                            }
                            else
                                LogError(contentClrearedCallback.result, this);
                        });

                        //dataPackets.sceneAsset = null;
                        //SceneAssetsManager.Instance.OnSceneAssetPreviewMode(dataPackets);
                    }

                    if (widgetType == WidgetType.PermissionsRequestWidget)
                    {
                        if (dataPackets.canTransitionSceneAsset)
                        {
                            if (!SelectableManager.Instance.HasAssetSelected() && !SelectableManager.Instance.HasSelection())
                                ActionEvents.OnTransitionSceneEventCamera(dataPackets);
                            else
                                LogWarning("There's Still A Selection Active.", this, () => OnHideScreenWidget_ActionEvent(widgetType, dataPackets));
                        }
                    }

                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                        ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(widgetType, dataPackets);
                    else
                        LogWarning("Failed To Close Pop Up Because Screen Manager's Get Current Screen Data Value Is Null.", this, () => OnHideScreenWidget_ActionEvent(widgetType, dataPackets));

                    if (widgetType == WidgetType.SnapShotWidget)
                    {
                        // Show Notification
                        Notification notification = new Notification
                        {
                            message = "Picture Discarded Successfully",
                            notificationType = NotificationType.Info,
                            screenType = ScreenType.ProjectDashboardScreen,
                            screenPosition = SceneAssetPivot.TopCenter,
                            blurScreen = true,
                            delay = AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.NotificationDelay).value,
                            duration = AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.NotificationDuration).value // Get From Value List In Scene Assets Manager.
                        };

                        NotificationSystemManager.Instance.ScheduleNotification(notification);
                    }

                    if (widgetType == WidgetType.FolderCreationWidget)
                    {
                        if (AppDatabaseManager.Instance.GetLoadedSceneAssetsList().Count == 0)
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(ScreenNavigationManager.Instance.GetEmptyFolderDataPackets());
                    }

                    if (widgetType == WidgetType.UserHelpScreenWidget)
                    {
                        var widget = ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(widgetType).GetComponent<UserHelpInfoScreenWidget>();

                        if (widget != null)
                        {
                            widget.GetTutorialView(viewCallback =>
                            {
                                if (viewCallback.Success())
                                {
                                    if (viewCallback.data.dataPackets.refreshScreenOnLoad)
                                        ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(viewCallback.data.dataPackets);
                                }
                                else
                                    Log(viewCallback.resultCode, viewCallback.result, this);
                            });
                        }
                        else
                            LogError($"Couldn't Hide Widget Of Type : {widgetType} - Widget Missing / Not Found.", this);
                    }

                    if (widgetType == WidgetType.CreateNewProjectWidget)
                        await ScreenUIManager.Instance.RefreshAsync();
                }
                catch (Exception exception)
                {
                    LogError($"Failed To Close Widget With Exception : {exception.Message}", this, () => OnHideScreenWidget_ActionEvent(widgetType, dataPackets));
                    throw exception;
                }
            }

            void OnOpenARView_ActionEvent(SceneDataPackets dataPackets)
            {
                //if (Application.platform == RuntimePlatform.Android)
                //{
                //    if (AssetImportContentManager.Instance != null)
                //    {
                //        Debug.Log($"RG_Unity : UserRequestedAppPermissions Called From Unity - Instance Initialized - Not Null.");

                //        if (AssetImportContentManager.Instance.IsCameraPermissionsGranted())
                //        {
                //            Debug.Log($"RG_Unity : UserRequestedAppPermissions Called From Unity - Permission Granted");

                //            ScreenUIManager.Instance.ShowScreenAsync(dataPackets);

                //            if (AppDatabaseManager.Instance)
                //                AppDatabaseManager.Instance.SetCurrentSceneMode(dataPackets.sceneMode);
                //            else
                //                LogWarning("Scene Assets Not Yet Initialized.", this, () => OnOpenARView_ActionEvent(dataPackets));
                //        }
                //        else
                //        {
                //            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                //                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                //            else
                //                LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this, () => OnOpenARView_ActionEvent(dataPackets));

                //            AssetImportContentManager.Instance.SetRequestedPermissionData(dataPackets);
                //        }
                //    }
                //    else
                //        LogWarning("Asset Import Content Manager Not Yet Initialized.", this, () => OnOpenARView_ActionEvent(dataPackets));
                //}
                //else
                //{
                //    if (AssetImportContentManager.Instance != null)
                //    {
                //        if (AssetImportContentManager.Instance.ShowPermissionDialogue())
                //        {
                //            AppDatabaseManager.Instance.SetCurrentSceneMode(dataPackets.sceneMode);

                //            if (!SelectableManager.Instance.HasAssetSelected() && !SelectableManager.Instance.HasSelection())
                //                ActionEvents.OnTransitionSceneEventCamera(dataPackets);
                //            else
                //                LogWarning("There's Still A Selection Active.", this, () => OnOpenARView_ActionEvent(dataPackets));

                //            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                //                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                //            else
                //                LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this, () => OnOpenARView_ActionEvent(dataPackets));

                //            AssetImportContentManager.Instance.SetRequestedPermissionData(dataPackets);
                //        }
                //        else
                //        {
                //            ScreenUIManager.Instance.ShowScreenAsync(dataPackets);
                //            AppDatabaseManager.Instance.SetCurrentSceneMode(dataPackets.sceneMode);
                //        }
                //    }
                //    else
                //        LogWarning("Asset Import Content Manager Not Yet Initialized.", this, () => OnOpenARView_ActionEvent(dataPackets));
                //}
            }

            async void OnConfirm_ActionEvent(WidgetType popUpType, SceneDataPackets dataPackets)
            {
                switch (dataPackets.widgetType)
                {
                    case WidgetType.PermissionsRequestWidget:

                        OnPermissionsReques_ActionEvents(popUpType, dataPackets);

                        break;

                    case WidgetType.DeleteAssetWidget:

                        OnDeleteAssetWidget_ActionEvent(dataPackets);

                        break;

                    case WidgetType.SceneAssetExportWidget:

                        OnSceneAssetExport_ActionEvent(popUpType, dataPackets);

                        break;

                    case WidgetType.AssetPublishingWidget:

                        OnAssetPublishing_ActionEvent(dataPackets);

                        break;

                    case WidgetType.NetworkNotificationWidget:

                        OnNetworkNotification_ActionEvent(dataPackets);

                        break;

                    case WidgetType.FolderCreationWidget:

                        OnCreateNewFolder_ActionEvent(dataPackets);

                        break;

                    case WidgetType.ProjectCreationWarningWidget:

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this, () => OnCancel_ActionEvent(dataPackets));

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.CreateNewProjectWidget, dataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this, () => OnCancel_ActionEvent(dataPackets));

                        await ScreenUIManager.Instance.RefreshAsync();

                        break;
                }
            }

            void OnAssetPublishing_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);

                    if (PublishingManager.Instance != null)
                        PublishingManager.Instance.Publish();
                    else
                        LogWarning("Asset Publishing Failed : Publishing Manager Instance Is Not Yet Initialized.", this, () => OnAssetPublishing_ActionEvent(dataPackets));
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnAssetPublishing_ActionEvent(dataPackets));
            }

            void OnNetworkNotification_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);

                    if (PublishingManager.Instance != null)
                        PublishingManager.Instance.Publish();
                    else
                        LogWarning("Asset Publishing Failed : Publishing Manager Instance Is Not Yet Initialized.", this, () => OnNetworkNotification_ActionEvent(dataPackets));
                }
                else
                    LogWarning("Asset Publishing Failed : Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnNetworkNotification_ActionEvent(dataPackets));
            }

            void OnSceneAssetExport_ActionEvent(WidgetType popUpType, SceneDataPackets dataPackets)
            {
                if (AssetImportContentManager.Instance != null)
                    if (AppDatabaseManager.Instance != null)
                        if (AppDatabaseManager.Instance.GetCurrentAssetExportData().value != null)
                            AssetImportContentManager.Instance.ExportAsset(AppDatabaseManager.Instance.GetCurrentAssetExportData());
                        else
                            LogWarning("Export Asset Failed : Scene Assets Manager Instance's Get Current Asset Export Data Value Is Missing / Null.", this, () => OnSceneAssetExport_ActionEvent(popUpType, dataPackets));
                    else
                        LogWarning("Export Asset Failed : Scene Assets Manager Instance Is Not Yet Initialized.", this, () => OnSceneAssetExport_ActionEvent(popUpType, dataPackets));
                else
                    LogWarning("Export Asset Failed : Asset Import Content Manager Instance Is Not Yet Initialized.", this, () => OnSceneAssetExport_ActionEvent(popUpType, dataPackets));


                if (ScreenUIManager.Instance != null)
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(popUpType, dataPackets);
                else
                    LogWarning("Export Asset Failed : Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnSceneAssetExport_ActionEvent(popUpType, dataPackets));
            }

            async void OnPermissionsReques_ActionEvents(WidgetType popUpType, SceneDataPackets dataPackets)
            {
                try
                {
                   // // Requesting Permissions
                   // if (AssetImportContentManager.Instance)
                   //     AssetImportContentManager.Instance.UserRequestedAppPermissions(AssetImportContentManager.Instance.GetRequestedPermissionData());
                   // else
                   //     LogWarning("Asset Import Content Manager Not Yet initialized.", this, () => OnPermissionsReques_ActionEvents(popUpType, dataPackets));

                   // if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                   //     ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(popUpType, AssetImportContentManager.Instance.GetRequestedPermissionData());
                   // else
                   //     LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this, () => OnPermissionsReques_ActionEvents(popUpType, dataPackets));

                   // AppDatabaseManager.Instance.SetCurrentSceneAsset(AppDatabaseManager.Instance.GetSceneAssets()[0]);

                   //await  ScreenUIManager.Instance.ShowScreenAsync(AssetImportContentManager.Instance.GetRequestedPermissionData());

                   // AppDatabaseManager.Instance.SetCurrentSceneMode(AssetImportContentManager.Instance.GetRequestedPermissionData().sceneMode);

                   // #if UNITY_EDITOR

                   // if (AssetImportContentManager.Instance.ShowPermissionDialogue())
                   // {
                   //     AppDatabaseManager.Instance.SetCurrentSceneAsset(AppDatabaseManager.Instance.GetSceneAssets()[0]);
                   //     ScreenUIManager.Instance.ShowScreenAsync(AssetImportContentManager.Instance.GetRequestedPermissionData());
                   //     AppDatabaseManager.Instance.SetCurrentSceneMode(AssetImportContentManager.Instance.GetRequestedPermissionData().sceneMode);
                   // }

                   // #endif
                }
                catch (Exception exception)
                {
                    LogError($"Failed To Close Widget With Exception : {exception.Message}", this, () => OnPermissionsReques_ActionEvents(popUpType, dataPackets));
                    throw exception;
                }
            }

            void OnDeleteAssetWidget_ActionEvent(SceneDataPackets dataPackets)
            {
                try
                {
                    if (SelectableManager.Instance.HasActiveSelection())
                    {
                        SelectableManager.Instance.GetProjectStructureSelectionSystem(projectSelectionCallbackResults => 
                        {
                            if (projectSelectionCallbackResults.Success())
                            {
                                int deletedFileCount = 0;
                                var selectedWidgets = projectSelectionCallbackResults.GetData().GetCurrentSelections();

                                deletedFileCount = selectedWidgets.Count;

                                if (deletedFileCount > 0)
                                    AppDatabaseManager.Instance.OnDelete(selectedWidgets, async deletedAssetsCallback =>
                                    {
                                        if (Helpers.IsSuccessCode(deletedAssetsCallback.resultCode))
                                        {
                                            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                                                ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);
                                            else
                                                LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this, () => OnDeleteAssetWidget_ActionEvent(dataPackets));

                                            await ScreenUIManager.Instance.RefreshAsync();

                                            if (dataPackets.notification.showNotifications)
                                            {
                                                if (deletedFileCount == 1)
                                                {
                                                    string assetName = AppDatabaseManager.Instance.GetAssetNameFormatted(selectedWidgets[0].name, selectedWidgets[0].GetSelectableWidgetType());
                                                    dataPackets.notification.message = $"{assetName} Deleted";
                                                }

                                                if (deletedFileCount > 1)
                                                    dataPackets.notification.message = $"{deletedFileCount} Files Deleted";

                                                NotificationSystemManager.Instance.ScheduleNotification(dataPackets.notification);
                                            }
                                        }
                                        else
                                            LogWarning(deletedAssetsCallback.result, this);
                                    });
                                else
                                    LogWarning("Delete Assets Failed - No Assets To Delete Found.", this);
                            }
                            else
                                Log(projectSelectionCallbackResults.resultCode, projectSelectionCallbackResults.result, this);
                        });
                    }
                    else
                        LogWarning("Delete Assets Failed - There Are No Selections Found.", this);

                }
                catch (Exception exception)
                {
                    LogError($"Failed To Delete Asset With Exception : {exception.Message}", this);
                    throw exception;
                }
            }

            void OnCreateNewFolder_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);

                    AppDatabaseManager.Instance.CreateNewProjectFolder((folderCreated) =>
                    {
                        if (Helpers.IsSuccessCode(folderCreated.resultCode))
                        {
                            if (SelectableManager.Instance)
                            {
                                SelectableManager.Instance.OnSetFocusedWidgetSelectionInfo(folderCreated.data, true, async selectionInfoSet =>
                                {
                                    if (Helpers.IsSuccessCode(selectionInfoSet.resultCode))
                                    {
                                        var widgetsContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                                        if(widgetsContainer != null)
                                        {
                                            // Reload Screen
                                            await ScreenUIManager.Instance.RefreshAsync();

                                            if(widgetsContainer.GetPaginationViewType() == PaginationViewType.Scroller)
                                            {
                                                if (dataPackets.notification.showNotifications)
                                                    NotificationSystemManager.Instance.ScheduleNotification(dataPackets.notification);
                                            }

                                            if (widgetsContainer.GetPaginationViewType() == PaginationViewType.Pager)
                                            {
                                                var widget = widgetsContainer.GetWidgetNamed(folderCreated.data.name);

                                                if (widget != null)
                                                {
                                                    widgetsContainer.Pagination_GoToItemPageAsync(widget, goToPageCallback =>
                                                    {
                                                        if (Helpers.IsSuccessCode(goToPageCallback.resultCode))
                                                        {
                                                            if (dataPackets.notification.showNotifications)
                                                                NotificationSystemManager.Instance.ScheduleNotification(dataPackets.notification);
                                                        }
                                                        else
                                                            LogError(goToPageCallback.result, this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                                                    });
                                                }
                                                else
                                                    LogError($"Widget Named : {folderCreated.data.name} Not Found.", this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                                            }
                                        }
                                        else
                                            LogError($"Widgets Container Not Found.", this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                                    }
                                    else
                                        LogWarning(selectionInfoSet.result, this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                                });
                            }
                            else
                                LogError($"Couldn't Create New Folder - Selectable Manager Instance Is Not Yet Initialized", this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                        }
                        else
                            LogWarning(folderCreated.result, this, () => OnCreateNewFolder_ActionEvent(dataPackets));
                    });
                }
                else
                    LogWarning("Asset Publishing Failed : Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnCreateNewFolder_ActionEvent(dataPackets));
            }

            void OnCancel_ActionEvent(SceneDataPackets dataPackets)
            {
                switch (dataPackets.widgetType)
                {
                    case WidgetType.FileSelectionOptionsWidget:

                        if (SelectableManager.Instance.HasActiveSelection())
                            SelectableManager.Instance.OnDeselectAll();

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this, () => OnCancel_ActionEvent(dataPackets));

                        break;

                    case WidgetType.CreateNewProjectWidget:

                        SceneDataPackets sceneDataPackets = new SceneDataPackets();

                        sceneDataPackets.SetReferencedScreenType(dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());
                        sceneDataPackets.SetReferencedWidgetType(WidgetType.ProjectCreationWarningWidget);
                        sceneDataPackets.SetScreenBlurState(true);
                        sceneDataPackets.SetReferencedUIScreenPlacementType(ScreenUIPlacementType.ForeGround);

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(sceneDataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this);

                        break;

                    case WidgetType.ProjectCreationWarningWidget:

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);

                        SceneDataPackets projectDataPackets = new SceneDataPackets();

                        projectDataPackets.SetReferencedScreenType(dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());
                        projectDataPackets.SetReferencedWidgetType(WidgetType.CreateNewProjectWidget);
                        projectDataPackets.SetScreenBlurState(true);
                        projectDataPackets.SetReferencedUIScreenPlacementType(ScreenUIPlacementType.Default);

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(projectDataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this);

                        break;

                    case WidgetType.SignInWarningWidget:

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType, dataPackets);

                        SceneDataPackets loginViewDataPackets = new SceneDataPackets();

                        loginViewDataPackets.SetReferencedScreenType(dataPackets.GetReferencedScreenType().GetData().GetValue().GetData());
                        loginViewDataPackets.SetReferencedWidgetType(WidgetType.SignInWidget);
                        loginViewDataPackets.SetScreenBlurState(true);
                        loginViewDataPackets.SetReferencedUIScreenPlacementType(ScreenUIPlacementType.Background);

                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(loginViewDataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this);

                        break;
                }
            }

            void OnResetAssetPreviewPose_ActionEvent(AssetModeType modeType) => ActionEvents.OnResetSceneAssetPreviewPoseEvent(modeType);

            void OnExportAsset_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnOpenRendererSettings_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnPublishAsset_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnCaptureSnapShot_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenCaptureManager.Instance != null)
                {
                    ScreenCaptureManager.Instance.CaptureScreen((onScreenCaptured) =>
                    {
                        if (Helpers.IsSuccessCode(onScreenCaptured.resultCode))
                        {
                            if (ScreenUIManager.Instance != null)
                            {
                                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                            }
                            else
                                LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this);
                        }
                        else
                            LogWarning(onScreenCaptured.result, this);
                    });
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnScrollToTop_ActionEvent()
            {
                var callbackResults = new Callback();

                Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, screenUIManagerCallbackResults => 
                {
                    callbackResults.SetResult(screenUIManagerCallbackResults);

                    if (callbackResults.Success())
                    {
                        var screenUIManager = screenUIManagerCallbackResults.data;

                        if(screenUIManager.GetCurrentScreen().GetData().GetType().GetData() == ScreenType.ProjectDashboardScreen)
                        {
                            callbackResults.SetResult(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized."));

                            if (callbackResults.Success())
                            {
                                var appDatabaseManagerInstance = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                                callbackResults.SetResult(appDatabaseManagerInstance.GetAssetBundlesLibrary());

                                if (callbackResults.Success())
                                {
                                    var assetBundlesLibrary = appDatabaseManagerInstance.GetAssetBundlesLibrary().GetData();

                                    assetBundlesLibrary.GetDynamicContainer<DynamicWidgetsContainer>(screenUIManager.GetCurrentScreenType().GetData(), ContentContainerType.FolderStuctureContent, ContainerViewSpaceType.Screen, dynamicContainerCallbackResults =>
                                    {
                                        callbackResults.SetResult(dynamicContainerCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            var container = dynamicContainerCallbackResults.GetData();
                                            container.ScrollToTop();
                                        }
                                    });
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                }, "Screen UI Manager Instance Is Not Yet Initialized.");
            }

            void OnScrollToBottom_ActionEvent()
            {
                var callbackResults = new Callback();

                Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, screenUIManagerCallbackResults =>
                {
                    callbackResults.SetResult(screenUIManagerCallbackResults);

                    if (callbackResults.Success())
                    {
                        var screenUIManager = screenUIManagerCallbackResults.GetData();

                        if (screenUIManager.GetCurrentScreen().GetData().GetType().GetData() == ScreenType.ProjectDashboardScreen)
                        {
                            callbackResults.SetResult(Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, "App Database Manager Instance Is Not Yet Initialized."));

                            if (callbackResults.Success())
                            {
                                var appDatabaseManagerInstance = Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name).GetData();

                                callbackResults.SetResult(appDatabaseManagerInstance.GetAssetBundlesLibrary());

                                if (callbackResults.Success())
                                {
                                    var assetBundlesLibrary = appDatabaseManagerInstance.GetAssetBundlesLibrary().GetData();

                                    assetBundlesLibrary.GetDynamicContainer<DynamicWidgetsContainer>(screenUIManager.GetCurrentScreenType().GetData(), ContentContainerType.FolderStuctureContent, ContainerViewSpaceType.Screen, dynamicContainerCallbackResults =>
                                    {
                                        callbackResults.SetResult(dynamicContainerCallbackResults);

                                        if (callbackResults.Success())
                                        {
                                            var container = dynamicContainerCallbackResults.GetData();
                                            container.ScrollToBottom();
                                        }
                                    });
                                }
                                else
                                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                            }
                            else
                                Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                }, "Screen UI Manager Is Not Yet Initialized.");
            }

            void OnPaginationNavigation_ActionEvent(PaginationNavigationActionType actionType) => AppDatabaseManager.Instance.GetRefreshData().screenContainer.OnPaginationActionButtonPressed(actionType);

            void OnProject_FolderActions_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    if (ScreenUIManager.Instance.HasCurrentScreen().Success())
                    {
                        switch(ScreenUIManager.Instance.GetCurrentScreenType().GetData())
                        {
                            case ScreenType.ProjectCreationScreen:

                                if (dataPackets.folderStructureType == FolderStructureType.RootFolder)
                                {
                                    AppDatabaseManager.Instance.GetDataPacketsLibrary().GetDataPacket(WidgetType.CreateNewProjectWidget, dataPacketCallbackResults => 
                                    {
                                        if (dataPacketCallbackResults.Success())
                                        {
                                            ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.UITextDisplayerWidget);
                                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPacketCallbackResults.GetData().GetWidgetConfigDataPacket().GetData().GetType().GetData());
                                        }
                                        else
                                            Log(dataPacketCallbackResults.resultCode, dataPacketCallbackResults.result, this);
                                    });
                                }

                                break;

                            case ScreenType.ProjectDashboardScreen:

                                if (dataPackets.folderStructureType == FolderStructureType.RootFolder)
                                {
                                    ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(WidgetType.UITextDisplayerWidget);

                                    SceneDataPackets packets = dataPackets;
                                    packets.widgetType = WidgetType.FolderCreationWidget;

                                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                                    {
                                        if (AppDatabaseManager.Instance)
                                        {
                                            var widgetContainer = AppDatabaseManager.Instance.GetRefreshData().screenContainer;

                                            if (widgetContainer != null)
                                            {
                                                widgetContainer.GetPlaceHolder(placeholder =>
                                                {
                                                    if (Helpers.IsSuccessCode(placeholder.resultCode))
                                                    {
                                                        if (!placeholder.data.IsActive())
                                                        {
                                                            if (widgetContainer.GetLastContentIndex().Success())
                                                            {
                                                                placeholder.data.ShowPlaceHolder(widgetContainer.GetContentContainer(), widgetContainer.GetCurrentLayoutWidgetDimensions(), widgetContainer.GetLastContentIndex().data, true);
                                                                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(packets);
                                                                //StartCoroutine(OnShowWidgetAsync(WidgetType.UITextDisplayerWidget, actionButton.dataPackets));
                                                            }
                                                            else
                                                                Log(widgetContainer.GetLastContentIndex().GetResultCode, widgetContainer.GetLastContentIndex().GetResult, this);
                                                        }
                                                    }
                                                    else
                                                        LogWarning(placeholder.result, this, () => OnProject_FolderActions_ActionEvent(dataPackets));
                                                });
                                            }
                                            else
                                                LogWarning("Get Place Holder Failed : Widgets Container Is Missing / Null.", this);
                                        }
                                        else
                                            LogWarning("Get Place holder Failed : Scene Assets Manager Instance Is Not Yet Initialized", this);
                                    }
                                    else
                                        LogWarning("Screen UI Manager Instance Get Current Screen Data Failed : Value Is Missing / Null.", this);
                                }
                                else
                                    LogError("Delete Folder Action - Delete Folder Widget", this);

                                break;
                        }
                    }
                    else
                        Log(ScreenUIManager.Instance.HasCurrentScreen().resultCode, ScreenUIManager.Instance.HasCurrentScreen().result, this);
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized", this, () => OnProject_FolderActions_ActionEvent(dataPackets));
            }

            void OnDeselect_ActionEvent(SceneDataPackets dataPackets)
            {
                if (SelectableManager.Instance)
                {
                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                    {
                        SelectableManager.Instance.DeselectAll();
                        ScreenUIManager.Instance.GetCurrentScreen().GetData().HideScreenWidget(dataPackets.widgetType);
                    }
                    else
                        LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this);
                }
                else
                    LogError("Selectable Manager Instance Is Not Yet Initialized.", this);
            }

            void OnCopyPasteOptions_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                    {
                        if (AppDatabaseManager.Instance != null)
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                        else
                            LogError("Scene Assets Manager Instance Is Not Yet Initialized.", this);
                    }
                    else
                        LogWarning("On Widget Action Event Screen Manager Get Current Screen Data Value Is Null", this);
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized.", this);
            }

            void OnEdit_ActionEvent(SceneDataPackets dataPackets)
            {
                if (AppDatabaseManager.Instance != null)
                {
                    if (SelectableManager.Instance != null)
                    {
                        if (SelectableManager.Instance.GetFocusedSelectionDataCount() == 1)
                        {
                            SelectableManager.Instance.GetFocusedSelectionData(selectionDataCallback =>
                            {
                                if (selectionDataCallback.Success())
                                {
                                    var selectionInfo = selectionDataCallback.data.selections.FirstOrDefault(info => info.selectionInfoType == FocusedSelectionType.SelectedItem);

                                    if (selectionInfo != null)
                                    {
                                        var selection = AppDatabaseManager.Instance.GetRefreshData().screenContainer.GetWidgetNamed(selectionInfo.name);

                                        if (selection != null)
                                        {
                                            if (selection.GetSelectableWidgetType() != SelectableWidgetType.PlaceHolder)
                                            {

                                                switch (selection.GetSelectableWidgetType())
                                                {
                                                    case SelectableWidgetType.Asset:

                                                        if (Application.platform == RuntimePlatform.Android)
                                                        {
                                                            if (AssetImportContentManager.Instance != null)
                                                            {
                                                                if (AssetImportContentManager.Instance.IsStoragePermissionsGranted())
                                                                {
                                                                    Debug.Log($"RG_Unity : UserRequestedAppPermissions Called From Unity - Permission Granted");

                                                                    if (ScreenUIManager.Instance != null)
                                                                        ScreenUIManager.Instance.ShowNewAssetScreen(dataPackets);
                                                                    else
                                                                        LogWarning("Screen Manager Missing.", this);

                                                                    if (AppDatabaseManager.Instance)
                                                                        AppDatabaseManager.Instance.SetCurrentSceneMode(dataPackets.sceneMode);
                                                                    else
                                                                        LogWarning("Scene Assets Not Yet Initialized.", this);
                                                                }
                                                                else
                                                                {
                                                                    //ShowWidget(dataPackets);
                                                                    AssetImportContentManager.Instance.SetRequestedPermissionData(dataPackets);
                                                                }
                                                            }
                                                            else
                                                                LogWarning("Asset Import Content Manager Not Yet Initialized.", this);
                                                        }
                                                        else
                                                        {
                                                            if (ScreenUIManager.Instance != null)
                                                                ScreenUIManager.Instance.ShowNewAssetScreen(dataPackets);
                                                            else
                                                                LogWarning("Screen Manager Missing.", this);

                                                            if (AppDatabaseManager.Instance)
                                                                AppDatabaseManager.Instance.SetCurrentSceneMode(dataPackets.sceneMode);
                                                            else
                                                                LogWarning("Scene Assets Not Yet Initialized.", this);
                                                        }

                                                        break;

                                                    case SelectableWidgetType.Folder:

                                                        LogInfo($"=========================> Show Edit Panel Over : {selectionInfo.name} Folder.");

                                                        break;
                                                }
                                            }
                                            else
                                                LogWarning($"Selection : {selectionInfo.name} Widget Is Set As Place Holder.", this);
                                        }
                                        else
                                            LogError($"Selection : {selectionInfo.name} Widget Not Found.", this);
                                    }
                                    else
                                        LogError("Couldn't Edit File. No Selection Found.", this);
                                }
                                else
                                    Log(selectionDataCallback.resultCode, selectionDataCallback.result, this);
                            });
                        }
                        else
                            LogWarning($"Edit Is Not Supported For Multiple Selection. There's Currently : {SelectableManager.Instance.GetFocusedSelectionDataCount()} Items Selected.", this);
                    }
                    else
                        LogError("Selectable Manager Instance Is Not Yet Initialized.", this);
                }
                else
                    LogError("Scene Assets Manager Instance Is Not Yet Initialized.", this);
            }

            void OnHelp_ActionEvent(WidgetType widgetType, SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    var widget = ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.UserHelpScreenWidget).GetComponent<UserHelpInfoScreenWidget>();

                    if (widget != null)
                    {
                        UserHelpManager.Instance.GetTutorialView(widgetType, tutorialFoundCallback =>
                        {
                            if (tutorialFoundCallback.Success())
                            {
                                widget.SetTutorialView(tutorialFoundCallback.data);
                                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                            }
                            else
                                Log(tutorialFoundCallback.resultCode, tutorialFoundCallback.result, this);
                        });
                    }
                    else
                        LogError($"Widget Of Type : {dataPackets.widgetType} Missing / Not Found.", this);
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnCaptureSnapShot_ActionEvent(dataPackets));
            }

            void OnInfo_ActionEvent(SceneDataPackets dataPackets)
            {
                if (ScreenUIManager.Instance != null)
                {
                    ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                }
                else
                    LogWarning("Asset Export Failed : Screen UI Manager Instance Is Not Yet Initialized.", this, () => OnCaptureSnapShot_ActionEvent(dataPackets));
            }

            async void OnGoToSelectedScreen_ActionEvents(SceneDataPackets dataPackets)
            {
                var screenManagerCallbackResults = Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, $"Screen UI Manager Instance Is Not Yet Initialized.");

                if (screenManagerCallbackResults.Success())
                {
                    //AppData.SceneDataPackets dataPackets = new AppData.SceneDataPackets
                    //{
                    //    screenType = AppData.UIScreenType.LandingPageScreen,
                    //    widgetType = AppData.WidgetType.SignInWidget,
                    //    blurScreen = true,
                    //    blurContainerLayerType = AppData.ScreenBlurContainerLayerType.Background
                    //};

                    //screenManagerCallbackResults.data.

                    //await screenManagerCallbackResults.data.GoToSelectedScreenAsync(dataPackets, screenLoadedCallbackResults => 
                    //{
                    //    Log(screenLoadedCallbackResults.resultCode, screenLoadedCallbackResults.result, this); ;
                    //});
                }
                else
                    Log(screenManagerCallbackResults.resultCode, screenManagerCallbackResults.result, this);
            }

            void OnOpenProfile_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(ScreenUIManager.Instance, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {

                    }
                    else
                        Log(screenManagerValidCallbackResults.resultCode, "Screen UI Manager Is Not Yet Initialized.", this);
                });
            }

            void OnOpenInbox_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(ScreenUIManager.Instance, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {

                    }
                    else
                        Log(screenManagerValidCallbackResults.resultCode, "Screen UI Manager Is Not Yet Initialized.", this);
                });
            }

            void OnOpenSettings_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(ScreenUIManager.Instance, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {

                    }
                    else
                        Log(screenManagerValidCallbackResults.resultCode, "Screen UI Manager Is Not Yet Initialized.", this);
                });
            }

            void OnSignUp_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(ScreenUIManager.Instance, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {

                    }
                    else
                        Log(screenManagerValidCallbackResults.resultCode, "Screen UI Manager Is Not Yet Initialized.", this);
                });
            }

            void OnSignIn_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetComponent(ScreenUIManager.Instance, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {

                    }
                    else
                        Log(screenManagerValidCallbackResults.resultCode, "Screen UI Manager Is Not Yet Initialized.", this);
                });
            }

            void OnSkipSignIn_ActionEvents(SceneDataPackets dataPackets)
            {
                Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, screenManagerValidCallbackResults =>
                {
                    if (screenManagerValidCallbackResults.Success())
                    {
                        if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
                        else
                            LogWarning("Failed To Close Pop Up Because Screen Manager Is Not Yet Initialized.", this);
                    }

                }, "Screen UI Manager Is Not Yet Initialized.");
            }

            #endregion

            #region Events

            void OnWidgetSelectionEvent()
            {
                AppDatabaseManager.Instance.GetLayoutViewType(layoutViewCallbackResults =>
                {
                    if (layoutViewCallbackResults.Success())
                    {
                        switch (layoutViewCallbackResults.data)
                        {
                            case LayoutViewType.ItemView:

                                ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.FileSelectionOptionsWidget).SetActionButtonUIImageValue(InputActionButtonType.SelectionOptionsButton, UIImageDisplayerType.InputIcon, UIImageType.ItemViewDeselectionIcon);

                                break;

                            case LayoutViewType.ListView:

                                ScreenUIManager.Instance.GetCurrentScreen().GetData().GetWidget(WidgetType.FileSelectionOptionsWidget).SetActionButtonUIImageValue(InputActionButtonType.SelectionOptionsButton, UIImageDisplayerType.InputIcon, UIImageType.ListViewDeselectionIcon);

                                break;
                        }
                    }
                    else
                        Log(layoutViewCallbackResults.resultCode, layoutViewCallbackResults.result, this);
                });
            }

            #endregion

            IEnumerator ShowWidgetAsync(SceneDataPackets dataPackets)
            {
                yield return new WaitForEndOfFrame();
                //yield return new WaitForSeconds(1.0f);
                ScreenUIManager.Instance.GetCurrentScreen().GetData().ShowWidget(dataPackets);
            }

            void UndoChanges()
            {
                if (widgetType == WidgetType.SliderValueWidget)
                {
                    //if (sliderWidget.slider != null)
                    //{
                    //    sliderWidget.slider.value = sliderWidget.defaultFieldValue;
                    //}
                    //else
                    //{
                    //    LogWarning("Slider Value Pop Up Handler Component Required.", this, () => UndoChanges());
                    //}
                }
            }

            protected CallbackData<WidgetLayoutView> GetLayoutView()
            {
                var callbackResults = new CallbackData<WidgetLayoutView>();

                var layout = widgetLayouts.Find(layout => layout.viewType == defaultLayoutType);

                callbackResults.SetResult(layout.Initialized());

                if(callbackResults.Success())
                {
                    callbackResults.result = $"Layout View : {layout.GetName()} Of Type : {GetType().GetData()} Has Been Initialized Successfully For Widget : {GetName()} Of Type : {GetType().GetData()}.";
                    callbackResults.data = layout;
                }

                return callbackResults;
            }

            protected CallbackData<WidgetLayoutView> GetLayoutView(WidgetLayoutViewType viewType)
            {
                var callbackResults = new CallbackData<WidgetLayoutView>();

                var layout = widgetLayouts.Find(layout => layout.viewType == viewType);

                callbackResults.SetResult(layout.Initialized());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Layout View : {layout.GetName()} Of Type : {GetType().GetData()} Has Been Initialized Successfully For Widget : {GetName()} Of Type : {GetType().GetData()}.";
                    callbackResults.data = layout;
                }
                else
                {
                    callbackResults.result = $"Failed To Find Layout View Of Type : {viewType} For Widget : {GetName()} Of Type : {GetType().GetData()} - With Results : {callbackResults.GetResult}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public void OnScrollerValueChangedEvent(Vector2 value) => OnScrollerValueChanged(value);

            public void SetOnInputValueChanged(string value, InputFieldDataPackets dataPackets) => OnInputFieldValueChanged(value, dataPackets);

            public void SetOnInputValueChanged(int value, InputFieldDataPackets dataPackets) => OnInputFieldValueChanged(value, dataPackets);

            public void SetOnCheckboxValueChanged(CheckboxInputActionType actionType, bool value, CheckboxDataPackets dataPackets) => OnCheckboxValueChanged(actionType, value, dataPackets);

            public void ShowScreenWidget(SceneDataPackets dataPackets, Action<Callback> callback = null, bool ignoreScreenData = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        if (dataPackets.widgetType == GetType().GetData())
                        {
                            if (subscribeToActionEvents)
                            {
                                SubscribeToEvents(callback: subscriptionCallbackResults =>
                                {
                                    if (subscriptionCallbackResults.UnSuccessful())
                                        Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                                });
                            }

                            OnScreenWidget();
                        }
                        else
                        {
                            callbackResults.result = $"Failed to Show Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Screen Widget Type Doesn't Match Requested Widget Type : {dataPackets.widgetType} - Invalid Operation - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
            }

            public void ShowScreenWidget(WidgetType widgetType, Action<Callback> callback = null, bool ignoreScreenData = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        if (widgetType == GetType().GetData())
                        {
                            if (subscribeToActionEvents)
                            {
                                SubscribeToEvents(callback: subscriptionCallbackResults =>
                                {
                                    if (subscriptionCallbackResults.UnSuccessful())
                                        Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                                });
                            }

                            OnScreenWidget();
                        }
                        else
                        {
                            callbackResults.result = $"Failed to Show Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Screen Widget Type Doesn't Match Requested Widget Type : {widgetType} - Invalid Operation - Please Check Here.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
            }

            protected void ShowSelectedLayout(WidgetLayoutViewType layoutViewType, bool hideAll = true)
            {
                if (hideAll)
                {
                    if (widgetLayouts.Count > 0)
                    {
                        foreach (var layout in widgetLayouts)
                        {
                            if (layout.viewType == layoutViewType)
                                layout.ShowLayout();
                            else
                                layout.HideLayout();
                        }
                    }
                    else
                        LogWarning("Show Selected Layout Failed - Widget Layouts Missing / Not Assigned In The Inspector.", this, () => ShowSelectedLayout(layoutViewType, hideAll = true));
                }
                else
                {
                    WidgetLayoutView layoutView = widgetLayouts.Find(widget => widget.viewType == layoutViewType);

                    if (layoutView.layout)
                        layoutView.ShowLayout();
                }
            }

            protected void HideSelectedLayout(WidgetLayoutViewType layoutViewType, bool hideAll = true)
            {
                if (hideAll)
                {
                    if (widgetLayouts.Count > 0)
                    {
                        foreach (var layout in widgetLayouts)
                            layout.HideLayout();
                    }
                    else
                        LogWarning("Show Selected Layout Failed - Widget Layouts Missing / Not Assigned In The Inspector.", this, () => HideSelectedLayout(layoutViewType, hideAll = true));
                }
                else
                {
                    WidgetLayoutView layoutView = widgetLayouts.Find(widget => widget.viewType == layoutViewType);

                    if (layoutView.layout)
                        layoutView.HideLayout();
                }
            }

            protected void ShowWidget(TransitionType transitionType, SceneDataPackets dataPackets, Action<Callback> callback = null, bool ignoreScreenData = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        if (transitionType == GetTransitionType().GetData())
                        {
                            switch (transitionType)
                            {
                                case TransitionType.Default:

                                    if (dataPackets.widgetScreenPosition != Vector2.zero)
                                        if (widgetRect != null)
                                            widgetRect.anchoredPosition = dataPackets.widgetScreenPosition;
                                        else
                                            LogWarning("Screen Rect Is Null.", this, () => ShowWidget(transitionType, dataPackets));

                                    OnShowScreenWidget(dataPackets);
                                    OnEnabled();

                                    break;

                                case TransitionType.Translate:

                                    onWidgetTransition = true;
                                    showWidget = true;

                                    break;
                            }

                            if (subscribeToActionEvents)
                            {
                                SubscribeToEvents(callback: subscriptionCallbackResults =>
                                {
                                    if (subscriptionCallbackResults.UnSuccessful())
                                        Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                                });
                            }

                            OnScreenWidget();
                        }
                    }
                }

                callback?.Invoke(callbackResults);
            }

            protected void ShowWidget(Widget widget, Action<Callback> callback = null, bool ignoreScreenData = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        switch (GetTransitionType().GetData())
                        {
                            case TransitionType.Default:

                                //if (widget != null)
                                //{

                                //    widget.SetWidgetAnchoredPosition(widget.GetDataPackets().GetData().widgetScreenPosition);
                                //}

                                //OnShowScreenWidget(widget.GetDataPackets().GetData());
                                OnEnabled();

                                break;

                            case TransitionType.Translate:

                                onWidgetTransition = true;
                                showWidget = true;

                                break;
                        }

                        if (subscribeToActionEvents)
                        {
                            SubscribeToEvents(callback: subscriptionCallbackResults =>
                            {
                                if (subscriptionCallbackResults.UnSuccessful())
                                    Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                            });
                        }

                        OnScreenWidget();
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            protected void ShowWidget(WidgetType widgetType, Action<Callback> callback = null, bool ignoreScreenData = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        switch (GetTransitionType().GetData())
                        {
                            case TransitionType.Default:

                                //if (widgetType != null)
                                //{

                                //    widgetType.SetWidgetAnchoredPosition(widgetType.GetDataPackets().GetData().widgetScreenPosition);
                                //}

                                //OnShowScreenWidget(widgetType.GetDataPackets().GetData());
                                OnEnabled();

                                break;

                            case TransitionType.Translate:

                                onWidgetTransition = true;
                                showWidget = true;

                                break;
                        }

                        if (subscribeToActionEvents)
                        {
                            SubscribeToEvents(callback: subscriptionCallbackResults =>
                            {
                                if (subscriptionCallbackResults.UnSuccessful())
                                    Log(subscriptionCallbackResults.GetResultCode, subscriptionCallbackResults.GetResult, this);
                            });
                        }

                        OnScreenWidget();
                    }
                    else
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                }
                else
                    Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                callback?.Invoke(callbackResults);
            }

            #region Async Functions

            IEnumerator GoToItemPageAsync(string widgetName)
            {
                yield return new WaitForEndOfFrame();

                int widgetPageIndex = AppDatabaseManager.Instance.GetRefreshData().screenContainer.Pagination_GetItemPageIndex(widgetName);
                AppDatabaseManager.Instance.GetRefreshData().screenContainer.Pagination_GoToPage(widgetPageIndex);
            }

            IEnumerator SctollToItemAsync(string widgetName)
            {
                yield return new WaitForEndOfFrame();

                UIScreenWidget widget = AppDatabaseManager.Instance.GetRefreshData().screenContainer.GetWidgetNamed(widgetName);

                if (widget != null)
                    AppDatabaseManager.Instance.GetRefreshData().screenContainer.OnFocusToWidget(widget, true);
                else
                    LogWarning("Widget Is Null.", this, () => SctollToItemAsync(widgetName));
            }

            #endregion

            #region Widget States

            protected void SetStateType(WidgetStateType widgetStateType) => GetStatePacket().SetStateType(widgetStateType);

            #endregion

            #region Overrides

            protected abstract void OnActionButtonEvent(WidgetType popUpType, InputActionButtonType actionType, SceneDataPackets dataPackets);
            protected abstract void OnActionDropdownValueChanged(int value, DropdownDataPackets dataPackets);
            protected abstract void OnScrollerValueChanged(Vector2 value);
            protected abstract void OnInputFieldValueChanged(string value, InputFieldDataPackets dataPackets);
            protected abstract void OnInputFieldValueChanged(int value, InputFieldDataPackets dataPackets);
            protected abstract void OnCheckboxValueChanged(CheckboxInputActionType actionType, bool value, CheckboxDataPackets dataPackets);

            protected abstract void ScrollerPosition(Vector2 position);

            protected abstract void OnScreenWidget();
            protected abstract void OnShowScreenWidget(SceneDataPackets dataPackets);
            protected abstract void OnHideScreenWidget();

            #endregion

            public void HideWidget(Action<Callback> callback = null, bool onInitialization = false)
            {
                var callbackResults = new Callback(WidgetReady(ignoreScreenData: onInitialization));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        switch (GetTransitionType().GetData())
                        {
                            case TransitionType.Default:

                                OnHideScreenWidget();
                                OnDisabled();

                                callbackResults.result = "Widget Hidden.";
                                callbackResults.resultCode = Helpers.SuccessCode;

                                break;

                            case TransitionType.Translate:

                                if (widgetRect)
                                {
                                    onWidgetTransition = true;
                                    showWidget = false;

                                    if (onWidgetTransition == false)
                                    {
                                        callbackResults.result = "Widget Hidden.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = "Widget Not Hidden.";
                                        callbackResults.resultCode = Helpers.WarningCode;
                                    }
                                }

                                break;
                        }

                        if (callbackResults.Success())
                        {
                            if (subscribeToActionEvents)
                            {
                                callbackResults.SetResult(SubscribedToEvents());

                                if (callbackResults.Success())
                                {
                                    UnSubscribeFromEvents(callback: subscriptionCallbackResults =>
                                    {
                                        callbackResults.SetResult(subscriptionCallbackResults);

                                        if (callbackResults.UnSuccessful())
                                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                    });
                                }
                                else
                                {
                                    if (onInitialization)
                                    {
                                        callbackResults.result = $"Action Events Are Not Subcribed Yet On Initialization For Widget : {GetName()} - Of Type : {GetType().GetData()}.";
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = $"Action Events For Screen : {GetName()}- Of Type : {GetType().GetData()} - Failed On Initialization With Results : {callbackResults.GetResult}";
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                }
                            }
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public async Task<Callback> HideAsync(bool ignoreScreenData = false)
            {
                Callback callbackResults = new Callback(WidgetReady(ignoreScreenData: ignoreScreenData));

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(GetTransitionType());

                    if (callbackResults.Success())
                    {
                        switch (GetTransitionType().GetData())
                        {
                            case TransitionType.Default:

                                OnHideScreenWidget();
                                OnDisabled();

                                callbackResults.result = "Widget Hidden.";
                                callbackResults.resultCode = Helpers.SuccessCode;

                                break;

                            case TransitionType.Translate:

                                onWidgetTransition = true;
                                showWidget = false;

                                if (onWidgetTransition == false)
                                {
                                    callbackResults.result = "Widget Hidden.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = "Widget Not Hidden.";
                                    callbackResults.resultCode = Helpers.WarningCode;
                                }

                                while (onWidgetTransition)
                                    await Task.Yield();

                                widgetRect.anchoredPosition = widgetContainer.hiddenScreenPoint.anchoredPosition;

                                break;
                        }

                        if (callbackResults.Success())
                        {
                            if (subscribeToActionEvents)
                            {
                                UnSubscribeFromEvents(callback: subscriptionCallbackResults =>
                                {
                                    callbackResults.SetResult(subscriptionCallbackResults);

                                    if (callbackResults.UnSuccessful())
                                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                                });
                            }
                        }
                        else
                            Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                    }
                }

                return callbackResults;
            }

            void OnWidgetTransition()
            {
                if (onWidgetTransition)
                {
                    if (showWidget)
                    {
                        if (widgetRect)
                        {
                            if (!isTransitionState)
                                isTransitionState = true;

                            if (widgetContainer.hiddenScreenPoint != null && widgetContainer.visibleScreenPoint != null)
                            {
                                if (AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScreenWidgetTransitionalSpeed).value > 0)
                                {
                                    Vector2 screenPoint = widgetRect.anchoredPosition;

                                    screenPoint = Vector2.Lerp(screenPoint, widgetContainer.visibleScreenPoint.anchoredPosition, AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScreenWidgetTransitionalSpeed).value * Time.smoothDeltaTime);
                                    widgetRect.anchoredPosition = screenPoint;

                                    float distance = (widgetRect.anchoredPosition - widgetContainer.visibleScreenPoint.anchoredPosition).sqrMagnitude;

                                    if (distance <= 0.1f)
                                    {
                                        onWidgetTransition = false;
                                        isTransitionState = false;

                                        OnSetWidgetShowingState(true);
                                    }
                                }
                                else
                                    LogWarning($"Scene Assets Manager Instance Get Default Execution Times Is Not Set - Currently {AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScreenWidgetTransitionalSpeed).value}.", this, () => OnWidgetTransition());

                            }
                            else
                                LogWarning($"Widget Container Hidden Screen Point | Widget Container visible Screen Point Is Null / Not Assigned In The Editor For Game Object : {gameObject.name}.", this, () => OnWidgetTransition());
                        }
                        else
                            LogWarning("Widget Rect Is Null.", this, () => OnWidgetTransition());

                    }
                    else
                    {
                        if (widgetRect)
                        {
                            if (!isTransitionState)
                                isTransitionState = true;

                            if (widgetContainer.hiddenScreenPoint != null && widgetContainer.visibleScreenPoint != null)
                            {
                                Vector2 screenPoint = widgetRect.anchoredPosition;
                                screenPoint = Vector2.Lerp(screenPoint, widgetContainer.hiddenScreenPoint.anchoredPosition, AppDatabaseManager.Instance.GetDefaultExecutionValue(RuntimeExecution.ScreenWidgetTransitionalSpeed).value * Time.smoothDeltaTime);

                                widgetRect.anchoredPosition = screenPoint;

                                float distance = (widgetRect.anchoredPosition - widgetContainer.hiddenScreenPoint.anchoredPosition).sqrMagnitude;

                                if (distance <= 0.1f)
                                {
                                    onWidgetTransition = false;
                                    isTransitionState = false;

                                    OnSetWidgetShowingState(false);
                                }
                            }
                            else
                                LogWarning("Widget Container Hidden Screen Point | Widget Container Visible Screen Point Is Null / Not Assigned In The Editor.", this, () => OnWidgetTransition());
                        }
                        else
                            LogWarning("Widget Rect Is Null.", this, () => OnWidgetTransition());
                    }
                }
                else
                    return;
            }

            void OnSetWidgetShowingState(bool visible) => isWidgetVisible = visible;

            public bool GetWidgetShowing()
            {
                return isWidgetVisible;
            }

            public void SetAlwaysShowWidget(bool state)
            {
                dontShowAgain = state;
                dontShowAgainToggleField.isOn = state;

                if (AppDatabaseManager.Instance != null)
                {
                    var updatedCurrentAsset = AppDatabaseManager.Instance.GetCurrentSceneAsset();
                    updatedCurrentAsset.dontShowMetadataWidget = state;
                    AppDatabaseManager.Instance.SetCurrentSceneAsset(updatedCurrentAsset);
                }
            }

            public bool GetAlwaysShowWidget()
            {
                return dontShowAgain;
            }

            public bool IsTransitionState()
            {
                return isTransitionState;
            }

            #region UI States

            #region Widget Positions

            public void SetWidgetPosition(Vector3 position) => widgetRect.position = position;

            public void SetWidgetLocalPosition(Vector3 position) => widgetRect.localPosition = position;

            public void SetWidgetAnchoredPosition(Vector2 position) => widgetRect.anchoredPosition = position;

            #endregion

            #region Widget Screen Dimensions

            public void SetWidgetSizeDelta(Vector2 sizeDelta) => widgetRect.sizeDelta = sizeDelta;

            public void SetWidgetSizeDelta(int width, int height)
            {
                Vector2 sizeDelta = new Vector2(width, height);
                widgetRect.sizeDelta = sizeDelta;
            }

            public void SetWidgetSizeDelta(UIScreenDimensions dimensions)
            {
                Vector2 sizeDelta = new Vector2(dimensions.width, dimensions.height);
                widgetRect.sizeDelta = sizeDelta;
            }

            public void SetWidgetLocalScale(Vector3 scale) => widgetRect.localScale = scale;

            #endregion

            #region Scroller 

            public void ResetScrollPosition(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (scroller.resetScrollerPositionOnHide)
                    scroller.ResetPosition(resetCallback => { callbackResults = resetCallback; });
                else
                {
                    callbackResults.result = "Reset Scroller Disabled.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Content Type

            protected SelectableWidgetType GetSelectableAssetType()
            {
                return selectableAssetType;
            }

            #region Widget States

            WidgetType GetWidgetType() => widgetType;

            public new CallbackData<WidgetType> GetType()
            {
                CallbackData<WidgetType> callbackResults = new CallbackData<WidgetType>();

                if (GetWidgetType() != WidgetType.None)
                {
                    callbackResults.result = $"Widget : {GetName()} Type Is Set To : {GetWidgetType()}";
                    callbackResults.data = GetWidgetType();
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Widget : {GetName()} Type Is Set To Default : {GetWidgetType()}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            public Callback Initialized()
            {
                Callback callbackResults = new Callback(GetState());

                if(callbackResults.Success())
                {
                    callbackResults.SetResult(GetState().GetData().GetStateType());

                    if (callbackResults.Success())
                    {
                        var stateType = GetState().GetData().GetStateType().GetData();
                        bool initializedState = stateType != WidgetStateType.NotInitialized && (stateType == WidgetStateType.Initialized || stateType == WidgetStateType.InitializedAndActive || stateType == WidgetStateType.InitializedAndInActive);

                        if (initializedState)
                        {
                            callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType()} Has Been Initialized Successfully With State : {stateType}.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType()} Is Not Yet Initialized.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }

                return callbackResults;
            }

            public Callback WidgetReady(SceneDataPackets dataPackets = null, bool ignoreScreenData = false)
            {
                Callback callbackResults = new Callback(Initialized());

                if (callbackResults.Success())
                {
                    callbackResults.SetResult(Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name, "Screen UI Manager Instance Is Not Yet Initialized"));

                    if (callbackResults.Success())
                    {
                        var screenUIManager = Helpers.GetAppComponentValid(ScreenUIManager.Instance, ScreenUIManager.Instance.name).GetData();

                        callbackResults.SetResult(GetType());

                        if (callbackResults.Success())
                        {
                            var selectedWidgetType = (dataPackets != null)? dataPackets.widgetType : GetType().GetData();

                            if(ignoreScreenData)
                            {
                                if (selectedWidgetType == GetType().GetData())
                                {
                                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} Is Ready.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} Couldn't Be Initialized - Requested Widget Type : {selectedWidgetType} Doesn't Match Current Widget Type : {GetType().GetData()} - Invalid Operation - Please Check Here.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                            else
                            {
                                if (selectedWidgetType == GetType().GetData() && GetScreenType().GetData() == screenUIManager.GetCurrentScreenType().GetData())
                                {
                                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} Is Ready.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} For Screen Type : {screenType} Can not Be Interacted From Screen : {screenUIManager.GetCurrentScreenType()} - Invalid Operation.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }
                        }
                    }
                }

                return callbackResults;
            }

            public CallbackData<ScreenType> GetScreenType()
            {
                var callbackResults = new CallbackData<ScreenType>(GetType());

                if (callbackResults.Success())
                {
                    if (screenType != ScreenType.None)
                    {
                        callbackResults.result = $"Screen Type For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Successfully Set To : {screenType}.";
                        callbackResults.data = screenType;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Screen Type For Screen Widget : {GetName()} - Of Type : {GetType().GetData()} - Is Set To Default : {screenType} - Invalid Operation - Please Assign Screent Type Value.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }

                return callbackResults;
            }

            public CallbackData<bool> GetBlurScreenState()
            {
                var callbackResults = new CallbackData<bool>(GetType());

                if(callbackResults.Success())
                {
                    callbackResults.data = blurScreen;

                    if (blurScreen)
                        callbackResults.result = $"Widget : {GetName()} - Of Type : {GetType().GetData()} - Has Screen Blur Enabled.";
                    else
                        callbackResults.result = $"Screen Blur Is Not Enabled For Widget : {GetName()} - Of Type : {GetType().GetData()}.";
                }

                return callbackResults;
            }

            #endregion

            #endregion

            #endregion
        }

        [Serializable]
        public abstract class SettingsWidget : AppMonoBaseClass, ISettingsWidget
        {
            #region Components

            [Header("Widget Info")]
            [Space(5)]
            [SerializeField]
            protected GameObject value = null;

            [Space(5)]
            [SerializeField]
            protected SettingsWidgetType widgetType;

            [Space(5)]
            [SerializeField]
            protected SceneDataPackets dataPackets;

            [Space(5)]
            [SerializeField]
            protected bool initialVisiblityState;

            [Space(5)]
            [SerializeField]
            protected bool isChildWidget;

            [Space(5)]
            [SerializeField]
            protected bool includeChildWidgets;

            [Space(5)]
            [SerializeField]
            protected List<SettingsWidget> subWidgetsList = new List<SettingsWidget>();

            [Space(10)]
            [Header("Button")]

            [Space(5)]
            [SerializeField]
            protected List<UIButton<ButtonDataPackets>> actionButtonList = new List<UIButton<ButtonDataPackets>>();

            [SerializeField]
            protected bool initializeActionButtonList = false;

            [Space(10)]
            [Header("Input Field")]

            [Space(5)]
            [SerializeField]
            protected List<UIInputField<InputFieldDataPackets>> actionInputFieldList = new List<UIInputField<InputFieldDataPackets>>();

            [SerializeField]
            protected bool initializeActionInputFieldList = false;

            [Space(10)]
            [Header("Slider")]

            [Space(5)]
            [SerializeField]
            protected List<UISlider<SliderDataPackets>> actionSliderList = new List<UISlider<SliderDataPackets>>();

            [SerializeField]
            protected bool initializeActionSliderList = false;

            [Space(10)]
            [Header("Input Slider")]

            [Space(5)]
            [SerializeField]
            protected List<UIInputSlider<InputSliderDataPackets>> actionInputSliderList = new List<UIInputSlider<InputSliderDataPackets>>();

            [SerializeField]
            protected bool initializeActionInputSliderList = false;

            [Space(10)]
            [Header("Dropdown")]

            [Space(5)]
            [SerializeField]
            protected List<UIDropDown<DropdownDataPackets>> actionDropdownList = new List<UIDropDown<DropdownDataPackets>>();

            [SerializeField]
            protected bool initializeActionDropDownList = false;

            [Space(10)]
            [Header("Checkbox")]

            [Space(5)]
            [SerializeField]
            protected List<UICheckbox<CheckboxDataPackets>> actionCheckboxList = new List<UICheckbox<CheckboxDataPackets>>();

            [SerializeField]
            protected bool initializeActionCheckboxList = false;

            [Space(10)]
            [Header("Text")]

            [Space(5)]
            [SerializeField]
            protected List<UIText<TextDataPackets>> screenUITextList = new List<UIText<TextDataPackets>>();

            [SerializeField]
            protected bool initializeUITextList = false;

            [Space(10)]
            [Header("Settings Screen Widgets")]

            [Space(5)]
            [SerializeField]
            public List<SettingsDataWidget<SettingsDataPackets>> settingsDataScreenWidgetsList = new List<SettingsDataWidget<SettingsDataPackets>>();

            [SerializeField]
            protected bool initializeSettingsDataScreenWidgetsList = false;

            [Space(10)]
            [Header("Setting Storage Directory Data")]

            [Space(5)]
            [SerializeField]
            protected StorageDirectoryData storageDirectoryData = new StorageDirectoryData();

            [SerializeField]
            protected SettingsWidget parentWidget;

            protected SwatchData swatchData = new SwatchData();

            #endregion

            #region Unity Callbacks

            #region Unity Callbacks

            void OnEnable()
            {
                if (ScreenUIManager.Instance != null)
                {
                    if (GetActive())
                    {
                        //RegisterEventListensers(true);
                        //OnWidgetOpened();
                    }
                    else
                        return;
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized", this, () => OnEnable());
            }

            protected bool GetActive()
            {
                bool isActive = false;

                if (ScreenUIManager.Instance)
                {
                    if (ScreenUIManager.Instance?.GetCurrentScreen()?.Success() != null)
                    {
                        if (ScreenUIManager.Instance?.GetCurrentScreen()?.GetData().GetType().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData())
                            if (this && gameObject)
                                isActive = gameObject.activeSelf && gameObject.activeInHierarchy;
                    }
                    else
                        LogWarning("Get Current Screen Data Value Is Missing / Null.", this, () => GetActive());
                }
                else
                    LogError("Is Not Yet Initialized.", this, () => GetActive());

                return isActive;
            }

            void OnDisable()
            {
                RegisterEventListensers(false);
                OnWidgetClosed();
            }

            void Start() => Initialize();

            #endregion

            #endregion

            #region Main

            protected void Initialize()
            {
                if (ScreenUIManager.Instance)
                {
                    if (GetActive())
                    {
                        #region Action List Initialization

                        #region Action Button List

                        if (initializeActionButtonList)
                            OnActionButtonInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var button in actionButtonList)
                                        button.value.onClick.AddListener(() => OnActionButtonClickedEvent(button.dataPackets));
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #region Action Input Field List

                        if (initializeActionInputFieldList)
                            OnActionInputFieldInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var inputField in actionInputFieldList)
                                    {
                                        inputField.Initialize();
                                        inputField.value.onValueChanged.AddListener((value) => OnActionInputFieldValueChangedEvent(value, inputField.dataPackets));
                                    }
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #region Action Slider List

                        if (initializeActionSliderList)
                            OnActionSliderInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var slider in actionSliderList)
                                    {
                                        slider.Initialize();
                                        slider.value.onValueChanged.AddListener((value) => OnActionSliderValueChangedEvent(value, slider.dataPackets));
                                    }
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #region Action Input Slider List

                        if (initializeActionInputSliderList)
                            OnActionInputSliderInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var inputSlider in actionInputSliderList)
                                    {
                                        inputSlider.Initialize();
                                        inputSlider.slider.onValueChanged.AddListener((value) => OnInputSliderValueChangedEvent(value, inputSlider.dataPackets));
                                        inputSlider.inputField.onValueChanged.AddListener((value) => OnInputSliderValueChangedEvent(value, inputSlider.dataPackets));
                                    }
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #region Action Checkbox List

                        if (initializeActionCheckboxList)
                            OnActionChecboxInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var checkbox in actionCheckboxList)
                                    {
                                        checkbox.Initialize();
                                        checkbox.value.onValueChanged.AddListener((value) => OnActionCheckboxValueChangedEvent(value, checkbox.dataPackets));
                                    }
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #region Screen Widgets List

                        if (initializeSettingsDataScreenWidgetsList)
                            OnSettingsWidgetInitialized((callbackResults) =>
                            {
                                if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                    foreach (var widget in settingsDataScreenWidgetsList)
                                        widget.Initialize();
                                else
                                    LogWarning(callbackResults.result, this, () => Initialize());
                            });

                        #endregion

                        #endregion

                        if (includeChildWidgets)
                        {
                            OnSettingsSubWidgetsInitialized((subWidgetsCallbackResults) =>
                            {
                                if (!Helpers.IsSuccessCode(subWidgetsCallbackResults.resultCode))
                                    LogWarning(subWidgetsCallbackResults.result, this, () => Initialize());
                            });
                        }

                        if (initialVisiblityState)
                            ShowWidget();
                        else
                            HideWidget();

                        if (isChildWidget)
                        {
                            if (gameObject.GetComponentInParent<SettingsWidget>())
                                parentWidget = gameObject.GetComponentInParent<SettingsWidget>();
                            else
                                LogWarning("Parent Doesn't Contain A Setiings Widget Component.", this, () => Initialize());
                        }

                        Init();
                    }
                }
                else
                    LogError("Screen UI Manager Instance Is Not Yet Initialized.", this, () => Initialize());
            }

            protected void ShowWidgetOnDropDownSelection(SettingsWidgetTabID widgetTabID, InputDropDownActionType actionType)
            {
                OnSettingsWidgetInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                    {
                        foreach (var widgetScreen in settingsDataScreenWidgetsList)
                            if (widgetScreen.dataPackets.widgetTabID == widgetTabID)
                                widgetScreen.Show();
                            else
                                widgetScreen.Hide();
                    }
                    else
                        LogWarning(callbackResults.result, this, () => Initialize());
                });
            }

            public void SetActionButtonState(InputActionButtonType buttonType, InputUIState buttonState)
            {
                foreach (var actionButton in actionButtonList)
                    if (actionButton.value)
                    {
                        if (actionButton.dataPackets.action == buttonType)
                        {
                            actionButton.SetUIInputState(buttonState);
                            break;
                        }
                        else
                            continue;
                    }
                    else
                        LogWarning($"Action Button : {actionButton.dataPackets.action} Not Found", this, () => SetActionButtonState(buttonType, buttonState));
            }

            protected void SetActionDropdownState(InputDropDownActionType dropdownType, InputUIState dropdownState)
            {
                foreach (var dropdown in actionDropdownList)
                    if (dropdown.value)
                    {
                        if (dropdown.dataPackets.action == dropdownType)
                        {
                            dropdown.SetUIInputState(dropdownState);
                            break;
                        }
                        else
                            continue;
                    }
                    else
                        LogError($"Action Dropdown : {dropdown.dataPackets.action} Not Found", this, () => SetActionDropdownState(dropdownType, dropdownState));
            }

            protected void SetActionButtons(InputUIState buttonState)
            {
                OnActionButtonInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                        foreach (var actionButton in actionButtonList)
                        {
                            if (actionButton.value)
                                actionButton.SetUIInputState(buttonState);
                            else
                                LogError("Action Button Value Missing", this, () => SetActionButtons(buttonState));
                        }
                    else
                        LogError(callbackResults.result, this, () => SetActionButtons(buttonState));
                });
            }

            protected void SetAcionInputFieldValue(InputFieldActionType actionType, string value)
            {
                OnActionInputFieldInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                    {
                        UIInputField<InputFieldDataPackets> inputField = actionInputFieldList.Find((x) => x.dataPackets.action == actionType);

                        if (inputField.value)
                        {
                            inputField.value.text = value;
                        }
                        else
                            LogError($"Input Field : {actionType} Value Is Not Found / Null.", this, () => SetAcionInputFieldValue(actionType, value));
                    }
                    else
                        LogError(callbackResults.result, this, () => SetAcionInputFieldValue(actionType, value));
                });
            }

            protected void SetAcionInputSliderValue(InputSliderActionType actionType, float sliderValue, string inputValue)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                    {
                        UIInputSlider<InputSliderDataPackets> inputSlider = actionInputSliderList.Find((x) => x.dataPackets.action == actionType);

                        if (inputSlider.IsInitialized())
                        {
                            inputSlider.slider.value = sliderValue;
                            inputSlider.inputField.text = inputValue;
                        }
                        else
                            LogError($"Input Slider : {actionType} Is Not Initialized.", this, () => SetAcionInputSliderValue(actionType, sliderValue, inputValue));
                    }
                    else
                        LogWarning(callbackResults.result, this, () => SetAcionInputSliderValue(actionType, sliderValue, inputValue));
                });
            }

            protected void SetAcionInputSliderValue(InputSliderActionType actionType, float sliderValue)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                    {
                        UIInputSlider<InputSliderDataPackets> inputSlider = actionInputSliderList.Find((x) => x.dataPackets.action == actionType);

                        if (inputSlider.IsInitialized())
                            inputSlider.slider.value = sliderValue;
                        else
                            LogError($"Input Slider : {actionType} Is Not Initialized.", this, () => SetAcionInputSliderValue(actionType, sliderValue));
                    }
                    else
                        LogWarning(callbackResults.result, this, () => SetAcionInputSliderValue(actionType, sliderValue));
                });
            }

            protected void SetAcionInputSliderValue(InputSliderActionType actionType, string inputValue)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                    {
                        UIInputSlider<InputSliderDataPackets> inputSlider = actionInputSliderList.Find((x) => x.dataPackets.action == actionType);

                        if (inputSlider.IsInitialized())
                            inputSlider.inputField.text = inputValue;
                        else
                            LogError($"Input Slider : {actionType} Is Not Initialized.", this, () => SetAcionInputSliderValue(actionType, inputValue));
                    }
                    else
                        LogWarning(callbackResults.result, this, () => SetAcionInputSliderValue(actionType, inputValue));
                });
            }

            #region Initialization

            protected void OnActionButtonInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionButtonList.Count > 0)
                {
                    foreach (var button in actionButtonList)
                    {
                        if (button.value != null)
                        {
                            callbackResults.result = "ActionButtonsList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ActionButtonsList Value At Index : {actionButtonList.IndexOf(button)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ActionButtonsList Is Null For Widgets Type : {widgetType} On Game Object : {this.name}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnActionInputFieldInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionInputFieldList.Count > 0)
                {
                    foreach (var inputField in actionInputFieldList)
                    {
                        if (inputField.value != null)
                        {
                            callbackResults.result = "ActionInputFieldList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ActionInputFieldList Value At Index : {actionInputFieldList.IndexOf(inputField)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ActionInputFieldList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnActionDropdownInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionDropdownList.Count > 0)
                {
                    foreach (var dropdown in actionDropdownList)
                    {
                        if (dropdown.value != null)
                        {
                            //dropdown.Initialize(dropdown.dataPackets);
                            //dropdown._AddInputEventListener += OnInputDropdownSelectedEvent;

                            callbackResults.result = "OnActionDropdownInitialized Initialized Sucess : actionDropdownList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"OnActionDropdownInitialized Initialized Failed : actionDropdownList Value At Index : {actionDropdownList.IndexOf(dropdown)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"OnActionDropdownInitialized Initialized Failed : actionDropdownList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnInputDropdownSelectedEvent(InputDropDownActionType actionType)
            {
                foreach (var dropdown in actionDropdownList)
                    if (dropdown.dataPackets.action != actionType && dropdown.selectable)
                        dropdown.value.Hide();
            }

            protected void OnActionSliderInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionSliderList.Count > 0)
                {
                    foreach (var slider in actionSliderList)
                    {
                        if (slider.value != null)
                        {
                            callbackResults.result = "ActionSliderList Slider Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ActionSliderList Value At Index : {actionSliderList.IndexOf(slider)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ActionSliderList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnActionInputSliderInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionInputSliderList.Count > 0)
                {
                    foreach (var inputSlider in actionInputSliderList)
                    {
                        if (inputSlider.IsInitialized())
                        {
                            callbackResults.result = "ActionInputSliderList Input Slider Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ActionInputSliderList Value At Index : {actionInputSliderList.IndexOf(inputSlider)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"AcionInputSliderList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnUpdateDropdownSelection(InputDropDownActionType dropdownType, List<string> contentList, bool isUpdate = true, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionDropdownList.Count > 0)
                {
                    foreach (var dropdown in actionDropdownList)
                    {
                        if (dropdown.value != null)
                        {
                            if (dropdown.dataPackets.action == dropdownType)
                            {
                                if (contentList != null)
                                {
                                    dropdown.value.ClearOptions();
                                    dropdown.value.onValueChanged.RemoveAllListeners();

                                    List<TMP_Dropdown.OptionData> dropdownOption = new List<TMP_Dropdown.OptionData>();

                                    foreach (var content in contentList)
                                        dropdownOption.Add(new TMP_Dropdown.OptionData() { text = content });

                                    dropdown.value.AddOptions(dropdownOption);

                                    dropdown.value.onValueChanged.AddListener((value) => OnActionDropdownValueChangedEvent(contentList[value], dropdown.dataPackets));

                                    // Select Initial Content
                                    if (isUpdate)
                                        dropdown.value.value = contentList.IndexOf(contentList.FirstOrDefault());
                                    else
                                        dropdown.value.value = contentList.IndexOf(contentList.Last());

                                    callbackResults.result = $"ActionDropdownList's : {dropdown.name} Has Been Created Successfully.";
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    callbackResults.result = "Dropdown Content List Is Null.";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }

                                break;
                            }
                            else
                                continue;
                        }
                        else
                        {
                            callbackResults.result = $"ActionDropdownList Value At Index : {actionDropdownList.IndexOf(dropdown)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ActionDropdownList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnActionChecboxInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionCheckboxList.Count > 0)
                {
                    foreach (var checkbox in actionCheckboxList)
                    {
                        if (checkbox.value != null)
                        {
                            callbackResults.result = "ActionCheckboxList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ActionCheckboxList Value At Index : {actionCheckboxList.IndexOf(checkbox)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ActionCheckboxList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnScreenUITextInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (screenUITextList.Count > 0)
                {
                    foreach (var uiText in screenUITextList)
                    {
                        if (uiText.value != null)
                        {
                            callbackResults.result = "ScreenUITextList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ScreenUITextList Value At Index : {screenUITextList.IndexOf(uiText)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"ScreenUITextList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnSettingsWidgetInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (settingsDataScreenWidgetsList.Count > 0)
                {
                    foreach (var panelWidget in settingsDataScreenWidgetsList)
                    {
                        if (panelWidget.value != null)
                        {
                            callbackResults.result = "PanelWidgetsList Buttons Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"PanelWidgetsList Value At Index : {settingsDataScreenWidgetsList.IndexOf(panelWidget)} Is Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;

                            callback?.Invoke(callbackResults);
                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = $"PanelWidgetsList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void OnSettingsSubWidgetsInitialized(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (subWidgetsList.Count == 0)
                {
                    for (int i = 0; i < transform.childCount; i++)
                    {
                        if (transform.GetChild(i).GetComponent<SettingsWidget>())
                        {
                            SettingsWidget widget = transform.GetChild(i).GetComponent<SettingsWidget>();
                            subWidgetsList.Add(widget);
                        }
                        else
                            continue;
                    }

                    if (subWidgetsList != null && subWidgetsList.Count > 0)
                    {
                        callbackResults.result = $"Sub Widgets Found In Childrens.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"PanelWidgetsList Is Null.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Sub Widgets List Already Initialized.";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void SetInputFieldValue(InputFieldActionType type, string value, Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (!string.IsNullOrEmpty(value))
                {
                    if (actionInputFieldList != null && actionInputFieldList?.Count > 0)
                    {
                        UIInputField<InputFieldDataPackets> inputField = actionInputFieldList?.Find((x) => x.dataPackets.action == type);

                        if (inputField != null)
                        {
                            if (inputField?.value)
                            {
                                inputField.SetValue(value);

                                callbackResults.result = $"ActionInputFieldList Value : {value} Set For Type : {type}.";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = $"Action InputField List Value : {value} For Type : {type} Is Missing / Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"Input Field Of Type : {type} Is Missing / Not Found In Action Input Field List.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "ActionInputFieldList Is Null.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "Set Input Field Failed : Input Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            protected void UpdateInputFieldInfo(InputSliderActionType actionType, string fieldName, Color fieldColor)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                        foreach (var inputSlider in actionInputSliderList)
                        {
                            if (inputSlider.dataPackets.action == actionType)
                            {
                                inputSlider.SetTitle(fieldName);
                                inputSlider.SetUIColor(fieldColor);
                                break;
                            }
                            else
                                continue;
                        }
                    else
                        LogWarning(callbackResults.result, this, () => UpdateInputFieldInfo(actionType, fieldName, fieldColor));
                });
            }

            public void UpdateInputActionCheckbox(CheckboxInputActionType actionType, bool isSelected)
            {
                OnActionChecboxInitialized((checkboxInitializedCallbackResults) =>
                {
                    if (Helpers.IsSuccessCode(checkboxInitializedCallbackResults.resultCode))
                    {
                        foreach (var checkbox in actionCheckboxList)
                        {
                            if (checkbox.dataPackets.action == actionType)
                            {
                                if (checkbox.value != null)
                                    checkbox.SetSelectionState(isSelected);
                                else
                                    LogWarning("Checkbox Value Missing / Null.", this, () => UpdateInputActionCheckbox(actionType, isSelected));
                            }
                        }
                    }
                    else
                        LogWarning(checkboxInitializedCallbackResults.result, this, () => UpdateInputActionCheckbox(actionType, isSelected));
                });
            }

            protected void UpdateInputFieldUIInputState(InputSliderActionType actionType, InputUIState state)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                        foreach (var inputSlider in actionInputSliderList)
                        {

                            if (inputSlider.dataPackets.action == actionType)
                            {
                                inputSlider.SetUIInputState(state);
                                break;
                            }
                            else
                                continue;
                        }
                    else
                        LogWarning(callbackResults.result, this, () => UpdateInputFieldUIInputState(actionType, state));
                });
            }

            protected void SetScreenUITextValue(string value, ScreenTextType textType)
            {
                OnScreenUITextInitialized((screenTextCallbackResults) =>
                {
                    var screenText = screenUITextList.Find((x) => x.dataPackets.textType == textType);

                    if (screenText != null)
                        screenText.SetScreenUITextValue(value);
                    else
                        LogWarning($"Settings Text : {value} To ScreenText Of Type : {textType} Missing / Not Found.", this, ()  => SetScreenUITextValue(value, textType));
                });
            }

            protected void ResetInputFieldValue(InputSliderActionType actionType, float value = 0)
            {
                OnActionInputSliderInitialized((callbackResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                        foreach (var inputSlider in actionInputSliderList)
                        {

                            if (inputSlider.dataPackets.action == actionType)
                            {
                                inputSlider.SetValue(value.ToString(), value);
                                break;
                            }
                            else
                                continue;
                        }
                    else
                        LogWarning(callbackResults.result, this, () => ResetInputFieldValue(actionType, value = 0));
                });
            }

            public void ShowChildWidget(SettingsWidgetType widgetType)
            {
                OnSettingsSubWidgetsInitialized((subWidgetCallbackResults) =>
                {
                    if (Helpers.IsSuccessCode(subWidgetCallbackResults.resultCode))
                    {
                        SettingsWidget widget = subWidgetsList.Find((x) => x.widgetType == widgetType);

                        if (widget != null)
                            widget.ShowWidget();
                        else
                            LogWarning("Loaded Sub Widget Not Found / Null.", this, () => ShowChildWidget(widgetType));
                    }
                    else
                        LogWarning(subWidgetCallbackResults.result, this, () => ShowChildWidget(widgetType));
                });
            }

            public void ShowChildWidget(SettingsWidgetType widgetType, string message, ScreenTextType textType)
            {
                OnSettingsSubWidgetsInitialized((subWidgetCallbackResults) =>
                {
                    if (Helpers.IsSuccessCode(subWidgetCallbackResults.resultCode))
                    {
                        SettingsWidget widget = subWidgetsList.Find((x) => x.widgetType == widgetType);

                        if (widget != null)
                            widget.ShowWidget(message, textType);
                        else
                            LogWarning("Loaded Sub Widget Not Found / Null.", this, () => ShowChildWidget(widgetType, message, textType));
                    }
                    else
                        LogWarning(subWidgetCallbackResults.result, this, () => ShowChildWidget(widgetType, message, textType));
                });
            }

            public void HideChildWidget(SettingsWidgetType widgetType)
            {
                OnSettingsSubWidgetsInitialized((subWidgetCallbackResults) =>
                {
                    if (Helpers.IsSuccessCode(subWidgetCallbackResults.resultCode))
                    {
                        SettingsWidget widget = subWidgetsList.Find((x) => x.widgetType == widgetType);

                        if (widget != null && widget.value != null)
                            widget.HideWidget();
                        else
                            LogWarning("Loaded Widget Is Null Or Value Is Empty In Sub Widgets list.", this, () => HideChildWidget(widgetType));
                    }
                    else
                        LogWarning(subWidgetCallbackResults.result, this, () => HideChildWidget(widgetType));
                });
            }

            public void ResetChildWidget(SettingsWidgetType widgetType)
            {
                OnSettingsSubWidgetsInitialized((subWidgetCallbackResults) =>
                {
                    if (Helpers.IsSuccessCode(subWidgetCallbackResults.resultCode))
                    {
                        SettingsWidget widget = subWidgetsList.Find((x) => x.widgetType == widgetType);

                        if (widget != null && widget.value != null)
                            widget.ResetWidgetData(widgetType);
                        else
                            LogWarning("Loaded Widget Is Null Or Value Is Empty In Sub Widgets list.", this, () => ResetChildWidget(widgetType));
                    }
                    else
                        LogWarning(subWidgetCallbackResults.result, this, () => ResetChildWidget(widgetType));
                });
            }

            protected void CloseWidget(SettingsWidget widget) => widget.HideWidget();

            #endregion

            #endregion

            #region Abstract Functions

            protected abstract void Init();

            protected abstract void RegisterEventListensers(bool register);

            protected abstract void OnWidgetOpened();

            protected abstract void OnWidgetClosed();

            protected abstract void OnActionButtonClickedEvent(ButtonDataPackets dataPackets);

            protected abstract void OnActionInputFieldValueChangedEvent(string value, InputFieldDataPackets dataPackets);

            protected abstract void OnActionSliderValueChangedEvent(float value, SliderDataPackets dataPackets);

            protected abstract void OnActionDropdownValueChangedEvent(string value, DropdownDataPackets dataPackets);
            protected abstract void OnActionDropdownValueChangedEvent(int value, DropdownDataPackets dataPackets);
            protected abstract void OnActionDropdownValueChangedEvent(int value, List<string> contentList, DropdownDataPackets dataPackets);

            protected abstract void OnInputSliderValueChangedEvent(float value, InputSliderDataPackets dataPackets);
            protected abstract void OnInputSliderValueChangedEvent(string value, InputSliderDataPackets dataPackets);

            protected abstract void OnActionCheckboxValueChangedEvent(bool value, CheckboxDataPackets dataPackets);

            protected abstract void OnResetWidgetData(SettingsWidgetType widgetType);

            public void ShowWidget()
            {
                if (value)
                    value.SetActive(true);
                else
                    LogError("Widget Value Missing / Null.", this, () => ShowWidget());
            }

            public void ShowWidget(string messsage, ScreenTextType textType)
            {
                if (value)
                {
                    SetScreenUITextValue(messsage, textType);
                    value.SetActive(true);
                }
                else
                    LogError("Widget Value Missing / Null.", this, () => ShowWidget(messsage, textType));
            }

            public void HideWidget()
            {
                if (value)
                    value.SetActive(false);
                else
                    LogError("Widget Value Missing / Null.", this, () => HideWidget());
            }

            public void ResetWidgetData(SettingsWidgetType widgetType) => OnResetWidgetData(widgetType);

            #endregion

            #region Events

            public delegate void EventsListeners();

            #endregion
        }

        [Serializable]
        public class SettingsDataWidget<T>
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public bool initialVisibilityState;

            [Space(5)]
            public T dataPackets;

            string panelID;

            #endregion

            #region Main

            public void Initialize()
            {
                if (initialVisibilityState)
                    Show();
                else
                    Hide();
            }

            public void Show()
            {
                if (IsInitialized())
                    value.SetActive(true);
                else
                    Debug.LogWarning("--> PanelWidget Show Panel Failed : Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (IsInitialized())
                    value.SetActive(false);
                else
                    Debug.LogWarning("--> PanelWidget Hide Panel Failed : Value Is Missing / Null.");
            }

            public void SetPanelID(string id)
            {
                if (IsInitialized())
                {
                    if (!string.IsNullOrEmpty(id))
                        panelID = id;
                    else
                        Debug.LogWarning("--> PanelWidget Set Panel ID Failed : Panel ID Parameter Value Is Null.");
                }
                else
                    Debug.LogWarning("--> PanelWidget Init Failed : Value Is Missing / Null.");
            }

            public string GetPanelID()
            {
                return panelID;
            }

            public bool IsInitialized()
            {
                return value;
            }

            #endregion
        }

        [Serializable]
        public class ScreenLoadingInitializationData
        {
            #region Components

            public float duration;

            [Space(5)]
            public string title;

            [Space(5)]
            public string content;

            [Space(5)]
            public bool autoHide;

            [Space(5)]
            public bool isLargeFileSize;

            bool hasCompleted;

            #endregion

            #region Main

            public ScreenLoadingInitializationData()
            {

            }

            public ScreenLoadingInitializationData(float duration, string title, string content, bool autoHide)
            {
                this.duration = duration;
                this.title = title;
                this.content = content;
                this.autoHide = autoHide;

                hasCompleted = false;
            }


            public void SetCompleted() => hasCompleted = true;

            public bool Completed()
            {
                return hasCompleted;
            }

            #endregion
        }

        #endregion

        #region Class Data

        #region Serialization Data

        [Serializable]
        public class SerializableData
        {
            #region Components

            public string name;

            [Space(5)]
            public StorableType dataType;

            [HideInInspector]
            public StorageDirectoryData storageData = new StorageDirectoryData();

            [HideInInspector]
            public DateTimeComponent creationDateTime = new DateTimeComponent();

            #endregion

            #region Main

            public SerializableData()
            {
            }

            public SerializableData(StorageDirectoryData storageData) => this.storageData = storageData;

            public SerializableData(DateTimeComponent creationDateTime) => this.creationDateTime = creationDateTime;

            public SerializableData(StorageDirectoryData storageData, DateTimeComponent creationDateTime)
            {
                this.storageData = storageData;
                this.creationDateTime = creationDateTime;
            }

            public void UpdateDateTimeValue(DateTime dateTime) => creationDateTime = new DateTimeComponent(dateTime);

            public void SetCreationDateTime(DateTime dateTime) => UpdateDateTimeValue(dateTime);

            public DateTime GetModifiedDateTime()
            {
                return creationDateTime.GetDateTime();
            }

            public DateTimeComponent GetCreationDateTime()
            {
                return creationDateTime;
            }

            public void Serialize<T>(T data, StorageType storageType, FileExtensionType fileExtension = FileExtensionType.NONE, Action<CallbackData<T>> callback = null) where T : SerializableData
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, sceneAssetsManagerCallbackResults =>
                {
                    callbackResults.result = sceneAssetsManagerCallbackResults.result;
                    callbackResults.resultCode = sceneAssetsManagerCallbackResults.resultCode;

                    if (callbackResults.Success())
                    {
                        var sceneAssetsManager = sceneAssetsManagerCallbackResults.data;

                        Helpers.StringValueValid(nameVaildCallbacResults =>
                        {
                            callbackResults.result = nameVaildCallbacResults.result;
                            callbackResults.resultCode = nameVaildCallbacResults.resultCode;

                            if (callbackResults.Success())
                            {
                                if (storageType != StorageType.None)
                                {
                                    callbackResults.result = sceneAssetsManager.GetAppDirectoryData(storageType).result;
                                    callbackResults.resultCode = sceneAssetsManager.GetAppDirectoryData(storageType).resultCode;

                                    if (callbackResults.Success())
                                    {
                                        var appStorageData = sceneAssetsManager.GetAppDirectoryData(storageType).data;

                                        if (sceneAssetsManager.DirectoryFound(appStorageData))
                                        {
                                            string storageName = data.name + "_" + $"{GetSerializableDataType()}Data";

                                            callbackResults.result = GetExtensionType().result;
                                            callbackResults.resultCode = GetExtensionType().resultCode;

                                            if (callbackResults.Success())
                                            {
                                                var getExtension = (fileExtension != FileExtensionType.NONE) ? fileExtension : GetExtensionType().data;

                                                string storageNameWithExtension = storageName + fileExtension.ToString().ToLower();
                                                string filePath = Path.Combine(appStorageData.directory, storageNameWithExtension);
                                                string formattedFilePath = filePath.Replace("\\", "/");

                                                string storagedDirectory = sceneAssetsManager.GetAppDirectoryData(storageType).data.directory;

                                                var storageData = new StorageDirectoryData
                                                {
                                                    name = storageName,
                                                    path = formattedFilePath,
                                                    projectDirectory = storagedDirectory,
                                                    rootDirectory = appStorageData.directory,
                                                    directory = storagedDirectory
                                                };

                                                Helpers.StorageDataValidation(storageData, storageDataValidationCallbackResults =>
                                                {
                                                    callbackResults.result = nameVaildCallbacResults.result;
                                                    callbackResults.resultCode = nameVaildCallbacResults.resultCode;

                                                    if (callbackResults.Success())
                                                    {
                                                        sceneAssetsManager.CreateData(this, storageData, (dataCreatedCallbackResults) =>
                                                        {
                                                            callbackResults.resultCode = dataCreatedCallbackResults.resultCode;

                                                            if (callbackResults.Success())
                                                            {
                                                                var storageResults = (dataCreatedCallbackResults.data.GetStorageData().type == StorageType.Project_Structure) ? $"Project Structure Data : {dataCreatedCallbackResults.data.name} Of Storage Type : {dataCreatedCallbackResults.data.GetStorageData().type} - Has Been Serialized Successfully With Path :{dataCreatedCallbackResults.data.GetStorageData().path} - At Directory : { dataCreatedCallbackResults.data.GetStorageData().rootDirectory } And Project Directory : {dataCreatedCallbackResults.data.GetStorageData().projectDirectory }" : $"{dataCreatedCallbackResults.data.name} Of Storage Type : {dataCreatedCallbackResults.data.GetStorageData().type} - Has Been Serialized Successfully With Path :{dataCreatedCallbackResults.data.GetStorageData().path} - At Directory : { dataCreatedCallbackResults.data.GetStorageData().rootDirectory }";

                                                                callbackResults.result = storageResults;
                                                                callbackResults.data = dataCreatedCallbackResults.data as T;
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Serializing Data Failed With Results : {dataCreatedCallbackResults.result}";
                                                                callbackResults.data = default;
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        }
                                        else
                                        {
                                            callbackResults.result = $"Serialize : {name} Failed : No Storage Directory Data Found For Storage Type {storageType} - Please Check Scene Assets Manager And Initialize In The Inspector Panel.";
                                            callbackResults.data = default;
                                            callbackResults.resultCode = Helpers.ErrorCode;
                                        }
                                    }
                                }
                                else
                                {
                                    callbackResults.result = $"Serialize : {name} Failed : Storage Type Is Set To Default : None";
                                    callbackResults.resultCode = Helpers.ErrorCode;
                                }
                            }

                        }, name);
                    }

                }, "Scene Assets Manager Instance Is Not Yet Initialized.");

                callback?.Invoke(callbackResults);
            }

            public StorageDirectoryData GetStorageData()
            {
                return storageData;
            }

            public void SetSerializableDataType(StorableType type) => this.dataType = type;

            public StorableType GetSerializableDataType()
            {
                return dataType;
            }

            public CallbackData<FileExtensionType> GetExtensionType()
            {
                CallbackData<FileExtensionType> callbackResults = new CallbackData<FileExtensionType>();

                Helpers.GetAppComponentValid(AppDatabaseManager.Instance, AppDatabaseManager.Instance.name, sceneAssetsManagerCallbackResults => 
                {
                    callbackResults.result = sceneAssetsManagerCallbackResults.result;
                    callbackResults.resultCode = sceneAssetsManagerCallbackResults.resultCode;

                    if(callbackResults.Success())
                    {
                        var sceneAssetsManager = sceneAssetsManagerCallbackResults.data;

                        sceneAssetsManager.GetAppDataStorageSourceInfoFileExtensionFromLibrary(GetSerializableDataType(), storageSourceExtensionCallbackResults =>  { callbackResults = storageSourceExtensionCallbackResults; });
                    }

                }, "Scene Assets Manager Instance Is Not Yet Initialized.");


                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class AppDataStorageSourceLibrary : AppComponent
        {
            #region Components

            [Space(5)]
            public List<StorageSourceInfo> storageSourceInfoList = new List<StorageSourceInfo>();

            public FileExtensionType FallbackExtension { get; private set; } = FileExtensionType.JSON;

            #endregion

            #region Main

            public Callback IsInitialized()
            {
                Callback callbackResults = new Callback();

                Helpers.GetAppComponentsValid(storageSourceInfoList, "Storage Source Info List", storageSourceInfoListValidationCallbackResults => 
                {

                    callbackResults.result = storageSourceInfoListValidationCallbackResults.result;
                    callbackResults.resultCode = storageSourceInfoListValidationCallbackResults.resultCode;

                    if(callbackResults.Success())
                    {
                        var getStorageSourceInfoList = storageSourceInfoListValidationCallbackResults.data;

                        int index = 0;

                        for (int i = 0; i < getStorageSourceInfoList.Count; i++)
                        {
                            if(getStorageSourceInfoList[i].GetStorableFileExtension() == FileExtensionType.NONE)
                            {
                                callbackResults.result = $"Storage Source Info At Index : {i} Extension Is Set To Default : NONE - Initialization Failed";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }

                        if (callbackResults.Success())
                            callbackResults.result = "App Data Storage Source Library Has Been Initialized Successfully.";               
                    }

                }, "Storage Source Info List Is Not Yet Initialized In The Editor Inspector Panel - Please See Scene Assets Manager Editor.");


                return callbackResults;
            }

            public void GetStorageSourceInfo(StorableType storableType, Action<CallbackData<StorageSourceInfo>> callback)
            {
                CallbackData<StorageSourceInfo> callbackResults = new CallbackData<StorageSourceInfo>();

                callbackResults.result = IsInitialized().result;
                callbackResults.resultCode = IsInitialized().resultCode;

                if (callbackResults.Success())
                {
                    var storageSourceInfo = storageSourceInfoList.Find(sourceInfo => sourceInfo.GetStorableType() == storableType);

                    Helpers.GetAppComponentValid(storageSourceInfo, "Storage Source Info", storageSourceInfoValidationCallbackResults =>
                    {
                        callbackResults.result = storageSourceInfoValidationCallbackResults.result;
                        callbackResults.resultCode = storageSourceInfoValidationCallbackResults.resultCode;

                        if (callbackResults.Success())
                        {
                            if (storageSourceInfo.GetStorableFileExtension() == FileExtensionType.NONE)
                                storageSourceInfo.SetStorableFileExtension(FallbackExtension);

                            callbackResults.result = $"Storage Source Info : {storageSourceInfo.GetName()} For Storable Type : {storableType} With Extension Type : {storageSourceInfo.GetStorableFileExtension()} Is Valid And Assigned.";
                            callbackResults.data = storageSourceInfo;
                        }

                    }, "Storage Source Info For Storable Type : {} Is Not Yet Initialized In The Editor Inspector Panel - Please See Scene Assets Manager Editor.");
                }

                callback.Invoke(callbackResults);
            }

            #endregion
        }


        [Serializable]
        public class StorageSourceInfo : AppComponent
        {
            #region Components

            [Space(5)]
            public StorableType storableType;

            [Space(5)]
            public FileExtensionType storableFileExtension = FileExtensionType.NONE;

            [Space(5)]
            public SceneDataPackets dataPackets = new SceneDataPackets();

            #endregion

            #region Main

            #region Constructors

           public StorageSourceInfo()
           {

           }

            public StorageSourceInfo(string name, StorableType storableDataType, FileExtensionType storableDataFileExtension)
            {
                this.name = name;
                this.storableType = storableDataType;
                this.storableFileExtension = storableDataFileExtension;
            }

            #endregion

            #region Setters

            public void SetName(string name) => this.name = name;

            public void SetStorableDataType(StorableType storableDataType) => this.storableType = storableDataType;

            public void SetStorableFileExtension(FileExtensionType storableDataFileExtension) => this.storableFileExtension = storableDataFileExtension;

            #endregion

            #region Getters

            public string GetName() => name ?? "Storage Source Info Name Not Assigned.";

            public StorableType GetStorableType() => storableType;

            public FileExtensionType GetStorableFileExtension() => storableFileExtension;

            public SceneDataPackets GetSceneDataPackets() => dataPackets;

            #endregion

            #endregion
        }

        [Serializable]
        public class DateTimeComponent
        {
            #region Components

            public string time;
            public string date;
            public string dateTime;

            public int second, minute, hour;

            public string day;
            public string month;
            public string year;

            public string monthDay;

            public long dateTimeTick;

            #endregion

            #region Main

            public DateTimeComponent()
            {
            }

            public DateTimeComponent(DateTime dateTime)
            {
                time = dateTime.ToString("t");
                date = dateTime.ToString("d");
                this.dateTime = dateTime.ToString("g");

                second = dateTime.Second;
                minute = dateTime.Minute;
                hour = dateTime.Hour;

                day = dateTime.ToString("dddd");
                month = dateTime.ToString("MMMM");
                year = dateTime.ToString("yyyy");

                monthDay = dateTime.ToString("M");

                dateTimeTick = dateTime.Ticks;
            }

            public void UpdateDateTime(DateTime dateTime)
            {
                time = dateTime.ToString("t");
                date = dateTime.ToString("d");
                this.dateTime = dateTime.ToString("g");

                second = dateTime.Second;
                minute = dateTime.Minute;
                hour = dateTime.Hour;

                day = dateTime.ToString("dddd");
                month = dateTime.ToString("MMMM");
                year = dateTime.ToString("yyyy");

                monthDay = dateTime.ToString("M");

                dateTimeTick = dateTime.Ticks;
            }

            public DateTime GetDateTime()
            {
                return new DateTime(dateTimeTick);
            }

            #endregion
        }

        #endregion

        #region Color Data

        [Serializable]
        public struct ColorInfo
        {
            public string hexadecimal;

            public Color color;
        }

        [Serializable]
        public struct ColorSwatch
        {
            public string name;

            [Space(5)]
            public int colorSpectrumSize;

            [Space(5)]
            public List<ColorInfo> colorIDList;
        }

        [Serializable]
        public class ColorSwatchPallet
        {
            #region Components
            public string name;

            // Hide This
            public List<ColorSwatchButtonHandler> swatchButtonList = new List<ColorSwatchButtonHandler>();

            #endregion

            #region Main

            public void AddSwatchButton(ColorSwatchButtonHandler swatchButton)
            {
                if (!swatchButtonList.Contains(swatchButton))
                    swatchButtonList.Add(swatchButton);
            }

            public void Show(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (swatchButtonList.Count > 0)
                {
                    foreach (var colorIconButton in swatchButtonList)
                        colorIconButton.Show();

                    callbackResults.result = "Show Color Swatch Success : Swatch Color Showing.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Show Color Swatch Failed : Swatch Color ID List Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void Hide(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (swatchButtonList.Count > 0)
                {
                    foreach (var colorIconButton in swatchButtonList)
                        colorIconButton.Hide();

                    callbackResults.result = "Hide Color Swatch Success : Swatch Color Showing.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Hide Color Swatch Failed : Swatch Color ID List Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class ColorSwatchData
        {
            #region Components

            [Space(5)]
            public List<ColorSwatch> swatches = new List<ColorSwatch>();

            [HideInInspector]
            public List<string> swatchDropDownList = new List<string>();

            //[HideInInspector]
            public List<ColorInfo> colorInfoLibrary = new List<ColorInfo>();

            public List<ColorSwatchPallet> swatchPalletList = new List<ColorSwatchPallet>();

            //[HideInInspector]
            public SwatchData loadedSwatchData = new SwatchData();

            #endregion

            #region Main

            public void Init(string fileName, Action<CallbackData<string>> callback)
            {
                CallbackData<string> callbackResults = new CallbackData<string>();

                HasSwatchDataContent((callbackDataResults) =>
                {
                    if (Helpers.IsSuccessCode(callbackDataResults.resultCode))
                    {
                        CreateSwatchDropDownList(fileName, (createCallbackResults) =>
                        {
                            callbackResults.result = createCallbackResults.result;
                            callbackResults.resultCode = createCallbackResults.resultCode;

                            if (Helpers.IsSuccessCode(createCallbackResults.resultCode))
                                callbackResults.data = createCallbackResults.data.First();
                            else
                                Debug.LogError($"--> Init Failed With Results : {createCallbackResults.result}");
                        });
                    }
                    else
                        Debug.LogError($"--> Init Failed With Results : {callbackDataResults.result}");
                });

                callback?.Invoke(callbackResults);
            }

            public void CreateSwatchDropDownList(string fileName, Action<CallbackDataList<string>> callback = null)
            {
                CallbackDataList<string> callbackResults = new CallbackDataList<string>();

                if (AppDatabaseManager.Instance != null)
                {
                    if (AppDatabaseManager.Instance.GetAppDirectoryData(StorageType.Settings_Storage).Success())
                    {
                        StorageDirectoryData directoryData = AppDatabaseManager.Instance.GetAppDirectoryData(StorageType.Settings_Storage).data;

                        if (AppDatabaseManager.Instance.DirectoryFound(directoryData))
                        {
                            AppDatabaseManager.Instance.LoadData<SwatchData>(fileName, directoryData, (loadedDataResults) =>
                            {
                                if (Helpers.IsSuccessCode(loadedDataResults.resultCode))
                                {
                                    foreach (var swatch in loadedDataResults.data.swatches)
                                        if (!swatchDropDownList.Contains(swatch.name))
                                            swatchDropDownList.Add(swatch.name);

                                    HasSwatchDropDownContent((callbackDataResults) =>
                                    {
                                        callbackResults.result = callbackDataResults.result;
                                        callbackResults.data = swatchDropDownList;
                                        callbackResults.resultCode = callbackDataResults.resultCode;
                                    });

                                    loadedSwatchData = loadedDataResults.data;

                                    callbackResults.result = $"CreateSwatchDropDownList Sucess : {loadedDataResults.data.name} Loaded.Successfully.";
                                    callbackResults.data = swatchDropDownList;
                                    callbackResults.resultCode = Helpers.SuccessCode;
                                }
                                else
                                {
                                    if (swatches.Count > 0)
                                    {
                                        SwatchData swatchData = new SwatchData(fileName, swatches);

                                        AppDatabaseManager.Instance.CreateData(swatchData, directoryData, (createDataCallback) =>
                                        {
                                            if (Helpers.IsSuccessCode(createDataCallback.resultCode))
                                            {
                                                loadedSwatchData = createDataCallback.data;

                                                foreach (var swatch in swatches)
                                                    if (!swatchDropDownList.Contains(swatch.name))
                                                        swatchDropDownList.Add(swatch.name);

                                                HasSwatchDropDownContent((callbackDataResults) =>
                                                {
                                                    callbackResults.result = callbackDataResults.result;
                                                    callbackResults.data = swatchDropDownList;
                                                    callbackResults.resultCode = callbackDataResults.resultCode;
                                                });

                                            }
                                            else
                                            {
                                                callbackResults.result = createDataCallback.result;
                                                callbackResults.data = default;
                                                callbackResults.resultCode = createDataCallback.resultCode;
                                            }
                                        });
                                    }
                                    else
                                    {
                                        callbackResults.result = $"CreateSwatchDropDownList Failed : Swatches List Is Empty.";
                                        callbackResults.data = default;
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                }
                            });

                        }
                        else
                        {
                            callbackResults.result = $"CreateSwatchDropDownList Failed : Storage Directory : {directoryData.projectDirectory} Not Found.";
                            callbackResults.data = default;
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        Debug.LogError("");
                }
                else
                {
                    callbackResults.result = "CreateSwatchDropDownList Failed : SceneAssetsManager.Instance Is Not Yet initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetSwatchDropDownList(Action<CallbackDataList<string>> callback)
            {
                CallbackDataList<string> callbackResults = new CallbackDataList<string>();

                HasSwatchDropDownContent((callbackDataResults) =>
                {
                    callbackResults.result = callbackDataResults.result;
                    callbackResults.resultCode = callbackDataResults.resultCode;

                    if (Helpers.IsSuccessCode(callbackDataResults.resultCode))
                        callbackResults.data = swatchDropDownList;
                    else
                        callbackResults.data = default;
                });

                callback?.Invoke(callbackResults);
            }

            void HasSwatchDropDownContent(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (swatchDropDownList.Count > 0)
                {
                    callbackResults.result = "Has Swatch Drop Down Content Success : Swatch Drop Down List Initialized";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Has Swatch Drop Down Content Failed : Swatch Drop Down List Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            void HasSwatchDataContent(Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (swatches.Count > 0)
                {
                    #region Default Swatch

                    foreach (var swatch in swatches)
                    {
                        if (swatch.colorSpectrumSize > 0)
                        {
                            var data = AppDatabaseManager.Instance.GetColorInfoSpectrum(swatch.colorSpectrumSize);

                            foreach (var colorInfo in data)
                            {
                                swatch.colorIDList.Add(colorInfo);
                            }
                        }

                        swatch.colorIDList.Add(new ColorInfo());
                    }

                    #endregion

                    callbackResults.result = "Has Swatch Data Content Success : Swatches Initialized";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = "Has Swatch Data Content Failed : Swatches Are Not Initialized In The Inspector Panel.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void CreateColorInCustomSwatch(string fileName, string swatchName, ColorInfo colorInfo, StorageType directoryType, Action<CallbackDataList<string>> callback = null)
            {
                CallbackDataList<string> callbackResults = new CallbackDataList<string>();

                if (AppDatabaseManager.Instance != null)
                {
                    AppDatabaseManager.Instance.GetColorSwatchData((swatchDataResults) =>
                    {
                        if (Helpers.IsSuccessCode(swatchDataResults.resultCode))
                        {
                            if (swatchDataResults.data.SwatchDataLoadedSuccessfully())
                            {
                                SwatchData swatchData = swatchDataResults.data.GetLoadedSwatchData();

                                swatchDataResults.data.GetColorSwatchInLoadedData(swatchName, (loadedSwatchDataResults) =>
                                {
                                    if (Helpers.IsSuccessCode(loadedSwatchDataResults.resultCode))
                                    {
                                    #region Test

                                        swatchDataResults.data.CreateSwatchDropDownList(fileName, (dropDownCreated) =>
                                        {
                                            callbackResults = dropDownCreated;

                                            if (Helpers.IsSuccessCode(dropDownCreated.resultCode))
                                            {
                                                ColorSwatch swatch = loadedSwatchDataResults.data;

                                                SwatchExistsInSwatches(swatchName, (swatchExistsCallbackResults) =>
                                                {
                                                    if (Helpers.IsSuccessCode(swatchExistsCallbackResults.resultCode))
                                                    {
                                                        if (swatchExistsCallbackResults.data.colorIDList.Count > 0)
                                                        {
                                                            swatch = swatchExistsCallbackResults.data;

                                                            if (!swatch.colorIDList.Contains(colorInfo))
                                                                swatch.colorIDList.Add(colorInfo);
                                                            else
                                                            {
                                                                callbackResults.result = $"CreateColorInCustomSwatch Failed : Color Info : {colorInfo.hexadecimal} Already Exists In : {swatch.name} swatch.colorIDList Is Null.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }

                                                            AppDatabaseManager.Instance.CreateColorInfoContent(colorInfo, swatchName, ContentContainerType.ColorSwatches, OrientationType.HorizontalGrid, (callbackDataResults) =>
                                                            {
                                                                callbackResults.result = callbackDataResults.result;
                                                                callbackResults.resultCode = callbackDataResults.resultCode;

                                                                if (callbackResults.Success())
                                                                {
                                                                    AppDatabaseManager.Instance.GetColorSwatchData((colorSwatchDataResults) =>
                                                                    {
                                                                        callbackResults.result = colorSwatchDataResults.result;
                                                                        callbackResults.resultCode = colorSwatchDataResults.resultCode;

                                                                        if (callbackResults.Success())
                                                                        {
                                                                            colorSwatchDataResults.data.AddColorToSwatch(colorInfo, swatch, (addSwatchCallback) =>
                                                                            {
                                                                                callbackResults.result = addSwatchCallback.result;
                                                                                callbackResults.resultCode = addSwatchCallback.resultCode;

                                                                                if (callbackResults.Success())
                                                                                {
                                                                                    if (AppDatabaseManager.Instance.GetAppDirectoryData(StorageType.Settings_Storage).Success())
                                                                                    {
                                                                                        SwatchData swatchData = new SwatchData(fileName, swatches);

                                                                                        StorageDirectoryData directoryData = AppDatabaseManager.Instance.GetAppDirectoryData(directoryType).data;

                                                                                        AppDatabaseManager.Instance.CreateData(swatchData, directoryData, (createDataCallback) =>
                                                                                        {
                                                                                            if (Helpers.IsSuccessCode(createDataCallback.resultCode))
                                                                                            {
                                                                                                swatchDropDownList = new List<string>();

                                                                                                foreach (var colorSwatch in swatchData.swatches)
                                                                                                    if (!swatchDropDownList.Contains(colorSwatch.name))
                                                                                                        swatchDropDownList.Add(colorSwatch.name);

                                                                                                HasSwatchDropDownContent((callbackDataResults) =>
                                                                                                {
                                                                                                    callbackResults.result = createDataCallback.result;
                                                                                                    callbackResults.data = swatchDropDownList;
                                                                                                    callbackResults.resultCode = createDataCallback.resultCode;
                                                                                                });

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                callbackResults.result = "CreateColorInCustomSwatch Failed :  SceneAssetsManager.Instance.CreateData Couldn't Load.";
                                                                                                callbackResults.data = default;
                                                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                    else
                                                                                        Debug.LogError($"{AppDatabaseManager.Instance.GetAppDirectoryData(StorageType.Settings_Storage).result}");
                                                                                }
                                                                                else
                                                                                    Debug.LogError($"Create Color In Custom Swatch Failed With Results : {callbackResults.result}");
                                                                            });
                                                                        }
                                                                        else
                                                                            Debug.LogError($"--> Adding Color To Swatch Failed With Error Results : {callbackDataResults.result}");
                                                                    });
                                                                }
                                                                else
                                                                    Debug.LogError($"--> Create Color Failed With Error Results : {callbackDataResults.result}");

                                                            });
                                                        }
                                                        else
                                                        {
                                                            callbackResults.result = $"CreateColorInCustomSwatch Failed : Swtach : {swatch.name} swatch.colorIDList Is Null.";
                                                            callbackResults.resultCode = Helpers.ErrorCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        swatches.Add(swatch);

                                                        if (swatch.colorIDList.Count > 0)
                                                        {
                                                            if (!swatch.colorIDList.Contains(colorInfo))
                                                                swatch.colorIDList.Add(colorInfo);
                                                            else
                                                            {
                                                                callbackResults.result = $"CreateColorInCustomSwatch Failed : Color Info : {colorInfo.hexadecimal} Already Exists In : {swatch.name} swatch.colorIDList Is Null.";
                                                                callbackResults.resultCode = Helpers.ErrorCode;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            callbackResults.result = $"CreateColorInCustomSwatch Failed : Swtach : {swatch.name} swatch.colorIDList Is Null.";
                                                            callbackResults.resultCode = Helpers.ErrorCode;
                                                        }

                                                        if (AppDatabaseManager.Instance.GetAppDirectoryData(directoryType).Success())
                                                        {
                                                            SwatchData swatchData = new SwatchData(fileName, swatches);

                                                            StorageDirectoryData directoryData = AppDatabaseManager.Instance.GetAppDirectoryData(directoryType).data;

                                                            AppDatabaseManager.Instance.CreateData(swatchData, directoryData, (createDataCallback) =>
                                                            {
                                                                if (Helpers.IsSuccessCode(createDataCallback.resultCode))
                                                                {
                                                                    swatchDropDownList = new List<string>();

                                                                    foreach (var colorSwatch in swatchData.swatches)
                                                                        if (!swatchDropDownList.Contains(colorSwatch.name))
                                                                            swatchDropDownList.Add(colorSwatch.name);

                                                                    HasSwatchDropDownContent((callbackDataResults) =>
                                                                    {
                                                                        callbackResults.result = createDataCallback.result;
                                                                        callbackResults.data = swatchDropDownList;
                                                                        callbackResults.resultCode = createDataCallback.resultCode;
                                                                    });

                                                                }
                                                                else
                                                                {
                                                                    callbackResults.result = "CreateColorInCustomSwatch Failed :  SceneAssetsManager.Instance.CreateData Couldn't Load.";
                                                                    callbackResults.data = default;
                                                                    callbackResults.resultCode = Helpers.ErrorCode;
                                                                }
                                                            });
                                                        }
                                                        else
                                                            Debug.LogError($"Results : {AppDatabaseManager.Instance.GetAppDirectoryData(directoryType)}");
                                                    }
                                                });

                                            }
                                            else
                                                Debug.LogError($"---> On Dropdown Create Failed With Resuts : {dropDownCreated.result}.");
                                        });

                                    #endregion

                                }
                                    else
                                    {
                                        if (!SwatchPalletExist(swatchName))
                                        {

                                            Debug.LogError($"---> On Dropdown Create New Swatch / Pallet");

                                        //ColorSwatchPallet swatchPallet = new ColorSwatchPallet();
                                        //swatchPallet.name = swatchName;

                                        //swatchDataResults.data.AddPallet(swatchPallet);

                                        // --Create New Swatch
                                        ColorSwatch swatch = new ColorSwatch { name = swatchName, colorIDList = new List<ColorInfo>() };
                                            swatch.colorIDList.Add(colorInfo);

                                            if (!swatches.Contains(swatch))
                                                swatches.Add(swatch);

                                            if (AppDatabaseManager.Instance.GetAppDirectoryData(directoryType).Success())
                                            {
                                                SwatchData swatchData = new SwatchData(fileName, swatches);

                                                StorageDirectoryData directoryData = AppDatabaseManager.Instance.GetAppDirectoryData(directoryType).data;

                                                AppDatabaseManager.Instance.CreateData(swatchData, directoryData, (createDataCallback) =>
                                                {
                                                    if (Helpers.IsSuccessCode(createDataCallback.resultCode))
                                                    {
                                                        swatchDropDownList = new List<string>();

                                                        foreach (var colorSwatch in swatchData.swatches)
                                                            if (!swatchDropDownList.Contains(colorSwatch.name))
                                                                swatchDropDownList.Add(colorSwatch.name);

                                                        HasSwatchDropDownContent((callbackDataResults) =>
                                                        {
                                                            callbackResults.result = createDataCallback.result;
                                                            callbackResults.data = swatchDropDownList;
                                                            callbackResults.resultCode = createDataCallback.resultCode;
                                                        });

                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = "CreateColorInCustomSwatch Failed :  SceneAssetsManager.Instance.CreateData Couldn't Load.";
                                                        callbackResults.data = default;
                                                        callbackResults.resultCode = Helpers.ErrorCode;
                                                    }
                                                });
                                            }
                                            else
                                                Debug.LogError($"Results : {AppDatabaseManager.Instance.GetAppDirectoryData(directoryType)}");
                                        }
                                        else
                                        {
                                            callbackResults.result = $"CreateColorInCustomSwatch Failed : Swatch : {swatchName} Already Exists In swatchPalletList.";
                                            callbackResults.resultCode = Helpers.ErrorCode;
                                        }
                                    }
                                });
                            }
                            else
                            {
                                callbackResults.result = "CreateColorInCustomSwatch Failed : swatchDataResults Couldn't Load For Some Reason.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = $"CreateColorInCustomSwatch GetColorSwatchData Failed With Results : {swatchDataResults.result}";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    });
                }
                else
                {
                    callbackResults.result = "CreateColorInCustomSwatch Failed : SceneAssetsManager.Instance Is Not Yet Initialized.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void GetColorSwatchInLoadedData(string swatchName, Action<CallbackData<ColorSwatch>> callback)
            {
                CallbackData<ColorSwatch> callbackResults = new CallbackData<ColorSwatch>();

                if (loadedSwatchData != null && loadedSwatchData.swatches.Count > 0)
                {
                    ColorSwatch swatch = loadedSwatchData.swatches.Find((x) => x.name == swatchName);

                    if (swatch.colorIDList != null && swatch.colorIDList.Count > 0)
                    {
                        callbackResults.result = $"GetColorSwatchInLoadedData Success : Swatch : {swatchName} Data Loaded";
                        callbackResults.data = swatch;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "GetColorSwatchInLoadedData Failed : Swatch Data Couldn't Load For Some Reason.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "GetColorSwatchInLoadedData Failed : Swatch Data Couldn't Load For Some Reason.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public SwatchData GetLoadedSwatchData()
            {
                return loadedSwatchData;
            }

            public void SetLoadedSwatchData(SwatchData swatchData)
            {
                loadedSwatchData = swatchData;
            }

            public bool SwatchDataLoadedSuccessfully()
            {
                bool results = false;

                if (loadedSwatchData != null && loadedSwatchData.swatches.Count > 0)
                    results = true;

                return results;
            }

            public void AddColorToSwatch(ColorInfo colorInfo, ColorSwatch swatch, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                HasSwatchDataContent((callbackDataResults) =>
                {
                    callbackResults = callbackDataResults;

                    if (Helpers.IsSuccessCode(callbackDataResults.resultCode))
                    {
                        if (swatch.colorIDList.Count > 0)
                        {
                            if (!swatch.colorIDList.Contains(colorInfo))
                            {
                                swatch.colorIDList.Add(colorInfo);

                                callbackDataResults.result = "AddColorToSwatch Success : Color Info Added To swatch.colorIDList.";
                                callbackDataResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackDataResults.result = "AddColorToSwatch Failed : Color Info Already Exists In swatch.colorIDList.";
                                callbackDataResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackDataResults.result = "AddColorToSwatch Failed : swatch.colorIDList Is Null.";
                            callbackDataResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                        Debug.LogError($"--> AddColorToSwatch Failed With Results : {callbackDataResults.result}");
                });

                callback?.Invoke(callbackResults);
            }

            public void AddPallet(ColorSwatchPallet pallet)
            {
                if (!swatchPalletList.Contains(pallet))
                    swatchPalletList.Add(pallet);
            }

            public ColorSwatchPallet GetColorSwatchPallet(string name)
            {
                ColorSwatchPallet swatchPallet = swatchPalletList.Find((x) => x.name == name);

                return swatchPallet;
            }

            public List<ColorSwatchPallet> GetColorSwatchPallets()
            {
                return swatchPalletList;
            }

            public void OnSwatchColorSelection(ColorInfo colorInfo)
            {
                for (int i = 0; i < swatchPalletList.Count; i++)
                    for (int j = 0; j < swatchPalletList[i].swatchButtonList.Count; j++)
                        if (swatchPalletList[i].swatchButtonList[j].GetColorInfo().hexadecimal == colorInfo.hexadecimal)
                            swatchPalletList[i].swatchButtonList[j].SetInputUIButtonState(InputActionButtonType.ColorPickerButton, InputUIState.Selected);
                        else
                            swatchPalletList[i].swatchButtonList[j].SetInputUIButtonState(InputActionButtonType.ColorPickerButton, InputUIState.Deselect);
            }

            public void SwatchExistsInSwatches(string swatchName, Action<CallbackData<ColorSwatch>> callback)
            {
                CallbackData<ColorSwatch> callbackResults = new CallbackData<ColorSwatch>();

                foreach (var swatch in swatches)
                {
                    if (swatch.name == swatchName)
                    {
                        callbackResults.result = $"SwatchExistsInSwatches Success : Color Swatch : {swatchName} Exists In Swatches List.";
                        callbackResults.data = swatch;
                        callbackResults.resultCode = Helpers.SuccessCode;

                        break;
                    }
                    else
                    {
                        callbackResults.result = $"SwatchExistsInSwatches Failed : Color Swatch : {swatchName} Doesn't Exist In Swatches List.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }

                callback?.Invoke(callbackResults);
            }

            public bool SwatchPalletExist(string nameID)
            {
                return swatchPalletList.Contains(swatchPalletList.Find((x) => x.name == nameID));
            }

            public bool SwatchPalletExist(ColorSwatchPallet pallet)
            {
                return swatchPalletList.Contains(pallet);
            }

            public void ShowPallet(string key)
            {
                foreach (var item in swatchPalletList)
                    item.Hide();

                GetColorSwatchPallet(key).Show();
            }

            public void AddColorInfoToLibrary(ColorInfo colorInfo, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (!colorInfoLibrary.Contains(colorInfo))
                {
                    colorInfo.hexadecimal = Helpers.TrimStringValue(colorInfo.hexadecimal, 6);

                    colorInfoLibrary.Add(colorInfo);

                    callbackResults.result = $"AddColorInfoToLibrary Success : Color : {colorInfo.hexadecimal} Added To Library.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"AddColorInfoToLibrary Failed : Color : {colorInfo.hexadecimal} Already Exists.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ColorInfoExistsInLibrary(ColorInfo colorInfo, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (colorInfoLibrary.Count > 0)
                {
                    foreach (var color in colorInfoLibrary)
                    {
                        if (color.hexadecimal == Helpers.TrimStringValue(colorInfo.hexadecimal, 6))
                        {
                            callbackResults.result = "ColorInfoExistsInLibrary Success : Color Exists In Library.";
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "ColorInfoExistsInLibrary Failed : colorInfoLibrary Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void ColorInfoExistsInSwatch(ColorInfo colorInfo, string swatchName, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (colorInfoLibrary.Count > 0)
                {
                    foreach (var color in colorInfoLibrary)
                    {
                        if (color.hexadecimal == Helpers.TrimStringValue(colorInfo.hexadecimal, 6))
                        {
                            callbackResults.result = "ColorInfoExistsInLibrary Success : Color Exists In Library.";
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "ColorInfoExistsInLibrary Failed : colorInfoLibrary Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        [Serializable]
        public class SwatchData : SerializableData
        {
            #region Components

            public List<ColorSwatch> swatches = new List<ColorSwatch>();

            #endregion

            #region Main

            public SwatchData()
            {

            }

            public SwatchData(string name, List<ColorSwatch> swatches)
            {
                this.swatches = swatches;
                this.name = name;
            }

            #endregion
        }

        #endregion

        #region Navigation

        [Serializable]
        public class NavigationWidget
        {
            #region Components

            public List<NavigationTab> navigationTabsList = new List<NavigationTab>();

            public List<NavigationButton> navigationButtonsList = new List<NavigationButton>();

            #endregion

            #region Main

            public void Init(Action<Callback> callback = null)
            {
                try
                {
                    Callback callbackResults = new Callback();

                    // Tabs
                    if (navigationTabsList != null)
                    {
                        foreach (var navigationTab in navigationTabsList)
                        {
                            if (navigationTab.value != null)
                            {
                                navigationTab.Init((navigationTabCallback) =>
                                {
                                    if (Helpers.IsSuccessCode(navigationTabCallback.resultCode))
                                    {
                                        callbackResults.result = navigationTabCallback.result;
                                        callbackResults.resultCode = Helpers.SuccessCode;
                                    }
                                    else
                                    {
                                        callbackResults.result = navigationTabCallback.result;
                                        callbackResults.resultCode = Helpers.ErrorCode;
                                    }
                                });
                            }
                            else
                            {
                                callbackResults.result = "Navigation Button Value Is Missing / Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }
                    else
                    {
                        callbackResults.result = "Navigation Buttons List Is Null / Empty.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }

                    // Buttons
                    if (navigationButtonsList != null)
                    {
                        foreach (var navigationButton in navigationButtonsList)
                        {
                            if (navigationButton.value != null)
                            {
                                navigationButton.Init();
                                navigationButton.value.onClick.AddListener(() => NavigationIDInput(navigationButton.navigationID));
                            }
                            else
                            {
                                callbackResults.result = "Navigation Button Value Is Missing / Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                    }
                    else
                    {
                        callbackResults.result = "Navigation Buttons List Is Null / Empty.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }

                    callback.Invoke(callbackResults);
                }
                catch (Exception e)
                {
                    Debug.LogError($"--> RG_Unity : Init Failed With Exception : {e.Message}");
                    throw e;
                }
            }

            void NavigationIDInput(NavigationTabID navigationID)
            {
                OnNavigationTabChangedEvent(navigationID);
            }

            void OnNavigationTabChangedEvent(NavigationTabID navigationID)
            {
                if (navigationTabsList != null)
                {
                    for (int i = 0; i < navigationTabsList.Count; i++)
                    {
                        if (navigationTabsList[i].navigationID == navigationID)
                        {
                            navigationTabsList[i].Show();
                            UpdateButtonState(navigationID);
                        }
                        else
                            navigationTabsList[i].Hide();
                    }
                }
                else
                    Debug.LogWarning("--> RG_Unity - OnNavigationTabChangedEvent Failed : Navigation Tabs List Is Null / Empty.");
            }

            void UpdateButtonState(NavigationTabID navigationID)
            {
                if (navigationButtonsList != null)
                {
                    for (int i = 0; i < navigationButtonsList.Count; i++)
                        if (navigationButtonsList[i].IsSelected())
                            navigationButtonsList[i].SetButtonState(false);

                    NavigationButton navButton = navigationButtonsList.Find((x) => x.navigationID == navigationID);

                    if (navButton != null)
                        navButton.SetButtonState(true);
                    else
                        Debug.LogWarning($"--> RG_Unity - UpdateButtonState : Navigation Button For ID : {navigationID} Not Found.");
                }
                else
                    Debug.LogWarning("--> RG_Unity - OnNavigationTabChangedEvent Failed : Navigation Tabs List Is Null / Empty.");
            }

            #endregion
        }

        [Serializable]
        public class NavigationSubWidget
        {
            #region Components

            public NavigationTabID navigationTabID;

            [Space(5)]
            public List<NavigationSubTab> navigationSubTabsList = new List<NavigationSubTab>();

            #endregion

            #region Main

            public void Init(NavigationTabID navigationTabID, Action<Callback> callback = null)
            {

                this.navigationTabID = navigationTabID;

                Callback callbackResults = new Callback();

                // Tabs
                if (navigationSubTabsList != null)
                {
                    foreach (var navigationTab in navigationSubTabsList)
                    {
                        if (navigationTab.value != null)
                        {
                            navigationTab.Init();

                            callbackResults.result = "Success.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Navigation Button Value Is Missing / Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "Navigation Buttons List Is Null / Empty.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void OnNavigationTabChangedEvent(NavigationRenderSettingsProfileID selectionTypedID)
            {
                if (navigationSubTabsList != null)
                {
                    for (int i = 0; i < navigationSubTabsList.Count; i++)
                    {
                        if (navigationSubTabsList[i].selectionTypedID == selectionTypedID)
                        {
                            navigationSubTabsList[i].Show();
                        }
                        else
                            navigationSubTabsList[i].Hide();
                    }
                }
                else
                    Debug.LogWarning("--> RG_Unity - OnNavigationTabChangedEvent Failed : Navigation Tabs List Is Null / Empty.");
            }

            public void SetNavigationTabID(NavigationTabID tabID)
            {
                navigationTabID = tabID;
            }

            public NavigationTabID GetNavigationTabID()
            {
                return navigationTabID;
            }

            #endregion
        }

        [Serializable]
        public class NavigationTab
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public NavigationTabID navigationID;

            [Space(5)]
            public List<NavigationTabWidget> navigationTabWidgetsList = new List<NavigationTabWidget>();

            [Space(5)]
            public List<UIButton<ButtonDataPackets>> actionButtonsList = new List<UIButton<ButtonDataPackets>>();

            [Space(5)]
            public List<UISlider<SliderDataPackets>> actionSlidersList = new List<UISlider<SliderDataPackets>>();

            [Space(5)]
            public bool initialVisibilityState;

            [Space(5)]
            public bool hasSubNavigationTabs;

            [Space(5)]
            public NavigationSubWidget navigationSubWidget = new NavigationSubWidget();

            #endregion

            #region Main

            public void Init(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (value)
                {
                    if (actionButtonsList.Count > 0)
                    {
                        foreach (var button in actionButtonsList)
                        {
                            if (button.value != null)
                            {
                                button.value.onClick.AddListener(() => OnActionButtonPressedEvent(button.dataPackets, button.dataPackets.action));

                                callbackResults.result = "Initialized Successfully";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "Button Value Is Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }

                    if (actionSlidersList.Count > 0)
                    {
                        foreach (var slider in actionSlidersList)
                        {
                            if (slider.value != null)
                            {
                                slider.value.onValueChanged.AddListener((value) => OnActionSliderValueChangedEvent(slider.dataPackets, value));

                                callbackResults.result = "Initialized Successfully";
                                callbackResults.resultCode = Helpers.SuccessCode;
                            }
                            else
                            {
                                callbackResults.result = "Slider Value Is Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }

                    if (navigationTabWidgetsList.Count > 0)
                    {
                        foreach (var widget in navigationTabWidgetsList)
                        {
                            if (widget.value != null)
                            {
                                widget.Init((callback) =>
                                {
                                    callbackResults.result = callback.result;
                                    callbackResults.resultCode = callback.resultCode;
                                });
                            }
                            else
                            {
                                callbackResults.result = "Widget Value Is Null.";
                                callbackResults.resultCode = Helpers.ErrorCode;

                                break;
                            }
                        }
                    }
                    else
                    {
                        callbackResults.result = $"-----> Nav Tab Widgets For Tab : {name} Missing : {navigationTabWidgetsList.Count}";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }

                    if (hasSubNavigationTabs)
                    {
                        if (navigationSubWidget != null)
                        {
                            navigationSubWidget.Init(navigationID, (navigationCallback) =>
                            {
                                if (Helpers.IsSuccessCode(navigationCallback.resultCode))
                                {
                                    if (navigationSubWidget.navigationSubTabsList != null)
                                    {
                                        foreach (var subTab in navigationSubWidget.navigationSubTabsList)
                                            subTab.Init();
                                    }
                                    else
                                    {
                                        callbackResults.result = navigationCallback.result;
                                        callbackResults.resultCode = navigationCallback.resultCode;
                                    }
                                }
                                else
                                {
                                    callbackResults.result = navigationCallback.result;
                                    callbackResults.resultCode = navigationCallback.resultCode;
                                }

                            });
                        }
                        else
                        {
                            callbackResults.result = "Show Navigation Tab Failed: Subwidget Is Missing / Null.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }

                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                        if (initialVisibilityState)
                            Show();
                        else
                            Hide();
                }
                else
                {
                    callbackResults.result = "Show Navigation Tab Failed: Value Is Missing / Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void Show()
            {
                if (value)
                    value.SetActive(true);
                else
                    Debug.LogWarning("--> Show Navigation Tab Failed : Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (value)
                    value.SetActive(false);
                else
                    Debug.LogWarning("--> Hide Navigation Tab Failed : Value Is Missing / Null.");
            }

            public void ShowWidget(NavigationTabType widgetType, Action<Callback> callback)
            {
                Callback callbackResults = new Callback();

                if (navigationTabWidgetsList != null)
                {
                    NavigationTabWidget tabWidget = navigationTabWidgetsList.Find((x) => x.tabType == widgetType);

                    if (tabWidget != null)
                    {
                        if (tabWidget.IsInitialized())
                        {
                            tabWidget.Show();

                            callbackResults.result = $"ShowWidget Success : NavigationTabWidget : {tabWidget.name} Is Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = $"ShowWidget Failed : NavigationTabWidget : {tabWidget.name} Is Not Initialized.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "ShowWidget Failed : NavigationTabWidget Not Found In navigationTabWidgetsList.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "ShowWidget Failed : navigationTabWidgetsList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void ShowWidget(NavigationTabType widgetType, NavigationTabID navigationID, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (navigationTabWidgetsList != null)
                {
                    if (this.navigationID == navigationID)
                    {
                        NavigationTabWidget tabWidget = navigationTabWidgetsList.Find((x) => x.tabType == widgetType);

                        if (tabWidget != null)
                        {
                            if (tabWidget.IsInitialized())
                            {
                                tabWidget.Show();
                            }
                            else
                            {
                                callbackResults.result = $"ShowWidget Failed : NavigationTabWidget : {tabWidget.name} Is Not Initialized.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = "ShowWidget Failed : NavigationTabWidget Not Found In navigationTabWidgetsList.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"ShowWidget Failed : Selected Navigation Tab ID : {navigationID} Doesn't Match The Current Navigation ID : {this.navigationID}.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "ShowWidget Failed : navigationTabWidgetsList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void HideWidget(NavigationTabType widgetType, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (navigationTabWidgetsList != null)
                {
                    NavigationTabWidget tabWidget = navigationTabWidgetsList.Find((x) => x.tabType == widgetType);

                    if (tabWidget != null)
                    {
                        if (tabWidget.IsInitialized())
                        {
                            callbackResults.result = $"HideWidget Success : NavigationTabWidget : {tabWidget.name} Initialized.";
                            callbackResults.resultCode = Helpers.SuccessCode;

                            tabWidget.Hide();
                        }
                        else
                        {
                            callbackResults.result = $"HideWidget Failed : NavigationTabWidget : {tabWidget.name} Is Not Initialized.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "HideWidget Failed : NavigationTabWidget Not Found In navigationTabWidgetsList.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "HideWidget Failed : navigationTabWidgetsList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public void HideWidget(NavigationTabType widgetType, NavigationTabID navigationID, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (navigationTabWidgetsList != null)
                {
                    if (this.navigationID == navigationID)
                    {

                        NavigationTabWidget tabWidget = navigationTabWidgetsList.Find((x) => x.tabType == widgetType);

                        if (tabWidget != null)
                        {
                            if (tabWidget.IsInitialized())
                            {
                                tabWidget.Hide();
                            }
                            else
                            {
                                callbackResults.result = $"HideWidget Failed : NavigationTabWidget : {tabWidget.name} Is Not Initialized.";
                                callbackResults.resultCode = Helpers.ErrorCode;
                            }
                        }
                        else
                        {
                            callbackResults.result = "HideWidget Failed : NavigationTabWidget Not Found In navigationTabWidgetsList.";
                            callbackResults.resultCode = Helpers.ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = $"HideWidget Failed : Selected Navigation Tab ID : {navigationID} Doesn't Match The Current Navigation ID : {this.navigationID}.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "HideWidget Failed : navigationTabWidgetsList Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            void OnActionButtonPressedEvent(ButtonDataPackets dataPackets, InputActionButtonType actionType, Action<Callback> callback = null)
            {
                Debug.LogError($"==> Open Settings : {actionType}");

                switch (actionType)
                {
                    case InputActionButtonType.CreateSkyboxButton:

                        RenderingSettingsManager.Instance.UpdateScreenWidgetInfo = false;
                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        break;

                    case InputActionButtonType.Edit:

                        RenderingSettingsManager.Instance.UpdateScreenWidgetInfo = true;
                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        break;

                    case InputActionButtonType.OpenColorPicker:

                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        if (RenderingSettingsManager.Instance != null)
                        {
                            if (AppDatabaseManager.Instance != null)
                            {
                                AppDatabaseManager.Instance.GetHexidecimalFromColor(RenderingSettingsManager.Instance.GetRenderingSettingsData().GetLightingSettingsData().GetLightColor(), (callbackResults) =>
                                {
                                    if (Helpers.IsSuccessCode(callbackResults.resultCode))
                                        ActionEvents.OnSwatchColorPickedEvent(callbackResults.data, false, true);
                                    else
                                        Debug.LogError($"--> OnActionButtonPressedEvent OpenColorPicker Failed With Results : {callbackResults.result}");
                                });
                            }
                            else
                                Debug.LogWarning("OnActionButtonPressedEvent OpenColorPicker Failed : SceneAssetsManager Instance Is Not Yet Initialized.");
                        }
                        else
                            Debug.LogWarning("OnActionButtonPressedEvent OpenColorPicker Failed : RenderingSettingsManager Instance Is Not Yet Initialized.");

                        break;

                    case InputActionButtonType.CreateNewProfileButton:

                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        break;

                    case InputActionButtonType.DuplicateButton:

                        if (ScreenUIManager.Instance != null)
                        {
                            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            {
                                if (ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData())
                                {
                                    if (dataPackets.tabID == navigationID)
                                    {
                                        if (AppDatabaseManager.Instance != null)
                                        {
                                            AppDatabaseManager.Instance.Duplicate((duplicateCallback) =>
                                            {
                                                if (Helpers.IsSuccessCode(duplicateCallback.resultCode))
                                                    Debug.Log($"-------------------> RG_Unity: {duplicateCallback.result}");
                                                else
                                                    Debug.LogWarning($"--> Failed To Create With Results : {duplicateCallback.result}");

                                            });
                                        }
                                        else
                                            Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Scene Assets Manager Instance Not Yet Initialized.");
                                    }
                                    else
                                        return;
                                }
                                else
                                    return;
                            }
                            else
                                Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance's  Get Current Screen Data Value Is Missing / Null.");
                        }
                        else
                            Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance Not Yet Initialized.");

                        break;

                    case InputActionButtonType.ClearAllButton:

                        if (ScreenUIManager.Instance != null)
                        {
                            if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                            {
                                if (ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData())
                                {
                                    if (dataPackets.tabID == navigationID)
                                    {
                                        if (AppDatabaseManager.Instance != null)
                                        {
                                            AppDatabaseManager.Instance.ClearAllRenderProfiles((clearAllCallback) =>
                                            {
                                                if (Helpers.IsSuccessCode(clearAllCallback.resultCode))
                                                    Debug.Log($"-------------------> RG_Unity: {clearAllCallback.result}");
                                                else
                                                    Debug.LogWarning($"--> Failed To Create With Results : {clearAllCallback.result}");

                                            });
                                        }
                                        else
                                            Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Scene Assets Manager Instance Not Yet Initialized.");
                                    }
                                    else
                                        return;
                                }
                                else
                                    return;
                            }
                            else
                                Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance's  Get Current Screen Data Value Is Missing / Null.");
                        }
                        else
                            Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance Not Yet Initialized.");

                        break;
                }
            }

            void OnActionSliderValueChangedEvent(SliderDataPackets dataPackets, float value)
            {
                switch (dataPackets.valueType)
                {
                    case SliderValueType.LightIntensity:

                        RenderingSettingsManager.Instance.GetRenderingSettingsData().CurrentSkyboxSettings.SetLightIntensity(value);

                        break;

                    case SliderValueType.SkyboxExposure:

                        float exposure = GetValueFormatted(value, 8);

                        Debug.LogError($"==> Exposure : {exposure}");

                        RenderingSettingsManager.Instance.GetRenderingSettingsData().CurrentSkyboxSettings.SetSkyBoxExposure(exposure);

                        break;

                    case SliderValueType.SkyboxRotationSpeed:

                        RenderingSettingsManager.Instance.GetRenderingSettingsData().CurrentSkyboxSettings.SkyboxRotationSpeed = GetValueFormatted(value, 100);

                        break;
                }
            }

            float GetValueFormatted(float value, float multiplier)
            {
                return value * multiplier;
            }

            #endregion
        }

        [Serializable]
        public class NavigationSubTab
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public NavigationRenderSettingsProfileID selectionTypedID;

            [Space(5)]
            public bool initialVisibilityState;

            #endregion

            #region Main

            public void Init()
            {
                if (value)
                {
                    if (initialVisibilityState)
                        Show();
                    else
                        Hide();

                    Debug.Log($"---------> Initialized Sub Tab : {name}");
                }
                else
                    Debug.LogWarning("--> Show Navigation Tab Failed : Value Is Missing / Null.");
            }

            public void Show()
            {
                if (value)
                    value.SetActive(true);
                else
                    Debug.LogWarning("--> Show Navigation Tab Failed : Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (value)
                    value.SetActive(false);
                else
                    Debug.LogWarning("--> Hide Navigation Tab Failed : Value Is Missing / Null.");
            }

            #endregion
        }

        [Serializable]
        public class NavigationButton
        {
            #region Components

            public string name;

            [Space(5)]
            public Button value;

            [Space(5)]
            public NavigationTabID navigationID;


            [Space(5)]
            public bool initialSelectionState;

            bool isSelected;

            #endregion

            #region Main

            public void Init()
            {
                isSelected = initialSelectionState;
            }

            public void SetButtonState(bool isSelected) => this.isSelected = isSelected;

            public bool IsSelected()
            {
                return isSelected;
            }

            #endregion
        }

        [Serializable]
        public class NavigationTabWidget
        {
            #region Components

            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public List<UIButton<ButtonDataPackets>> actionButtonsList = new List<UIButton<ButtonDataPackets>>();

            [Space(5)]
            public List<UIDropDown<DropdownDataPackets>> actionDropDownList = new List<UIDropDown<DropdownDataPackets>>();

            [Space(5)]
            public NavigationTabType tabType;

            [Space(5)]
            public bool initialVisibilityState;

            [SerializeField]
            bool isInitialized = false;

            #endregion

            #region Main

            public void Init(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (actionButtonsList.Count > 0)
                {
                    foreach (var button in actionButtonsList)
                    {
                        if (button.value)
                        {
                            button.value.onClick.AddListener(() => OnActionButtonClickedEvent(button.dataPackets));

                            callbackResults.result = "Initialized Successfully.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Init Failed : Button Value Is Null.";
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                if (actionDropDownList.Count > 0)
                {
                    foreach (var dropDown in actionDropDownList)
                    {
                        if (dropDown.value)
                        {
                            switch (dropDown.dataPackets.action)
                            {
                                case InputDropDownActionType.RenderingProfileType:

                                    if (AppDatabaseManager.Instance != null)
                                    {

                                        List<string> profileTypeList = AppDatabaseManager.Instance.GetFormatedDropDownContentList(AppDatabaseManager.Instance.GetDropDownContentData(AppData.DropDownContentType.RenderProfiles).data);

                                        if (profileTypeList != null)
                                        {
                                            dropDown.value.ClearOptions();

                                            List<TMP_Dropdown.OptionData> dropdownOption = new List<TMP_Dropdown.OptionData>();

                                            foreach (var profile in profileTypeList)
                                                dropdownOption.Add(new TMP_Dropdown.OptionData() { text = profile });

                                            dropDown.value.AddOptions(dropdownOption);

                                            dropDown.value.onValueChanged.AddListener((value) => OnDropDownExtensionsOptions(value));
                                        }
                                        else
                                            Debug.LogWarning("--> SelectedSceneAssetPreviewWidget : Export Extension Drop Down Extensions List Not Found In Scene Assets Manager.");
                                    }
                                    else
                                        Debug.LogWarning("--> Init Failed : Scene Assets Manager Instance Is Not Yet Initialized.");

                                    break;
                            }

                            callbackResults.result = "Initialized Successfully.";
                            callbackResults.resultCode = Helpers.SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = "Init Failed : Drop Down Value Is Null.";
                            callbackResults.resultCode = Helpers.SuccessCode;

                            break;
                        }
                    }
                }
                else
                {
                    callbackResults.result = "Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }

                isInitialized = (callbackResults.resultCode == Helpers.SuccessCode)? true : false;

                if (isInitialized)
                    if (initialVisibilityState)
                        Show();
                    else
                        Hide();

                callback.Invoke(callbackResults);
            }

            void OnActionButtonClickedEvent(ButtonDataPackets dataPackets)
            {
                Debug.Log($"----> Clicked On Button Type : {dataPackets.action}");

                switch (dataPackets.action)
                {
                    case InputActionButtonType.ConfirmationButton:

                        switch (dataPackets.navigationTabWidgetType)
                        {
                            case NavigationTabType.CreateRenderProfileWidget:

                                if (ScreenUIManager.Instance != null)
                                {
                                    if (ScreenUIManager.Instance.GetCurrentScreen().Success())
                                    {
                                        if (ScreenUIManager.Instance.GetCurrentScreen().GetData().GetType().GetData() == dataPackets.GetReferencedScreenType().GetData().GetValue().GetData())
                                        {
                                            if (dataPackets.tabID == NavigationTabID.PostProcessingSettings)
                                            {
                                                if (AppDatabaseManager.Instance != null)
                                                {
                                                    AppDatabaseManager.Instance.CreateNewRenderProfile(dataPackets, (createRendererCallback) =>
                                                    {
                                                        if (Helpers.IsSuccessCode(createRendererCallback.resultCode))
                                                            ActionEvents.OnNavigationTabWidgetEvent(dataPackets);
                                                        else
                                                            Debug.LogWarning($"--> Failed To Create With Results : {createRendererCallback.result}");
                                                    });
                                                }
                                                else
                                                    Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Rendering Settings Manager Instance Not Yet Initialized.");
                                            }
                                            else
                                                return;
                                        }
                                        else
                                            return;
                                    }
                                    else
                                        Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance's  Get Current Screen Data Value Is Missing / Null.");
                                }
                                else
                                    Debug.LogWarning("--> RG_Unity - OnActionButtonPressedEvent : Screen UI Manager Instance Not Yet Initialized.");

                                break;
                        }

                        break;

                    case InputActionButtonType.Cancel:

                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        break;

                    case InputActionButtonType.HideNavigationScreenWidget:

                        Debug.LogError("-----------> Hide Widget");

                        ActionEvents.OnNavigationTabWidgetEvent(dataPackets);

                        break;
                }
            }

            void OnDropDownExtensionsOptions(int dropdownIndex)
            {
                if (AppDatabaseManager.Instance)
                    AppDatabaseManager.Instance.SetNewRenderProfileID((NavigationRenderSettingsProfileID)dropdownIndex);
                else
                    Debug.LogWarning("--> RG_Unity - OnDropDownExtensionsOptions Failed : Scene Assets Manager Instance Not Yet Initialized.");
            }

            public void Show()
            {
                if (value != null)
                    value.SetActive(true);
                else
                    Debug.LogWarning("--> RG_Unity - Init Failed : NavigationTabWidget Value Is Missing / Null.");
            }

            public void Hide()
            {
                if (value != null)
                    value.SetActive(false);
                else
                    Debug.LogWarning("--> RG_Unity - Init Failed : NavigationTabWidget Value Is Missing / Null.");
            }

            public NavigationTabType GetNavigationTabWidgetType()
            {
                return tabType;
            }

            public bool IsInitialized()
            {
                return isInitialized;
            }

            #endregion
        }

        #endregion

        [Serializable]
        public class ScreenBlurObject
        {
            #region Components

            [Space(5)]
            public string name;

            [Space(5)]
            public GameObject value;

            [Space(5)]
            public List<ScreenBlurObjectContainer> displayLayerContainerList = new List<ScreenBlurObjectContainer>();

            [Space(5)]
            public bool initialVisibilityState = false;

            CanvasGroup canvasGroup;

            #endregion

            #region Main

            public void Init<T>(T fromClass, Action<Callback> callback = null) where T : AppMonoBaseClass
            {
                Callback callbackResults = new Callback();

                if (HasBlurObject())
                {
                    if (initialVisibilityState)
                        Show(ScreenUIPlacementType.Default);

                    callbackResults.result = "Screen Blur Initialized.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Initialize Screen Blur : {name} From Class : {fromClass.name} Value Missing / Not Assigned In The Editor Inspector.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void Show(ScreenUIPlacementType layerType, bool fade = false, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (HasBlurObject())
                {
                    AddToSelectedContainer(layerType, addedToContainerCallback => 
                    {
                        bool isVisible = addedToContainerCallback.resultCode == Helpers.SuccessCode;

                        OnSetBlurObjectVisibilityState(isVisible);
                        callbackResults = addedToContainerCallback;
                    });
                }
                else
                {
                    callbackResults.result = $"Show Blur Object Of Layer Type : {layerType} Failed : Screen Blur Object Value Is Missing / Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetBlurValue(float value)
            {
                if (HasBlurObject())
                    OnSetBlurObjectAlphaValue(value);
                else
                    Debug.LogWarning("Show Blur Object Failed : Screen Blur Object Canvas Group Is Missing / Null.");
            }

            public void Hide(bool resetDisplayLayer = true, bool fade = false)
            {
                if (HasBlurObject())
                {
                    OnSetBlurObjectVisibilityState(false);

                    if (resetDisplayLayer)
                        AddToSelectedContainer(ScreenUIPlacementType.Default);
                }
                else
                    Debug.LogWarning("--> RG_Unity - Show Blur Object Failed : Screen Blur Object Value Is Missing / Null.");
            }

            void AddToSelectedContainer(ScreenUIPlacementType layerType, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                if (displayLayerContainerList != null)
                {
                    ScreenBlurObjectContainer container = displayLayerContainerList.Find((x) => x.containerLayerType == layerType);

                    if (container.HasValueAssigned())
                    {
                        OnSetBlurObjectContainer(container.GetValueAssigned(), true);

                        callbackResults.result = $"Setting Blur Object : {value.name} To Container : {container.value.name} Of Type : {layerType}.";
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Container Of Type : {layerType} Value Is Missing Null.";
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Add To Selected Container Of Type : {layerType} Failed : Display Layer Container List Is Null.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public float GetAlphaValue()
            {
                return canvasGroup.alpha;
            }

            public bool HasBlurObject()
            {
                if (value != null)
                {
                    if (canvasGroup == null)
                        if(value?.GetComponent<CanvasGroup>() == null)
                            canvasGroup = value?.AddComponent<CanvasGroup>();
                        else
                            canvasGroup = value?.GetComponent<CanvasGroup>();
                }

                return value && canvasGroup;
            }

            public bool GetActive()
            {
                if (!HasBlurObject())
                    return false;

                return value.activeSelf && value.activeInHierarchy;
            }

            public void OnSetBlurObjectVisibilityState(bool isVisible) => value.SetActive(isVisible);

            public void OnSetBlurObjectAlphaValue(float value) => canvasGroup.alpha = value;

            public void OnSetBlurObjectContainer(Transform value, bool keepWorldPos) => this.value.transform.SetParent(value, keepWorldPos);

            #endregion
        }

        [Serializable]
        public class RenderingSettingsData
        {
            #region Components

            [Space(5)]
            public LightingSettings lightingSettings = new LightingSettings();

            [Space(5)]
            public Material defaultMaterial;

            [Space(5)]
            public List<SkyboxSettings> skyboxDataList = new List<SkyboxSettings>();

            public LightingSettings CurrentSkyboxSettings { get { return lightingSettings; } set { lightingSettings = value; } }


            #endregion

            #region Main

            public LightingSettings GetLightingSettingsData()
            {
                return CurrentSkyboxSettings;
            }

            public void SetCurrentSkybox(Material skybox) => RenderSettings.skybox = skybox;
            public void SetCurrentSkybox(Texture2D skyboxTexture) => RenderSettings.skybox.SetTexture("_MainTex", skyboxTexture);

            public Material GetCurrentSkybox()
            {
                return RenderSettings.skybox;
            }

            public Texture2D GetCurrentSkyboxTexture()
            {
                return (Texture2D)RenderSettings.skybox.mainTexture;
            }

            public void SetSkyboxRotation(float rotationAngle) => RenderSettings.skybox.SetFloat("_Rotation", rotationAngle);

            public void RotateSkybox(float rotationSpreed) => RenderSettings.skybox.SetFloat("_Rotation", rotationSpreed * Time.time);

            public Material GetDefaultMaterial()
            {
                return defaultMaterial;
            }

            #endregion
        }

        [Serializable]
        public class SkyboxSettings
        {
            #region Components

            public string name;

            [Space(5)]
            public LightingSettingsData lightingSettings = new LightingSettingsData();

            public Material skybox;

            #endregion

            #region Main

            public void Initialize()
            {

            }

            public void SetSkybox(Material skybox) => this.skybox = skybox;

            public Material GetSkybox()
            {
                return skybox;
            }

            #endregion
        }


        [Serializable]
        public class SkyboxSettingsData
        {
            #region Components

            public string name;


            #endregion

            #region Main

            #endregion
        }


        // Guard Code Properly For Errors.
        [Serializable]
        public class LightingSettings
        {
            #region Components

            public Light sceneLight;

            [Space(5)]
            public Material sceneSkybox;

            public float LightRotationSpeed { get; set; }

            public float SkyboxRotationSpeed { get { return RenderSettings.skybox.GetFloat("_Rotation"); } set { RenderSettings.skybox.SetFloat("_Rotation", value); } }

            #endregion

            #region Main

            public Light GetSceneLight()
            {
                return sceneLight;
            }

            public void SetLightIntensity(float intensity)
            {
                if (sceneLight != null)
                    sceneLight.intensity = intensity;
                else
                    Debug.LogWarning("--> SetLightColor Failed : Light Value Missing");
            }

            public float GetLightIntensity()
            {
                if (sceneLight != null)
                    return sceneLight.intensity;
                else
                {
                    Debug.LogWarning("--> SetLightColor Failed : Light Value Missing");
                    return 0.0f;
                }
            }

            public void SetLightColor(Color color)
            {
                if (sceneLight != null)
                    sceneLight.color = color;
                else
                    Debug.LogWarning("--> SetLightColor Failed : Light Value Missing");
            }

            public void SetLightColorInfo(ColorInfo colorInfo)
            {
                if (sceneLight != null)
                    sceneLight.color = colorInfo.color;
                else
                    Debug.LogWarning("--> SetLightColor Failed : Light Value Missing");
            }

            public Color GetLightColor()
            {
                if (sceneLight != null)
                    return sceneLight.color;
                else
                {
                    Debug.LogError("==> RG_Unity - Scene Light Missing / Null. Adress This.................");
                    return Color.clear;
                }
            }

            public void SetSkyBoxTexture(Texture2D skyboxTexture = null)
            {
                if (sceneSkybox != null)
                {
                    Debug.LogError($"==> RG_Unity - Setting Skybox To Texture : {skyboxTexture.name}");

                    if (skyboxTexture != null)
                    {
                        sceneSkybox.SetTexture("_MainTex", skyboxTexture);
                        RenderSettings.skybox = sceneSkybox;
                        DynamicGI.UpdateEnvironment();
                    }
                    else
                        Debug.LogWarning("--> SetSkyBoxTexture Failed : Skybox Texture Missing / Null.");
                }
                else
                    Debug.LogWarning("--> SetSkyBoxTexture Failed : Scene Skybox Is Missing / Null.");
            }

            public void SetSkyBoxExposure(float exposure)
            {
                RenderSettings.ambientMode = UnityEngine.Rendering.AmbientMode.Custom;
                RenderSettings.skybox.SetFloat("_Exposure", exposure);
                RenderSettings.skybox.SetFloat("_Rotation", 0);
            }

            public float GetSkyBoxValue(string valueName)
            {
                return RenderSettings.skybox.GetFloat(valueName);
            }

            #endregion
        }

        [Serializable]
        public struct LightingSettingsData
        {
            #region Components

            public LightingData lightingData;

            [Space(5)]
            public StorageDirectoryData hdrTextureDirectoryData;

            //[HideInInspector]
            public Texture2D hdrTexture;

            #endregion

            #region Main

            public Texture2D GetSkyboxHDRTexture()
            {
                if (hdrTexture != null)
                    return hdrTexture;
                else
                {
                    hdrTexture = Helpers.LoadTextureFile(hdrTextureDirectoryData.projectDirectory);
                    return hdrTexture;
                }
            }

            #endregion
        }

        [Serializable]
        public struct LightingData
        {
            #region Components

            public float lightIntensity;

            [Space(5)]
            public float skyboxExposure;

            [Space(5)]
            public ColorInfo lightColor;

            [Space(5)]
            public ColorInfo lightTemperature;

            #endregion
        }

        #endregion

        #region Struct Data

        [Serializable]
        public class ScreenFaderComponent : DataDebugger, IUIFaderComponent
        {
            #region Components

            public CanvasGroup value;

            [Space(5)]
            public bool active;

            [Space(5)]
            public ScreenFadeModeType mode;

            ScreenType screenType;
            UIScreenWidgetVisibilityState initialVisibilityState;

            UIScreenViewerComponent screenViewerComponent;

            float visible = 1, hidden = 0;
            int fadeIn = 1, fadeOut = -1;

            int fadeDirection = 1;
            bool canFade = false;

            #endregion

            #region Main

            public void Init(UIScreenViewerComponent screenViewerComponent, Action<CallbackData<ScreenType>> callback = null)
            {
                CallbackData<ScreenType> callbackResults = new CallbackData<ScreenType>();

                if (screenViewerComponent != null)
                {
                    if (screenViewerComponent.GetUIScreenType() != ScreenType.None)
                    {
                        callbackResults.result = GetActiveFader().result;
                        callbackResults.resultCode = GetActiveFader().resultCode;

                        if (callbackResults.Success())
                        {
                            OnInitializeScreenDataSetup(screenViewerComponent.GetUIScreenType(), screenViewerComponent.GetViewerInitialVisibilityState(), initializationSetupCallbackResults => 
                            {
                                callbackResults = initializationSetupCallbackResults;

                                if(callbackResults.Success())
                                    ActionEvents._Update += ActionEvents__Update;

                            });
                        }
                    }
                    else
                    {
                        callbackResults.result = $"Screen Viewer Param : {screenViewerComponent?.name}'s Is Assigned From Base's Int Function But Its Screen Type Is Set To Default / None.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.WarningCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Screen Viewer Param Value For View Fader : {name} Is Null / Not Assigned From Base's Int Function";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            private void ActionEvents__Update()
            {
                if (!canFade)
                    return;

                if (fadeDirection == fadeOut)
                {
                    Helpers.GetValue(AppDatabaseManager.Instance.GetDefaultScreenFadeExecutionValue(GetUIScreenType(), AppDatabaseManager.UIScreenFadeDirection.FadeOut).value, fadeOutDuractionCallbackResults =>
                    {
                        if (fadeOutDuractionCallbackResults.Success())
                        {
                            if (GetOpacity().data > hidden)
                                GetActiveFader().data.alpha -= fadeOutDuractionCallbackResults.data * Time.deltaTime;
                            else
                                canFade = false;
                        }
                        else
                        {
                            canFade = false;
                            Log(fadeOutDuractionCallbackResults.resultCode, fadeOutDuractionCallbackResults.result, this);

                            throw new ArgumentNullException("Fade Out Duration", fadeOutDuractionCallbackResults.result);   
                        }

                    }, $"Fade Out Duration Value Is Set To Default : 0 - Possible Action - Check If Default Execution Time For Screen : {GetUIScreenType()} Has Been Initialized From The Scene Assets Manager.");
                }
                
                if (fadeDirection == fadeIn)
                {
                    Helpers.GetValue(AppDatabaseManager.Instance.GetDefaultScreenFadeExecutionValue(GetUIScreenType(), AppDatabaseManager.UIScreenFadeDirection.FadeIn).value, fadeInDuractionCallbackResults => 
                    {
                        if (fadeInDuractionCallbackResults.Success())
                        {
                            if (GetOpacity().data < visible)
                                GetActiveFader().data.alpha += fadeInDuractionCallbackResults.data * Time.deltaTime;
                            else
                                canFade = false;
                        }
                        else
                        {
                            canFade = false;
                            Log(fadeInDuractionCallbackResults.resultCode, fadeInDuractionCallbackResults.result, this);

                            throw new ArgumentNullException("Fade In Duration", fadeInDuractionCallbackResults.result);
                        }

                    }, $"Fade In Duration Value Is Set To Default : 0 - Possible Action - Check If Default Execution Time For Screen : {GetUIScreenType()} Has Been Initialized From The Scene Assets Manager.");
                }
            }

            public void OnInitializeScreenDataSetup(ScreenType screenType, UIScreenWidgetVisibilityState initialVisibilityState, Action<CallbackData<ScreenType>> callback = null)
            {
                CallbackData<ScreenType> callbackResults = new CallbackData<ScreenType>();

                this.screenType = screenType;
                this.initialVisibilityState = initialVisibilityState;

                callbackResults.result = (this.screenType != ScreenType.None) ? $"Initialized View Fader : {name} For Screen Of Type : {this.screenType}" : $"Failed To Initialize View Fader : {name} - Screen Type Is Set To Default / None.";
                callbackResults.resultCode = (this.screenType != ScreenType.None) ? Helpers.SuccessCode : Helpers.WarningCode;

                if (callbackResults.Success())
                {
                    callbackResults.data = GetUIScreenType();

                    var fadeValue = (this.initialVisibilityState == UIScreenWidgetVisibilityState.Visible) ? hidden : visible;
                    SetFaderVisibilityValue(fadeValue);
                }

                callback?.Invoke(callbackResults);
            }

            ScreenType GetUIScreenType()
            {
                return screenType;
            }

            public async Task<CallbackData<Screen>> FadeIn()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.result = GetActiveFader().result;
                callbackResults.resultCode = GetActiveFader().resultCode;

                if (callbackResults.Success())
                {
                    canFade = true;
                    fadeDirection = fadeIn;

                    while (canFade)
                        await Task.Yield();

                    LogInfoChannel fadeInResultsCode = (GetOpacity().data >= visible) ? Helpers.SuccessCode : Helpers.ErrorCode;
                    string fadeInResults = (fadeInResultsCode == Helpers.SuccessCode) ? $"View : {GetUIScreenType()} Has Been Faded In Successfully" : $"Failed To Fade In View : {GetUIScreenType()} - Current Fader Opacity Is : {GetOpacity().data}";

                    callbackResults.result = fadeInResults;
                    callbackResults.resultCode = fadeInResultsCode;

                    if (callbackResults.Success())
                    {
                        SetFaderVisibilityValue(visible);
                        return callbackResults;
                    }
                }

                return callbackResults;
            }

            public async Task<CallbackData<Screen>> FadeOut()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.result = GetActiveFader().result;
                callbackResults.resultCode = GetActiveFader().resultCode;

                if (callbackResults.Success())
                {
                    canFade = true;
                    fadeDirection = fadeOut;

                    while (canFade)
                    {
                        await Task.Yield();
                    }

                    LogInfoChannel fadeOutResultsCode = (GetOpacity().data <= hidden) ? Helpers.SuccessCode : Helpers.ErrorCode;
                    string fadeOutResults = (fadeOutResultsCode == Helpers.SuccessCode) ? $"View : {GetUIScreenType()} Has Been Faded Out Successfully" : $"Failed To Fade out View : {GetUIScreenType()} - Current Fader Opacity Is : {GetOpacity().data}";

                    callbackResults.result = fadeOutResults;
                    callbackResults.resultCode = fadeOutResultsCode;

                    if (callbackResults.Success())
                    {
                        SetFaderVisibilityValue(hidden);
                        return callbackResults;
                    }
                }


                return callbackResults;
            }

            public void SetFaderVisibilityValue(float opacity)
            {
                //LogInfo($" <---------------------------------> Setting View Fader : {name} Opacity : {opacity} ", this);

                if (OnViewFaderInitialized().Success())
                    value.alpha = opacity;
                else
                    Log(OnViewFaderInitialized().resultCode, OnViewFaderInitialized().result, this);
            }

            public CallbackData<float> GetOpacity()
            {
                CallbackData<float> callbackResults = new CallbackData<float>();

                callbackResults.result = GetActiveFader().result;
                callbackResults.resultCode = GetActiveFader().resultCode;

                if (callbackResults.Success())
                {
                    callbackResults.data = GetActiveFader().data.alpha;
                    callbackResults.result = $"Returning Opacity Value Of : { callbackResults.data }";
                }

                return callbackResults;
            }

            public CallbackData<Screen> CanFadeInViewCallbackResults()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.result = OnViewFaderInitialized().result;
                callbackResults.resultCode = OnViewFaderInitialized().resultCode;

                if(callbackResults.Success())
                {
                    callbackResults.result = GetOpacity().result;
                    callbackResults.resultCode = GetOpacity().resultCode;

                    if (callbackResults.Success() && active)
                    {
                        var opacityResults = GetOpacity().data;

                        if (opacityResults == hidden)
                        {
                            callbackResults.result = "Can Fade In Successfully Because Fader Component Is Currently Inactive.";
                            // callbackResults.data = true;
                        }
                        else
                        {
                            callbackResults.result = "Can Not Fade In Because Fader Component Is Currently Active - Can Only Fade Out Now.";
                            //callbackResults.data = false;
                            // callbackResults.resultsCode = Helpers.WarningCode;
                        }
                    }
                }

                return callbackResults;
            }

            public CallbackData<Screen> CanFadeOutViewCallbackResults()
            {
                CallbackData<Screen> callbackResults = new CallbackData<Screen>();

                callbackResults.result = OnViewFaderInitialized().result;
                callbackResults.resultCode = OnViewFaderInitialized().resultCode;

                if (callbackResults.Success())
                {
                    callbackResults.result = GetOpacity().result;
                    callbackResults.resultCode = GetOpacity().resultCode;

                    if (callbackResults.Success() && active)
                    {
                        var opacityResults = GetOpacity().data;

                        if (opacityResults == visible)
                        {
                            callbackResults.result = "Can Fade Out Successfully Because Fader Component Is Currently Active.";
                          
                        }
                        else
                        {
                            callbackResults.result = "Can Not Fade Out Because Fader Component Is Currently Inactive - Can Only Fade In Now.";
                            callbackResults.resultCode = Helpers.WarningCode;
                        }
                    }
                }

                return callbackResults;
            }

            public CallbackData<CanvasGroup> GetActiveFader()
            {
                CallbackData<CanvasGroup> callbackResults = new CallbackData<CanvasGroup>();

                callbackResults.result = OnViewFaderInitialized().result;
                callbackResults.resultCode = OnViewFaderInitialized().resultCode;

                if (callbackResults.Success())
                {
                    string results = (active) ? $"Screen View Fader Component For Screen : {GetUIScreenType()}'s Is Initialized Successfully And Active." : $"Screen View Fader Component For Screen : {GetUIScreenType()}'s Is Initialized Successfully But Is Not Set To Active In The Unity Inspector Panel..";

                    callbackResults.result = results;
                    callbackResults.data = (active) ? value : default;
                    callbackResults.resultCode = (active) ? Helpers.SuccessCode : Helpers.WarningCode;
                }
                else
                {
                    string results = (active) ? $"View Fader Component For Screen : {GetUIScreenType()} Is Set To Active But It's Component Value Is Missing / Null / Not Assigned In The Unity Inspector Panel." : "View Fader Is No Applicable For This Screen.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = (active) ? Helpers.WarningCode : Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public  Callback OnViewFaderInitialized()
            {
                Callback callbackResults = new Callback();

                if(value != null && value.isActiveAndEnabled && value.gameObject.activeInHierarchy && value.gameObject.activeSelf)
                {
                    callbackResults.result = $"Screen Fader Value : {value.name} Is Assigned.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Screen Fader Value Is Missing / Not Active In The Scene Hierachy.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            public Callback OnCanInitializeViewFaderResults()
            {
                Callback callbackResults = new Callback();

                LogInfoChannel resultsCode = (active && OnViewFaderInitialized().Success()) ? Helpers.SuccessCode : Helpers.WarningCode;
                string results = (resultsCode == LogInfoChannel.Success) ? $"Can Initiaze View Fader : {name}." : (active && !OnViewFaderInitialized().Success())? $"Screen View Fader : {name} Is Active But Not Initialized With Code : {OnViewFaderInitialized().resultCode} - Results : {OnViewFaderInitialized().result}" : "";

                callbackResults.result = results;
                callbackResults.resultCode = resultsCode;

                return callbackResults;
            }

            public ScreenFadeModeType GetScreenFadeMode()
            {
                return mode;
            }

            #endregion
        }

        [Serializable]
        public class ColorData
        {
            #region Components

            public Color color;
            public ScreenCoordinates coordinates;

            #endregion
        }

        [Serializable]
        public class ScreenCoordinates
        {
            #region Components

            public int x;
            public int y;

            #endregion

            #region Main

            public ScreenCoordinates()
            {

            }

            public ScreenCoordinates(int x, int y)
            {
                this.x = x;
                this.y = y;
            }

            #endregion
        }

        [Serializable]
        public struct UIScreenDimensions
        {
            public int width;

            [Space(5)]
            public int height;
        }

        [Serializable]
        public struct UILayoutDimensions
        {
            public string name;

            [Space(5)]
            public UIScreenDimensions containerDimensions;

            [Space(5)]
            public LayoutViewType layoutView;
        }

        [Serializable]
        public struct ScreenBounds
        {
            public int left;

            [Space(5)]
            public int right;

            [Space(5)]
            public int top;

            [Space(5)]
            public int bottom;
        }

        [Serializable]
        public struct ReferencedActionButtonData
        {
            public string title;
            public InputActionButtonType type;
            public InputUIState state;
        }

        #region Data Packets

        [Serializable]
        public class ContainerData : AppComponent
        {
            #region Components

            [Space(5)]
            public ContentContainerType type;

            [Space(5)]
            public ContainerViewSpaceType viewSpace;

            #endregion

            #region Components

            public ContentContainerType GetContainerType() => type;
            public ContainerViewSpaceType GetContainerViewSpaceType() => viewSpace;

            #endregion
        }

        [Serializable]
        public class DataPackets : IDataPackets
        {
            #region Components

            [Space(5)]
            [Header("External Link URL")]

            [Space(5)]
            public string externalLinkURL;

            [Space(5)]
            [Header("Default Data Packet")]

            [Space(5)]
            public SelectionOption selectionOption;

            [Space(5)]
            public ContainerData screenContainerData, sceneContainerData;

            [Space(5)]
            public LayoutViewType layoutViewType = LayoutViewType.Default;

            #endregion

            #region Delete Deprecated Section

            [Header("Deprecated - Remove")]
            [Space(5)]
            public ScreenType screenType;

            #endregion

            [Space(5)]
            public UIStateType stateType;

            [Space(5)]
            public Notification notification;

            #endregion

            #region Main

            #region Data Setters

            #endregion

            #region Data Getters

            public string GetExternalLinkURL() => externalLinkURL;

            public UIStateType GetStateType() => stateType;


            public ContainerData GetScreenContainerData() => screenContainerData;
            public ContainerData GetSceneContainerData() => sceneContainerData;

            #endregion

            #endregion
        }


        [Serializable]
        public abstract class DataPacketBase<T> 
        {
            #region Components

            public string name;

            [Space(5)]
            public T value;

            #endregion

            #region Main

            #endregion

            #region Data Setters

            public void SetName(string name) => this.name = name;

            public void SetValue(T value) => this.value = value;

            #endregion

            #region Data Getters

            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Data Packet Object Reference Name Not Assigned.";

            protected CallbackData<T> GetValue()
            {
                var callbackResults = new CallbackData<T>();

                if(value != null)
                {
                    callbackResults.result = $"Get Value Succeeded For Data Packet Object : {GetName()}";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Get Value Failed For Data Packet Object : {GetName()}";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class DataPacketEnum<T> : DataPacketBase<T> where T : Enum
        {
            #region Components

            #endregion

            #region Main

            public DataPacketEnum()
            {

            }

            public DataPacketEnum(string name, T value)
            {
                this.name = name;
                this.value = value;
            }

            public CallbackData<T> GetValue()
            {
                var callbackResults = new CallbackData<T>();

                if (value.ToString().ToLower() != "none")
                {
                    callbackResults.result = $"Data Packet Object : {GetName()}'s Type Is Set To : {value}";
                    callbackResults.data = value;
                   callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Data Packet Object : {GetName()} Type Is Set To Default : {value}";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion
        }

        [Serializable]
        public class DataPacketStruct<T> : DataPacketBase<T> where T : struct
        {
            #region Components

            #endregion

            #region Main

            public DataPacketStruct()
            {

            }

            public DataPacketStruct(string name, T value)
            {
                this.name = name;
                this.value = value;
            }

            #endregion
        }

        [Serializable]
        public class DataPacketGeneric<T> : DataPacketBase<T> where T : class
        {
            #region Components

            #endregion

            #region Main

            public DataPacketGeneric()
            {

            }

            public DataPacketGeneric(string name, T value)
            {
                this.name = name;
                this.value = value;
            }

            #endregion
        }


       [Serializable]
        public class SceneDataPacketStructGroup<T> where T : struct
        {
            #region Components

            [Space(15)]
            [Header("Configs Group (Value Types)")]

            public string name;

            [Space(5)]
            public List<DataPacketStruct<T>> confiGroupDatas;

            #endregion

            #region Main

            public SceneDataPacketStructGroup()
            {

            }

            public SceneDataPacketStructGroup(string name, List<DataPacketStruct<T>> confiGroupDatas)
            {
                this.name = name;
                this.confiGroupDatas = confiGroupDatas;
            }

            #endregion
        }

        public enum ObjectStateOverrideType
        {
            None,
            Default,
            Override
        }

        [Serializable]
        public class SceneDataPackets : DataPackets, ISceneDataPackets
        {
            #region Components

            [Space(5)]
            [Header("Scene Data")]

            [Space(5)]
            public UIScreenWidget screenWidgetPrefab;

            [Space(5)]
            public DynamicWidgetsContainer dynamicWidgetsContainer;


            [Space(5)]
            public SceneAsset sceneAsset;

            #region Selectable Packet Options (Enums)

            [Space(15)]
            [Header("Selectable Packet Options (Enums)")]

            [Space(5)]
            public DataPacketEnum<ScreenType> referencedScreenType = new DataPacketEnum<ScreenType>();

            [Space(5)]
            public DataPacketEnum<WidgetType> referencedWidgetType = new DataPacketEnum<WidgetType>();

            [Space(5)]
            public DataPacketEnum<ScreenUIPlacementType> referencedUIScreenPlacementType = new DataPacketEnum<ScreenUIPlacementType>();

            [Space(5)]
            public DataPacketEnum<ObjectStateOverrideType> overrideStateType = new DataPacketEnum<ObjectStateOverrideType>();

            #endregion

            #region Togglable Options (Booleans)

            [Space(5)]
            public SceneDataPacketStructGroup<bool> booleanOptionsGroup;

            [Space(5)]
            public bool clearContentContainer;

            [Space(5)]
            public bool resetContentContainerPose;

            [Space(5)]
            public bool scaleSceneAsset;

            [Space(5)]
            public bool keepAssetWorldPose;

            [Space(5)]
            public bool keepAssetCentered;

            #endregion

            [Space(5)]
            public SelectableWidgetType selectableAssetType;

            [Space(5)]
            public RuntimeExecution sceneAssetScaleValueType;

            [Space(5)]
            public OrientationType dynamicWidgetsContainerOrientation;


            [Header("Deprecated - Remove")]
            [Space(5)] // Deprecated
            public WidgetType widgetType;

            [Space(5)]
            public Vector2 widgetScreenPosition;

            [Space(5)]
            public AssetFieldSettingsType assetFieldConfiguration;

            [Space(5)]
            public StorageType storageDirectoryType;

            [Space(5)]
            public FolderStructureType folderStructureType;

            [Space(5)]
            public PermissionType requiredPermission;

            [Space(5)]
            public LoadingItemType screenRefreshLoadingItemType;

            [Space(5)]
            public SceneMode sceneMode;

            [Space(5)]
            public EventCameraState sceneAssetMode;

            [Space(5)]
            public bool blurScreen;

            [Header("Deprecated - Remove")]
            [Space(5)]
            public ScreenUIPlacementType referencedUIScreenPlacementTypeDeprecated;

            [Space(5)]
            public ScreenViewState screenViewState;

            [Space(5)]
            public bool refreshScreenOnLoad;

            [Space(5)]
            public bool refreshSceneAssets;

            [Space(5)]
            public float refreshDuration;

            [Space(5)]
            public string widgetTitle;

            [Space(5)]
            public int widgetTitleCharacterLimit;

            [Space(5)]
            public string popUpMessage;

            [Space(5)]
            public ScreenLoadTransitionType screenTransition;

            [Space(5)]
            public float screenTransitionSpeed;

            [Space(5)]
            public bool canTransitionSceneAsset;

            [Space(5)]
            public bool overrideSceneAssetTargetPosition;

            [Space(5)]
            public Vector3 sceneAssetTransitionalTargetPosition;

            [Space(5)]
            public bool overrideSceneAssetTransitionSpeed;

            [Space(5)]
            public float sceneAssetTransitionSpeed;

            [HideInInspector]
            public bool isRootFolder;

            [HideInInspector]
            public List<ReferencedActionButtonData> referencedActionButtonDataList;

            public new string ToString()
            {
                string results = $"Screen Type {referencedScreenType.ToString()},  Pop Up Type : {widgetType.ToString()}, asse Field Config : {assetFieldConfiguration.ToString()}, Directory Type : {storageDirectoryType.ToString()}";

                return results;
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetScreenBlurState(bool blurScreen) => this.blurScreen = blurScreen;

            public void SetReferencedScreenType(ScreenType referencedScreenType, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if (this.referencedScreenType.GetValue().GetData() != referencedScreenType)
                {
                    this.referencedScreenType.SetValue(referencedScreenType);

                    callbackResults.result = $"Data Packets Referenced Screen Type Has Been Successfully Set To : {referencedScreenType} - Changes Applied";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Data Packets Referenced Screen Type Was Already Set To : {referencedScreenType} - No Changes Applied";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetReferencedWidgetType(WidgetType referencedWidgetType, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if (this.referencedWidgetType.GetValue().GetData() != referencedWidgetType)
                {
                    this.referencedWidgetType.SetValue(referencedWidgetType);

                    callbackResults.result = $"Data Packets Referenced Widget Type Has Been Successfully Set To : {referencedWidgetType} - Changes Applied";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Data Packets Referenced Widget Type Was Already Set To : {referencedWidgetType} - No Changes Applied";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            public void SetReferencedUIScreenPlacementType(ScreenUIPlacementType referencedUIScreenPlacementType, Action<Callback> callback = null)
            {
                var callbackResults = new Callback();

                if (this.referencedUIScreenPlacementType.GetValue().GetData() != referencedUIScreenPlacementType)
                {
                    this.referencedUIScreenPlacementType.SetValue(referencedUIScreenPlacementType);

                    callbackResults.result = $"Data Packets Referenced Referenced UI Screen Placement Type Has Been Successfully Set To : {referencedUIScreenPlacementType} - Changes Applied";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Data Packets Referenced UI Screen Placement Type Was Already Set To : {referencedUIScreenPlacementType} - No Changes Applied";
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Data Getters

            public CallbackData<DataPacketEnum<ScreenType>> GetReferencedScreenType()
            {
                var callbackResults = new CallbackData<DataPacketEnum<ScreenType>>(referencedScreenType.GetValue());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Data Packet Get Referenced Screen Type Successfull - Screen Type : {referencedScreenType.GetValue().GetData()}";
                    callbackResults.data = referencedScreenType;
                }

                return callbackResults;
            }

            public CallbackData<DataPacketEnum<WidgetType>> GetReferencedWidgetType()
            {
                var callbackResults = new CallbackData<DataPacketEnum<WidgetType>>(referencedWidgetType.GetValue());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Data Packet Get Referenced Screen Type Successfull - Screen Type : {referencedWidgetType.GetValue().GetData()}";
                    callbackResults.data = referencedWidgetType;
                }

                return callbackResults;
            }

            public CallbackData<DataPacketEnum<ScreenUIPlacementType>> GetReferencedUIScreenPlacementType()
            {
                var callbackResults = new CallbackData<DataPacketEnum<ScreenUIPlacementType>>(referencedUIScreenPlacementType.GetValue());

                if (callbackResults.Success())
                {
                    callbackResults.result = $"Data Packet Get Referenced UI Screen Placement Type Success - UI Screen Placement Type : {referencedUIScreenPlacementType.GetValue().GetData()}";
                    callbackResults.data = referencedUIScreenPlacementType;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ButtonDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Button")]

            [Space(5)]
            public InputActionButtonType action;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationTabType navigationTabWidgetType;

            [Space(5)]
            public NavigationWidgetVisibilityState navigationWidgetVisibilityState;

            [Space(5)]
            public OrientationType containerContentOrientation;

            [Space(5)]
            public FocusedWidgetOrderType contentFocusedWidgetOrderType;
        }

        [Serializable]
        public class InputFieldDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Input Field")]

            [Space(5)]
            public InputFieldActionType action;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        [Serializable]
        public class DropdownDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Drop Down")]

            [Space(5)]
            public InputDropDownActionType action;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        [Serializable]
        public class SliderDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public SliderValueType valueType;

            [Space(5)]
            public ColorValueType colorValue;

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;

            [Space(5)]
            public bool initialVisibilityState;
        }

        [Serializable]
        public class InputSliderDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Input Slider")]

            [Space(5)]
            public InputSliderActionType action;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        [Serializable]
        public class CheckboxDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Checkbox")]

            [Space(5)]
            public CheckboxInputActionType action;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        [Serializable]
        public class TextDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Text Displayer")]

            [Space(5)]
            public ScreenTextType textType;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        [Serializable]
        public class ImageDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Image Displayer")]

            [Space(5)]
            public ScreenImageType imageType;

            [Space(5)]
            [Header("Config Data")]

            [Space(5)]
            public UIScreenDimensions resolution;

            [Space(5)]
            public bool preserveAspectRatio;

            [Space(5)]
            public bool useData;
        }

        [Serializable]
        public class SettingsDataPackets : SceneDataPackets
        {
            [Space(5)]
            [Header("Panel Widget Data Packet")]

            [Space(5)]
            public SettingsWidgetTabID widgetTabID;

            [Space(5)]
            public NavigationTabID tabID;

            [Space(5)]
            public NavigationWidgetVisibilityState visibilityState;
        }

        #region Config Data Packets

        [Serializable]
        public class ConfigDataPacket<T> : DataDebugger where T : Enum
        {
            #region Components

            [SerializeField]
            protected T type;

            #endregion

            #region Main

            public Callback Initialized()
            {
                var callbackResults = new Callback(GetType());
                return callbackResults;
            }

            #region Data Setters

            public void SetType(T type) => this.type = type;

            #endregion

            #region Data Getters

            public new CallbackData<T> GetType()
            {
                var callbackResults = new CallbackData<T>();

                if(!type.ToString().ToLower().Equals("none"))
                {
                    callbackResults.result = $"Config Data Packet : {GetName()} Is Set To Type : {type}";
                    callbackResults.data = type;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Config Data Packet : {GetName()} Get Type Failed : Type Is Set To Default : {type} - Invalid Operation, Possible Fix - Assign Value In The Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class ScreenConfigDataPacket : ConfigDataPacket<ScreenType>
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private ScreenLoadTransitionType loadTransitionType = ScreenLoadTransitionType.None;

            #endregion

            #region Main

            #region Data Setters

            public void SetScreenLoadTransitionType(ScreenLoadTransitionType loadTransitionType) => this.loadTransitionType = loadTransitionType;

            #endregion

            #region Data Getters

            public CallbackData<ScreenLoadTransitionType> GetScreenLoadTransitionType()
            {
                var callbackResults = new CallbackData<ScreenLoadTransitionType>();

                if (loadTransitionType != ScreenLoadTransitionType.None)
                {
                    callbackResults.result = $"Screen Config Data Packet : {GetName()}'s Load Transition Type Is Set To : {loadTransitionType}";
                    callbackResults.data = loadTransitionType;
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Screen Config Data Packet : {GetName()}'s Get Load Transition Type Failed : Load Transition Type Is Set To Default : {loadTransitionType} - Invalid Operation, Possible Fix - Assign Value In The Inspector Panel.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.WarningCode;
                }

                return callbackResults;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class WidgetConfigDataPacket : ConfigDataPacket<WidgetType>
        {
            #region Components

            [SerializeField]
            protected bool blurScreen;

            #endregion

            #region Main


            #region Data Setters

            #endregion

            #region Data Getters

            #endregion

            #endregion
        }

        #endregion

        #endregion

        #endregion

        #region Debugger

        [Serializable]
        public class DataDebugger: IDebugger
        {
            #region Components

            [Space(5)]
            public string name;

            #endregion

            #region Main

            public DataDebugger()
            {

            }

            public void SetName(string name) => this.name = name;
            public string GetName() => !string.IsNullOrEmpty(name) ? name : "Component Name Is Not Assigned.";

            #region Log Functions

            #region Generic Log

            public void Log<T>(LogInfoChannel infoType, string logMessage, T fromClass = null) where T : DataDebugger => AppDataDebugger.Instance.Log(infoType, logMessage, fromClass);

            public void Log(LogInfoChannel infoType, string logMessage, string fromClassName = null) => AppDataDebugger.Instance.Log(infoType, logMessage, fromClassName);

            #endregion

            #region Info

            public void LogInfo<T>(string logMessage, T fromClass = null) where T : DataDebugger => AppDataDebugger.Instance.LogInfo(logMessage, fromClass);
            public void LogInfo(string logMessage, string fromClassName = null) => AppDataDebugger.Instance.LogInfo(logMessage, fromClassName);

            #endregion

            #region Success

            public void LogSuccess<T>(string logMessage, T fromClass = null) where T : DataDebugger => AppDataDebugger.Instance.LogSuccess(logMessage, fromClass);
            public void LogSuccess(string logMessage, string fromClassName = null) => AppDataDebugger.Instance.LogSuccess(logMessage, fromClassName);

            #endregion

            #region Warnings

            public void LogWarning<T>(string logMessage, T fromClass = null) where T : DataDebugger => AppDataDebugger.Instance.LogWarning(logMessage, fromClass);
            public void LogWarning(string logMessage, string fromClassName = null) => AppDataDebugger.Instance.LogWarning(logMessage, fromClassName);

            #endregion

            #region Errors

            public void LogError<T>(string logMessage, T fromClass = null) where T : DataDebugger => AppDataDebugger.Instance.LogError(logMessage, fromClass);
            public void LogError(string logMessage, string fromClassName = null)  => AppDataDebugger.Instance.LogError(logMessage, fromClassName);

            #endregion

            #endregion

            #endregion
        }

        #endregion

        #region Encription

        [Serializable]
        public class EncrptionObject
        {
            #region Components

            public string key;
            public string data;

            #endregion

            #region Main

            #region Constructors

            public EncrptionObject()
            {

            }

            public EncrptionObject(string key, string data)
            {
                this.key = key;
                this.data = data;
            }

            #endregion

            #region Data Setters

            public void SetKey(string key) => this.key = key;
            public void SetData(string data) => this.data = data;

            #endregion

            #region Data Getters

            public string GetKey() => key;
            public string GetData() => data;

            #endregion

            #endregion
        }

        #endregion

        #region Static Classess

        public class DeviceInfo
        {
            #region Components

            public string deviceName;
            public string deviceModel;
            public string deviceID;

            public BatteryStatus batteryStatus;

            public DeviceType deviceType;

            public string operatingSystem;

            public int deviceMemorySize;

            #endregion

            #region Main

            #region Constructors

            public DeviceInfo()
            {

            }

            public DeviceInfo(string deviceName, string deviceModel, string deviceID, string operatingSystem = null, int deviceMemorySize = 0)
            {
                this.deviceName = deviceName;
                this.deviceModel = deviceModel;
                this.deviceID = deviceID;
                this.operatingSystem = operatingSystem;
                this.deviceMemorySize = deviceMemorySize;
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class MeshProperties
        {
            #region Components

            public MeshFilter filter;
            public MeshRenderer renderer;

            #endregion

            #region Constructors

            public MeshProperties()
            {

            }

            public MeshProperties(MeshFilter filter, MeshRenderer renderer)
            {
                this.filter = filter;
                this.renderer = renderer;
            }

            #endregion

            #region Main

            #region Data Setters

            public void SetFilter(MeshFilter filter) => this.filter = filter;
            public void SetRenderer(MeshRenderer renderer) => this.renderer = renderer;

            #endregion

            #region Data Getters

            public MeshFilter GetFilter() => filter;
            public MeshRenderer GetRenderer() => renderer;

            #endregion

            #endregion
        }

        [Serializable]
        public class MaterialInfo
        {
            #region Components

            [Space(5)]
            public string name;

            [Space(5)]
            public string shaderName;

            [Space(5)]
            public Color color;

            [Space(5)]
            public byte[] mainTexture;

            [Space(5)]
            public VectorData textureOffset;

            #endregion
        }

        [Serializable]
        public class MeshInfo
        {
            #region Components

            public string name;

            [Space(5)]
            public Mesh mesh;

            [Space(5)]
            public List<Material> materials;

            [Space(5)]
            public int index;

            [Space(5)]
            public string parentName;

            #endregion

            #region Main

            #region Constructors

            public MeshInfo()
            {

            }

            public MeshInfo(string name, Mesh mesh, List<Material> materials, int index = 0, string parentName = null)
            {
                this.name = name;
                this.mesh = mesh;
                this.materials = materials;
                this.index = index;
                this.parentName = parentName;
            }

            #endregion

            #endregion
        }

        #region Unity Jobs

        [BurstCompile]
        public struct Vector2ArrayToStringJob : IJob
        {
            [ReadOnly]
            public NativeArray<Vector2> vectorNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<byte> results;

            public void Execute()
            {
                StringBuilder stringBuilder = new StringBuilder();

                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());

                for (int i = 0; i < vectorNativeArray.Length; i++)
                    stringBuilder.Append(vectorNativeArray[i].x).Append(" ").Append(vectorNativeArray[i].y).Append(seperator);

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                var stringBytesArray = Encoding.UTF8.GetBytes(stringBuilder.ToString());

                for (int i = 0; i < stringBytesArray.Length; i++)
                    results.Add(stringBytesArray[i]);
            }
        }

        [BurstCompile]
        public struct StringToVector2ArrayJob : IJob
        {
            [ReadOnly]
            public NativeArray<byte> byteNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<Vector2> results;

            public void Execute()
            {
                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());
                var bytesToStringResults = Encoding.UTF8.GetString(byteNativeArray.ToArray());

                var arrayData = bytesToStringResults.Split(seperator);

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector2(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]));
                        results.Add(vector);
                    }
                }
            }
        }

        [BurstCompile]
        public struct Vector3ArrayToStringJob : IJob
        {    
            [ReadOnly]
            public NativeArray<Vector3> vectorNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<byte> results;

            public void Execute()
            {
                StringBuilder stringBuilder = new StringBuilder();

                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());

                for (int i = 0; i < vectorNativeArray.Length; i++)
                    stringBuilder.Append(vectorNativeArray[i].x).Append(" ").Append(vectorNativeArray[i].y).Append(" ").Append(vectorNativeArray[i].z).Append(seperator);

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                var stringBytesArray = Encoding.UTF8.GetBytes(stringBuilder.ToString());

                for (int i = 0; i < stringBytesArray.Length; i++)
                    results.Add(stringBytesArray[i]);
            }
        }

        [BurstCompile]
        public struct StringToVector3ArrayJob : IJob
        {
            [ReadOnly]
            public NativeArray<byte> byteNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<Vector3> results;

            public void Execute()
            {
                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());
                var bytesToStringResults = Encoding.UTF8.GetString(byteNativeArray.ToArray());

                var arrayData = bytesToStringResults.Split(seperator);

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector3(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]));
                        results.Add(vector);
                    }
                }
            }
        }

        [BurstCompile]
        public struct Vector4ArrayToStringJob : IJob
        {
            [ReadOnly]
            public NativeArray<Vector4> vectorNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<byte> results;

            public void Execute()
            {
                StringBuilder stringBuilder = new StringBuilder();

                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());

                for (int i = 0; i < vectorNativeArray.Length; i++)
                    stringBuilder.Append(vectorNativeArray[i].x).Append(" ").Append(vectorNativeArray[i].y).Append(" ").Append(vectorNativeArray[i].z).Append(" ").Append(vectorNativeArray[i].w).Append(seperator);

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);

                var stringBytesArray = Encoding.UTF8.GetBytes(stringBuilder.ToString());

                for (int i = 0; i < stringBytesArray.Length; i++)
                    results.Add(stringBytesArray[i]);
            }
        }

        [BurstCompile]
        public struct StringToVector4ArrayJob : IJob
        {
            [ReadOnly]
            public NativeArray<byte> byteNativeArray;

            [ReadOnly]
            public NativeArray<byte> splitStringNativeArray;

            public NativeList<Vector4> results;

            public void Execute()
            {
                var seperator = Encoding.UTF8.GetString(splitStringNativeArray.ToArray());
                var bytesToStringResults = Encoding.UTF8.GetString(byteNativeArray.ToArray());

                var arrayData = bytesToStringResults.Split(seperator);

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector4(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]), float.Parse(vectorSplit[3]));
                        results.Add(vector);
                    }
                }
            }
        }

        [BurstCompile]
        public struct IntArrayToStringJob : IJob
        {
            [ReadOnly]
            public NativeArray<int> vectorNativeArray;

            public NativeList<byte> results;

            public void Execute()
            {
                StringBuilder stringBuilder = new StringBuilder();

                for (int i = 0; i < vectorNativeArray.Length; i++)
                    stringBuilder.Append(vectorNativeArray[i]).Append(" ");

                if (stringBuilder.Length > 0)
                    stringBuilder.Remove(stringBuilder.Length - 1, 1);

                var stringBytesArray = Encoding.UTF8.GetBytes(stringBuilder.ToString());

                for (int i = 0; i < stringBytesArray.Length; i++)
                    results.Add(stringBytesArray[i]);
            }
        }

        [BurstCompile]
        public struct StringToIntArrayJob : IJob
        {
            [ReadOnly]
            public NativeArray<byte> byteNativeArray;

            public NativeList<int> results;

            public void Execute()
            {
                var bytesToStringResults = Encoding.UTF8.GetString(byteNativeArray.ToArray());

                var arrayData = bytesToStringResults.Split(" ");

                if (arrayData != null && arrayData.Length > 0)
                {
                    var intArray = new int[arrayData.Length];

                    if (arrayData != null && arrayData.Length > 0)
                        for (int i = 0; i < arrayData.Length; i++)
                            results.Add(int.Parse(arrayData[i]));
                }
            }
        }

        #endregion

        #region Managed Objects

        public struct ManagedObjectReference<T> where T : class
        {
            #region Components

            public readonly int id;

            #endregion

            #region Constructors

            public ManagedObjectReference(int id) => this.id = id;

            #endregion
        }

        public class ManagedObject
        {
            #region Components

            int nextID;
            readonly Dictionary<int, object> objects;

            #endregion

            #region Constructors

            public ManagedObject(int initialCapacity = 1000)
            {
                nextID = 1;
                objects = new Dictionary<int, object>(initialCapacity);
            }

            #endregion

            #region Main

            public ManagedObjectReference<T> Add<T>(T objectReference)where T: class
            {
                int id = nextID;
                nextID++;
                objects[id] = objectReference;
                return new ManagedObjectReference<T>(id);
            }

            public T Get<T>(ManagedObjectReference<T> managedObject) where T : class => (T)objects[managedObject.id];

            public void Remove<T>(ManagedObjectReference<T> managedObject) where T : class => objects.Remove(managedObject.id);

            #endregion
        }

        public struct ManagedStringObject
        {
            #region Comopents

            public byte[] stringArray;

            public object stringValue;

            #endregion

            #region Main

            public void SetStringArray(object stringValue) => stringArray = Encoding.UTF8.GetBytes((string)stringValue);
            public void SetStringArray(byte[] stringArray) => stringValue = Encoding.UTF8.GetString(stringArray);

            public byte[] GetStringArray() => stringArray;
            public byte[] GetStringArray(object stringValue) => Encoding.UTF8.GetBytes((string)stringValue);

            public object GetStringValue() => (string)stringValue;
            public object GetStringValue(byte[] stringArray) => (object)Encoding.UTF8.GetString(stringArray);

            #endregion
        }

        #endregion

        public static class Helpers
        {
            public static DeviceInfo GetDeviceInfo()
            {
                return new DeviceInfo
                {
                    deviceName = SystemInfo.deviceName,
                    deviceModel = SystemInfo.deviceModel,
                    deviceID = SystemInfo.deviceUniqueIdentifier,
                    batteryStatus = SystemInfo.batteryStatus,
                    deviceType = SystemInfo.deviceType,
                    operatingSystem = SystemInfo.operatingSystem,
                    deviceMemorySize = SystemInfo.systemMemorySize
                };
            }

            public static WaitForSeconds GetWaitForSeconds(float seconds)
            {
                return new WaitForSeconds(seconds);
            }

            public static Vector2 GetScreenToWorldPosition(Vector2 screenPoint, Camera eventCamera)
            {
                return eventCamera.ScreenToWorldPoint(screenPoint);
            }

            public static Vector2 GetWorldToScreenPosition(Vector3 worldPosition, Camera eventCamera)
            {
                return eventCamera.WorldToScreenPoint(worldPosition);
            }

            public static Sprite Texture2DToSprite(Texture2D texture)
            {
                Rect newRect = new Rect(Vector2.zero, new Vector2(texture.width, texture.height));
                return Sprite.Create(texture, newRect, Vector2.zero);
            }

            public enum ImageEncoderType
            {
                JPG,
                EXR,
                TGA,
                PNG,
            }

            public static byte[] ImageToBytesArray(Sprite source, ImageEncoderType encoderType)
            {
                if(encoderType == ImageEncoderType.JPG)
                    return source.texture.EncodeToJPG();

                if (encoderType == ImageEncoderType.PNG)
                    return source.texture.EncodeToPNG();

                if (encoderType == ImageEncoderType.TGA)
                    return source.texture.EncodeToTGA();

                if (encoderType == ImageEncoderType.EXR)
                    return source.texture.EncodeToTGA();

                return null;
            }

            public static Sprite BytesArrayToSprite(byte[] source, int minWidth, int minHeight) => Sprite.Create(BytesArrayToTexture2D(source, minWidth, minHeight), new Rect(Vector2.zero, new Vector2(minWidth, minHeight)), Vector2.zero);

            public static byte[] ImageToBytesArray(Texture2D source, ImageEncoderType encoderType)
            {
                if (source != null)
                {
                    var texture = new Texture2D(source.width, source.height, TextureFormat.RGBA32, false);
                    texture.SetPixels(0, 0, source.width, source.height, source.GetPixels());

                    if (encoderType == ImageEncoderType.JPG)
                        return texture.EncodeToJPG();

                    if (encoderType == ImageEncoderType.PNG)
                        return texture.EncodeToPNG();

                    if (encoderType == ImageEncoderType.TGA)
                        return texture.EncodeToTGA();

                    if (encoderType == ImageEncoderType.EXR)
                        return texture.EncodeToTGA();
                }
                else
                    throw new NullReferenceException("Image To Byte Array Conversion Failed - Texture Is Not Assigned");

                return null;
            }

            public static Texture2D BytesArrayToTexture2D(byte[] source, int width, int height)
            {
                var texture2D = new Texture2D(width, height, TextureFormat.RGBA32, false);
                texture2D.LoadImage(source, false);
                texture2D.Apply();

                return texture2D;
            }

            public static float StringToFloat(string source) => float.Parse(source);
            public static int StringToInt(string source) => int.Parse(source);

            /// <summary>
            /// Returns A Position To Scroll To.
            /// </summary>
            /// <param name="value">Takes In The Scroller</param>
            /// <param name="childWidget">Takes In The Dynamic Content Container Child Widget.</param>
            /// <returns></returns>
            public static Vector2 GetScrollerSnapPosition(ScrollRect value, RectTransform childWidget)
            {
                Canvas.ForceUpdateCanvases();

                Vector2 viewPortPosition = value.viewport.localPosition;
                Vector2 childWidgetPosition = childWidget.localPosition;

                Vector2 position = new Vector2
                (
                    0 - (viewPortPosition.x + childWidgetPosition.x),
                    0 - (viewPortPosition.y + childWidgetPosition.y)
                );

                return position;
            }

            public static Vector2 GetScrollerSnapPosition(ScrollRect value, Vector2 snapPosition)
            {
                Canvas.ForceUpdateCanvases();

                Vector2 viewPortPosition = value.viewport.localPosition;

                Vector2 position = new Vector2
                (
                    0 - (viewPortPosition.x + snapPosition.x),
                    0 - (viewPortPosition.y + snapPosition.y)
                );

                return position;
            }

            public static void ConvertNameToColor(string colorName, Action<CallbackData<Color>> callback)
            {
                CallbackData<Color> callbackResults = new CallbackData<Color>();

                System.Drawing.ColorConverter converter = new System.Drawing.ColorConverter();

                if (converter.IsValid(colorName))
                {
                    var color = (System.Drawing.Color)converter.ConvertFromString(colorName);
                    Color newColor = new Color(color.R, color.G, color.B, color.A);

                    callbackResults.result = "Success : Color Found.";
                    callbackResults.data = newColor;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Failed : Color Not Found.";
                    callbackResults.data = Color.clear;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static Color ConvertColorStringToColor(string colorString)
            {
                var colorStringSplit = colorString.Split(" ");

                return new Color(float.Parse(colorStringSplit[0]), float.Parse(colorStringSplit[1]), float.Parse(colorStringSplit[2]), float.Parse(colorStringSplit[3])); ;
            }

            public static Color ConvertNameToColor(string colorName)
            {
                System.Drawing.ColorConverter converter = new System.Drawing.ColorConverter();

                if (converter.IsValid(colorName))
                {
                    var color = (System.Drawing.Color)converter.ConvertFromString(colorName);
                    return new Color(color.R, color.G, color.B, color.A);
                }
                else
                {
                    Debug.LogWarning($"--> RG_Unity - Failed To ConvertNameToColor - Color : {colorName} Is Invalid.");
                    return Color.clear;
                }
            }

            public static Color BlendColors(string colorA, string colorB, float blendAmount)
            {
                Color color_A = ConvertNameToColor(colorA);
                Color color_B = ConvertNameToColor(colorB);

                float r = (color_A.r * blendAmount + color_B.r * (1 - blendAmount));
                float g = (color_A.g * blendAmount + color_B.g * (1 - blendAmount));
                float b = (color_A.b * blendAmount + color_B.b * (1 - blendAmount));

                return new Color(r, g, b, 1.0f);
            }

            public static Color BlendColors(List<string> colors)
            {
                float r = 0.0f;
                float g = 0.0f;
                float b = 0.0f;

                foreach (var color in colors)
                {
                    Color tempColor = ConvertNameToColor(color);

                    r += tempColor.r;
                    g += tempColor.g;
                    b += tempColor.b;
                }

                return new Color(r / colors.Count, g / colors.Count, b / colors.Count, 1.0f);
            }

            public static MaterialProperties GetMaterialProperties(GameObject asset, SceneAsset assetData)
            {
                if (asset == null)
                {
                    Debug.LogWarning("--> Failed To Get Mesh Info Because Scene Asset Is Null.");
                    return null;
                }

                List<MeshRenderer> renderers = new List<MeshRenderer>();
                MeshRenderer meshRenderer = asset.GetComponent<MeshRenderer>();
                MaterialProperties materialProperties = new MaterialProperties();

                if (meshRenderer)
                    renderers.Add(meshRenderer);
                else
                {
                    renderers = asset.GetComponentsInChildren<MeshRenderer>().ToList();
                }

                if (renderers.Count > 0)
                {
                    foreach (var renderer in renderers)
                    {
                        if (renderer.sharedMaterials.Length > 0)
                        {
                            foreach (var material in renderer.sharedMaterials)
                            {
                                materialProperties.mainTexturePath = assetData.GetAssetField(AssetFieldType.MainTexture).path;
                                materialProperties.normalMapTexturePath = assetData.GetAssetField(AssetFieldType.NormalMap).path;
                                materialProperties.aoMapTexturePath = assetData.GetAssetField(AssetFieldType.AmbientOcclusionMap).path;

                                materialProperties.glossiness = material.GetFloat("_Glossiness");
                                materialProperties.bumpScale = material.GetFloat("_BumpScale");
                                materialProperties.aoStrength = material.GetFloat("_OcclusionStrength");
                            }
                        }
                    }
                }
                else
                    Debug.LogWarning($"--> Failed To Get Mesh Renderer(s) From Game Object : {asset.name}");

                return materialProperties;
            }


            public static int GetRandomValue(int length) => UnityEngine.Random.Range(0, length - 1);


            public static MaterialProperties GetMaterialProperties(GameObject asset, int selectedMeshIndex)
            {
                List<MeshRenderer> renderers = new List<MeshRenderer>();
                MeshRenderer meshRenderer = asset.GetComponent<MeshRenderer>();
                MaterialProperties materialProperties = new MaterialProperties();

                if (meshRenderer)
                    renderers.Add(meshRenderer);
                else
                {
                    renderers = asset.GetComponentsInChildren<MeshRenderer>().ToList();
                }

                return materialProperties;
            }

            public static void ShowImage(SceneAsset asset, Image imageDisplayer)
            {
                if (imageDisplayer != null && asset.assetFields != null)
                {
                    if (FileIsValid(asset.GetAssetField(AssetFieldType.Thumbnail).path))
                    {
                        if (AppDatabaseManager.Instance != null)
                        {
                            if (AppDatabaseManager.Instance.GetAssetsLibrary().ImageAssetExists(asset.GetAssetField(AssetFieldType.Thumbnail).path))
                                imageDisplayer.sprite = AppDatabaseManager.Instance.GetAssetsLibrary().GetImageAsset(asset.GetAssetField(AssetFieldType.Thumbnail).path);
                            else
                            {
                                imageDisplayer.sprite = Texture2DToSprite(LoadTextureFile(asset.GetAssetField(AssetFieldType.Thumbnail).path));
                                AppDatabaseManager.Instance.GetAssetsLibrary().AddImageAsset(imageDisplayer.sprite, asset.GetAssetField(AssetFieldType.Thumbnail).path);
                            }
                        }
                        else
                            Debug.LogWarning("--> Assets Manager Not Yet Initialized.");
                    }
                    else
                    {
                        if (AppDatabaseManager.Instance != null)
                        {
                            if (imageDisplayer != null)
                                imageDisplayer.sprite = AppDatabaseManager.Instance.GetDefaultFallbackSceneAssetIcon();
                            else
                                Debug.LogWarning("--> Show Image Failed : Image Displayer Is Null.");

                        }
                        else
                            Debug.LogWarning("--> Assets Manager Not Yet Initialized.");
                    }
                }
                else
                {
                    if (AppDatabaseManager.Instance != null)
                    {
                        if (imageDisplayer != null)
                            imageDisplayer.sprite = AppDatabaseManager.Instance.GetDefaultFallbackSceneAssetIcon();
                        else
                            Debug.LogWarning("--> Show Image Failed : Image Displayer Is Null.");

                    }
                    else
                        Debug.LogWarning("--> Assets Manager Not Yet Initialized.");
                }
            }

            public static string GetColorGradientHexadecimal(Int32 numberOfSteps, Int32 step)
            {
                var r = 0.0;
                var g = 0.0;
                var b = 0.0;

                var h = (Double)step / numberOfSteps;
                var i = (Int32)(h * 6);
                var f = h * 6.0f - i;
                var q = 1 - f;

                switch (i % 6)
                {
                    case 0:

                        r = 1;
                        g = f;
                        b = 0;

                        break;

                    case 1:

                        r = q;
                        g = 1;
                        b = 0;

                        break;

                    case 2:

                        r = 0;
                        g = 1;
                        b = f;

                        break;

                    case 3:

                        r = 0;
                        g = q;
                        b = 1;

                        break;

                    case 4:

                        r = f;
                        g = 0;
                        b = 1;

                        break;

                    case 5:

                        r = 1;
                        g = 0;
                        b = q;

                        break;
                }

                return "#" + ((Int32)(r * 255)).ToString("X2") + ((Int32)(g * 255)).ToString("X2") + ((Int32)(b * 255)).ToString("X2");
            }

            #region Mesh Data

            #region Data To String

            public static Vector2[] StringArrayToVector2Array(string[] arrayData)
            {
                var vectorArray = new Vector2[arrayData.Length];

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector2(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]));
                        vectorArray[i] = vector;
                    }
                }

                return vectorArray;
            }


            public static Vector2[] StringToVector2ArrayJob(string source, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);
                var arrayData = Encoding.UTF8.GetBytes(source);

                var stringToVectorArrayJob = new StringToVector2ArrayJob()
                {
                    byteNativeArray = new NativeArray<byte>(arrayData, Allocator.Persistent),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.Persistent),
                    results = new NativeList<Vector2>(Allocator.Persistent)
                };

                var vectorStringJobHandle = stringToVectorArrayJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = stringToVectorArrayJob.results.ToArray();

                stringToVectorArrayJob.byteNativeArray.Dispose();
                stringToVectorArrayJob.splitStringNativeArray.Dispose();
                stringToVectorArrayJob.results.Dispose();

                return results;
            }

            public static Vector3[] StringArrayToVector3Array(string[] arrayData)
            {
                var vectorArray = new Vector3[arrayData.Length];

                if(arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector3(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]));
                        vectorArray[i] = vector;
                    }
                }

                return vectorArray;
            }

            public static Vector3[] StringToVector3ArrayJob(string source, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);
                var arrayData = Encoding.UTF8.GetBytes(source);

                var stringToVectorArrayJob = new StringToVector3ArrayJob()
                {
                    byteNativeArray = new NativeArray<byte>(arrayData, Allocator.Persistent),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.Persistent),
                    results = new NativeList<Vector3>(Allocator.Persistent)
                };

                var vectorStringJobHandle = stringToVectorArrayJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = stringToVectorArrayJob.results.ToArray();

                stringToVectorArrayJob.byteNativeArray.Dispose();
                stringToVectorArrayJob.splitStringNativeArray.Dispose();
                stringToVectorArrayJob.results.Dispose();

                return results;
            }

            public static Vector4[] StringArrayToVector4Array(string[] arrayData)
            {
                var vectorArray = new Vector4[arrayData.Length];

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                    {
                        var vectorSplit = arrayData[i].Split(" ");
                        var vector = new Vector4(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]), float.Parse(vectorSplit[3]));
                        vectorArray[i] = vector;
                    }
                }

                return vectorArray;
            }

            public static Vector4[] StringToVector4ArrayJob(string source, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);
                var arrayData = Encoding.UTF8.GetBytes(source);

                var stringToVectorArrayJob = new StringToVector4ArrayJob()
                {
                    byteNativeArray = new NativeArray<byte>(arrayData, Allocator.Persistent),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.Persistent),
                    results = new NativeList<Vector4>(Allocator.Persistent)
                };

                var vectorStringJobHandle = stringToVectorArrayJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = stringToVectorArrayJob.results.ToArray();

                stringToVectorArrayJob.byteNativeArray.Dispose();
                stringToVectorArrayJob.splitStringNativeArray.Dispose();
                stringToVectorArrayJob.results.Dispose();

                return results;
            }

            public static int[] StringArrayToIntArray(string[] arrayData)
            {
                var intArray = new int[arrayData.Length];

                if (arrayData != null && arrayData.Length > 0)
                    for (int i = 0; i < arrayData.Length; i++)
                        intArray[i] = int.Parse(arrayData[i]);

                return intArray;
            }

            public static int[] StringToIntArrayJob(string source)
            {
                var arrayData = Encoding.UTF8.GetBytes(source);

                var stringToVectorArrayJob = new StringToIntArrayJob()
                {
                    byteNativeArray = new NativeArray<byte>(arrayData, Allocator.Persistent),
                    results = new NativeList<int>(Allocator.Persistent)
                };

                var vectorStringJobHandle = stringToVectorArrayJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = stringToVectorArrayJob.results.ToArray();

                stringToVectorArrayJob.byteNativeArray.Dispose();
                stringToVectorArrayJob.results.Dispose();

                return results;
            }

            public static string Vector2ArrayToString(Vector2[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 2 Array To String Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static async Task<string> Vector2ArrayToStringAsync(Vector2[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    await Task.Yield();

                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 2 Array To String Async Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string Vector2ToString(Vector2 data, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();
                return stringBuilder.Append(data.x).Append(seperator).Append(data.y).ToString();
            }

            public static Vector2 StringToVector2(string data, string seperator)
            {
                var vectorSplit = data.Split(seperator);
                return new Vector2(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]));
            }

            public static string Vector3ArrayToString(Vector3[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(" ").Append(arrayData[i].z).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 3 Array To String Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string Vector2ArrayToStringJob(Vector2[] arrayData, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);

                var vectorStringJob = new Vector2ArrayToStringJob()
                {
                    vectorNativeArray = new NativeArray<Vector2>(arrayData, Allocator.TempJob),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.TempJob),
                    results = new NativeList<byte>(Allocator.TempJob)
                };

                var vectorStringJobHandle = vectorStringJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = Encoding.UTF8.GetString(vectorStringJob.results.ToArray());

                vectorStringJob.vectorNativeArray.Dispose();
                vectorStringJob.splitStringNativeArray.Dispose();
                vectorStringJob.results.Dispose();

                return results;
            }

            public static string Vector3ArrayToStringJob(Vector3[] arrayData, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);

                var vectorStringJob = new Vector3ArrayToStringJob()
                {
                    vectorNativeArray = new NativeArray<Vector3>(arrayData, Allocator.TempJob),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.TempJob),
                    results = new NativeList<byte>(Allocator.TempJob)
                };

                var vectorStringJobHandle = vectorStringJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = Encoding.UTF8.GetString(vectorStringJob.results.ToArray());

                vectorStringJob.vectorNativeArray.Dispose();
                vectorStringJob.splitStringNativeArray.Dispose();
                vectorStringJob.results.Dispose();

                return results;
            }

            public static string Vector4ArrayToStringJob(Vector4[] arrayData, string seperator)
            {
                var splitStringArray = Encoding.UTF8.GetBytes(seperator);

                var vectorStringJob = new Vector4ArrayToStringJob()
                {
                    vectorNativeArray = new NativeArray<Vector4>(arrayData, Allocator.TempJob),
                    splitStringNativeArray = new NativeArray<byte>(splitStringArray, Allocator.TempJob),
                    results = new NativeList<byte>(Allocator.TempJob)
                };

                var vectorStringJobHandle = vectorStringJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = Encoding.UTF8.GetString(vectorStringJob.results.ToArray());

                vectorStringJob.vectorNativeArray.Dispose();
                vectorStringJob.splitStringNativeArray.Dispose();
                vectorStringJob.results.Dispose();

                return results;
            }

            public static string Vector3ToString(Vector3 data, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();
                return stringBuilder.Append(data.x).Append(seperator).Append(data.y).Append(seperator).Append(data.z).ToString();
            }

            public static Vector3 StringToVector3(string data, string seperator)
            {
                var vectorSplit = data.Split(seperator);
                return new Vector3(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]));
            }

            public static async Task<string> Vector3ArrayToStringAsync(Vector3[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    await Task.Yield();

                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(" ").Append(arrayData[i].z).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 3 Array To String Async Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string Vector4ArrayToString(Vector4[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(" ").Append(arrayData[i].z).Append(" ").Append(arrayData[i].w).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 4 Array To String Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static async Task<string> Vector4ArrayToStringAsync(Vector4[] arrayData, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    await Task.Yield();

                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i].x).Append(" ").Append(arrayData[i].y).Append(" ").Append(arrayData[i].z).Append(" ").Append(arrayData[i].w).Append(seperator);

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - seperator.Length, seperator.Length);
                }
                else
                    throw new ArgumentException("Vector 4 Array To String Async Failed - Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string Vector4ToString(Vector4 data, string seperator)
            {
                StringBuilder stringBuilder = new StringBuilder();
                return stringBuilder.Append(data.x).Append(seperator).Append(data.y).Append(seperator).Append(data.z).Append(seperator).Append(data.w).ToString();
            }

            public static Vector4 StringToVector4(string data, string seperator)
            {
                var vectorSplit = data.Split(seperator);
                return new Vector4(float.Parse(vectorSplit[0]), float.Parse(vectorSplit[1]), float.Parse(vectorSplit[2]), float.Parse(vectorSplit[3]));
            }

            public static string IntArrayToString(int[] arrayData)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i]).Append(" ");

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - 1, 1);
                }
                else
                    throw new ArgumentException("Int Array To String Failed- Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string IntArrayToStringJob(int[] arrayData)
            {
                var vectorStringJob = new IntArrayToStringJob()
                {
                    vectorNativeArray = new NativeArray<int>(arrayData, Allocator.TempJob),
                    results = new NativeList<byte>(Allocator.TempJob)
                };

                var vectorStringJobHandle = vectorStringJob.Schedule();

                vectorStringJobHandle.Complete();

                var results = Encoding.UTF8.GetString(vectorStringJob.results.ToArray());

                vectorStringJob.vectorNativeArray.Dispose();
                vectorStringJob.results.Dispose();

                return results;
            }

            public static async Task<string> IntArrayToStringAsync(int[] arrayData)
            {
                StringBuilder stringBuilder = new StringBuilder();

                if (arrayData != null && arrayData.Length > 0)
                {
                    await Task.Yield();

                    for (int i = 0; i < arrayData.Length; i++)
                        stringBuilder.Append(arrayData[i]).Append(" ");

                    if (stringBuilder.Length > 0)
                        stringBuilder.Remove(stringBuilder.Length - 1, 1);
                }
                else
                    throw new ArgumentException("Int Array To String Async Failed- Array Data Is Null.");

                return stringBuilder.ToString();
            }

            public static string TransformToString(Transform source, string seperator)
            {
                StringBuilder transformDataStringBuilder = new StringBuilder();

                transformDataStringBuilder.Append(source.name).Append(seperator).Append(source.transform.localPosition.ToStringVector()).Append(seperator).Append(source.localScale.ToStringVector()).Append(seperator).Append(source.localEulerAngles.ToStringVector());

                return transformDataStringBuilder.ToString();
            }

            public static (string name, Vector3 localPosition, Vector3 localScale, Vector3 localEularAngles) StringToTransformInfo(string source, string seperator)
            {
                var dataArray = source.Split(seperator);

                if (dataArray != null && dataArray.Length > 0)
                {
                    var name = dataArray[0];
                    var position = dataArray[1].ToVector3();
                    var scale = dataArray[2].ToVector3();
                    var eular = dataArray[3].ToVector3();

                    return (name, position, scale, eular);
                }
                else
                    throw new ArgumentException("String To Transform Info Failed. String Data Is Null.");
            }

            #endregion

            #region String Compression

            public static byte[] CompressStringToBytesArray(string source)
            {
                var buffer = Encoding.UTF8.GetBytes(source);

                var memoryStream = new MemoryStream();

                using (var zip = new GZipStream(memoryStream, CompressionMode.Compress, true))
                {
                    zip.Write(buffer, 0, buffer.Length);
                    zip.Close();
                }

                memoryStream.Position = 0;

                var compressedData = new byte[memoryStream.Length];
                memoryStream.Read(compressedData, 0, compressedData.Length);

                var compressedDataZip = new byte[compressedData.Length + 4];

                Buffer.BlockCopy(compressedData, 0, compressedDataZip, 4, compressedData.Length);
                Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, compressedDataZip, 0, 4);

                memoryStream.Close();

                return compressedDataZip;
            }

            public static byte[] CompressByteArray(byte[] buffer)
            {
                var memoryStream = new MemoryStream();

                using (var zip = new GZipStream(memoryStream, CompressionMode.Compress, true))
                {
                    zip.Write(buffer, 0, buffer.Length);
                    zip.Close();
                }

                memoryStream.Position = 0;

                var compressedData = new byte[memoryStream.Length];
                memoryStream.Read(compressedData, 0, compressedData.Length);

                var compressedDataZip = new byte[compressedData.Length + 4];

                Buffer.BlockCopy(compressedData, 0, compressedDataZip, 4, compressedData.Length);
                Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, compressedDataZip, 0, 4);

                memoryStream.Close();

                return compressedDataZip;
            }

            public static string CompressStringToBase64String(string source)
            {
                byte[] buffer = Encoding.UTF8.GetBytes(source);
                var memoryStream = new MemoryStream();

                using (var zip = new GZipStream(memoryStream, CompressionMode.Compress, true))
                {
                    zip.Write(buffer, 0, buffer.Length);
                    zip.Close();
                }

                memoryStream.Position = 0;

                var compressedData = new byte[memoryStream.Length];
                memoryStream.Read(compressedData, 0, compressedData.Length);

                var compressedDataZip = new byte[compressedData.Length + 4];

                Buffer.BlockCopy(compressedData, 0, compressedDataZip, 4, compressedData.Length);
                Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, compressedDataZip, 0, 4);

                memoryStream.Close();

                return Convert.ToBase64String(compressedDataZip);
            }

            public static string UnCompressStringToBase64String(string source)
            {
                byte[] zippedBuffer = Convert.FromBase64String(source);
               
                using(var memoryStream = new MemoryStream())
                {
                    int dataLength = BitConverter.ToInt32(zippedBuffer, 0);
                    memoryStream.Write(zippedBuffer, 4, zippedBuffer.Length - 4);

                    var buffer = new byte[dataLength];

                    memoryStream.Position = 0;

                    using (var unzip = new GZipStream(memoryStream, CompressionMode.Decompress, true))
                    {
                        unzip.Read(buffer, 0, buffer.Length);
                        unzip.Close();
                    }

                    memoryStream.Close();

                    return Encoding.UTF8.GetString(buffer);
                }
            }

            public static byte[] UnCompressByteArray(byte[] zippedBuffer)
            {
                using (var memoryStream = new MemoryStream())
                {
                    int dataLength = BitConverter.ToInt32(zippedBuffer, 0);
                    memoryStream.Write(zippedBuffer, 4, zippedBuffer.Length - 4);

                    var buffer = new byte[dataLength];

                    memoryStream.Position = 0;

                    using (var unzip = new GZipStream(memoryStream, CompressionMode.Decompress, true))
                    {
                        unzip.Read(buffer, 0, buffer.Length);
                        unzip.Close();
                    }

                    memoryStream.Close();

                    return buffer;
                }
            }

            public static string UnCompressByteArrayToString(byte[] zippedBuffer)
            {
                using (var memoryStream = new MemoryStream())
                {
                    int dataLength = BitConverter.ToInt32(zippedBuffer, 0);
                    memoryStream.Write(zippedBuffer, 4, zippedBuffer.Length - 4);

                    var buffer = new byte[dataLength];

                    memoryStream.Position = 0;

                    using (var unzip = new GZipStream(memoryStream, CompressionMode.Decompress, true))
                    {
                        unzip.Read(buffer, 0, buffer.Length);
                        unzip.Close();
                    }

                    memoryStream.Close();

                    return Encoding.UTF8.GetString(buffer);
                }
            }

            public static string GetUnCompressedString(byte[] source) => CompressBytesArrayToString(source);

            public static string CompressBytesArrayToString(byte[] source)
            {
                if (source != null && source.Length > 0)
                {
                    using (var msi = new MemoryStream(source))
                    {
                        using (var mso = new MemoryStream())
                        {
                            using (var unzip = new GZipStream(msi, CompressionMode.Decompress))
                            {
                                CopyStringData(unzip, mso);
                            }

                            return Encoding.UTF8.GetString(mso.ToArray());
                        }
                    }
                }
                else
                {
                    Debug.LogError("Compress Byte Array To String Failed - Bytes Array Is Null Or Empty.");
                    return null;
                }
            }

            private static void CopyByteArrayData(Stream source, Stream target)
            {
                byte[] data = new byte[source.Length];

                int dataLength;
                
                while((dataLength = source.Read(data, 0, data.Length)) != 0)
                    target.Write(data, 0, dataLength);
            }

            private static void CopyStringData(Stream source, Stream target)
            {
                byte[] data = new byte[source.Length];

                int dataLength;

                while ((dataLength = source.Read(data, 0, data.Length)) != 0)
                    target.Write(data, 0, dataLength);
            }

            #endregion

            public static Mesh GetReadableMesh(Mesh unreadableMesh)
            {
                Mesh mesh = new Mesh();

                mesh.indexFormat = unreadableMesh.indexFormat;

                #region Vertices

                GraphicsBuffer verticesBuffer = unreadableMesh.GetVertexBuffer(0);
                int vertsCount = verticesBuffer.stride * verticesBuffer.count;
                byte[] data = new byte[vertsCount];
                verticesBuffer.GetData(data);

                mesh.SetVertexBufferParams(unreadableMesh.vertexCount, unreadableMesh.GetVertexAttributes());
                mesh.SetVertexBufferData(data, 0, 0, vertsCount);
                verticesBuffer.Release();

                #endregion

                #region Triangles

                mesh.subMeshCount = mesh.subMeshCount;
                GraphicsBuffer trianglesBuffer = unreadableMesh.GetIndexBuffer();
                int trianglesCount = trianglesBuffer.stride * trianglesBuffer.count;
                byte[] trianglesData = new byte[trianglesCount];
                trianglesBuffer.GetData(trianglesData);

                mesh.SetIndexBufferParams(trianglesBuffer.count, unreadableMesh.indexFormat);
                mesh.SetIndexBufferData(trianglesData, 0, 0, trianglesCount);
                trianglesBuffer.Release();

                #endregion

                #region Mesh Structure

                uint indexOffset = 0;

                for (int i = 0; i < mesh.subMeshCount; i++)
                {
                    uint subMeshCount = unreadableMesh.GetIndexCount(i);
                    mesh.SetSubMesh(i, new UnityEngine.Rendering.SubMeshDescriptor((int)indexOffset, (int)subMeshCount));
                    indexOffset += subMeshCount;
                }

                #endregion

                #region Recalculated Normals & Bounds

                mesh.RecalculateNormals();
                mesh.RecalculateBounds();

                #endregion

                return mesh;
            }

            public async static Task<CallbackDataArray<MeshProperties>> GetMeshPropertiesData(GameObject gameObject)
            {
                CallbackDataArray<MeshProperties> callbackResults = new CallbackDataArray<MeshProperties>();

                var meshPropertiesList = new List<MeshProperties>();

                if (gameObject.GetComponents<MeshFilter>().Length > 0)
                {
                    for (int i = 0; i < gameObject.GetComponents<MeshFilter>().Length; i++)
                    {
                        var meshProperties = new MeshProperties(gameObject.GetComponents<MeshFilter>()[i], gameObject.GetComponents<MeshRenderer>()[i]);
                        meshPropertiesList.Add(meshProperties);
                        await Task.Yield();
                    }
                }

                if (gameObject.GetComponentsInChildren<MeshFilter>().Length > 0)
                {
                    for (int i = 0; i < gameObject.GetComponentsInChildren<MeshFilter>().Length; i++)
                    {
                        var meshFilterObject = gameObject.GetComponentsInChildren<MeshFilter>()[i].gameObject;

                        var meshProperties = new MeshProperties(meshFilterObject.GetComponent<MeshFilter>(), meshFilterObject.GetComponent<MeshRenderer>());
                        meshPropertiesList.Add(meshProperties);
                        await Task.Yield();
                    }
                }

                if(meshPropertiesList.Count > 0)
                {
                    callbackResults.result = $"{meshPropertiesList.Count} Mesh Filters Found For Game Object : {gameObject.name}";
                    callbackResults.data = meshPropertiesList.ToArray();
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"There Were No Mesh Filters Found For Game Object : {gameObject.name}";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static async Task<CallbackData<Mesh>> GetCombinedMeshAsync(MeshFilter[] meshFilters)
            {
                CallbackData<Mesh> callbackResults = new CallbackData<Mesh>();

                if(meshFilters.Length > 0)
                {
                    Mesh combinedMesh = new Mesh();

                    CombineInstance[] meshInstances = new CombineInstance[meshFilters.Length];

                    for (int i = 0; i < meshFilters.Length; i++)
                    {
                        meshInstances[i].mesh = GetReadableMesh(meshFilters[i].sharedMesh);
                        meshInstances[i].transform = meshFilters[i].transform.localToWorldMatrix;
                        await Task.Yield();
                    }

                    combinedMesh.CombineMeshes(meshInstances);

                    if (combinedMesh != null && combinedMesh.vertexCount > 0)
                    {
                        callbackResults.result = $"Successfully Combined : {meshInstances.Length}.";
                        callbackResults.data = combinedMesh;
                        callbackResults.resultCode = SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Failed To Combine Meshes. Please Check Here.";
                        callbackResults.data = default;
                        callbackResults.resultCode = ErrorCode;
                    }
                }

                return callbackResults;
            }

            public static async Task<CallbackData<GameObject>> GetMeshDataAsync(string obj, string name = "New Content Object")
            {
                CallbackData<GameObject> callbackResults = new CallbackData<GameObject>();

                if (obj == null)
                {
                    callbackResults.result = $"There Is No Object Assigned To Convert To Mesh Data - Returning Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;

                    return callbackResults;
                }

                ModelMeshData content = new ModelMeshData();

                var meshDataFromStringResults = content.StringToMeshData(obj, "m|");

                callbackResults.SetResult(meshDataFromStringResults);

                if(callbackResults.Success())
                {
                    var meshData = new MeshData();
                    var getMeshTaskResults = await meshData.ConvertMeshDataToMesh(meshDataFromStringResults.data);

                    if (getMeshTaskResults != null)
                    {
                        GameObject loadedObj = new GameObject(name);

                        var filter = loadedObj.AddComponent<MeshFilter>();
                        var renderer = loadedObj.AddComponent<MeshRenderer>();

                        filter.mesh = getMeshTaskResults;

                        callbackResults.result = $"Mesh Loaded Successfully : {callbackResults.GetResult}";
                        callbackResults.data = loadedObj;
                    }
                    else
                    {
                        callbackResults.result = $"Mesh Failed To Load After : {callbackResults.GetResult}";
                        callbackResults.data = default;
                        callbackResults.resultCode = ErrorCode;
                    }
                }

                return callbackResults;
            }

            //public static async Task<CallbackData<MeshData>> GetMeshDataAsync(GameObject obj)
            //{
            //    CallbackData<MeshData> callbackResults = new CallbackData<MeshData>();

            //    if(obj == null)
            //    {
            //        callbackResults.result = $"There Is No Object Assigned To Convert Its Mesh To Serializable Mesh Data - Returning Null.";
            //        callbackResults.data = default;
            //        callbackResults.resultCode = ErrorCode;

            //        return callbackResults;
            //    }

            //    callbackResults.SetResult(GetMeshPropertiesData(obj));

            //    if(callbackResults.Success())
            //    {
            //        var meshDataTaskResults = await GetCombinedMeshAsync(GetMeshPropertiesData(obj).data);

            //        callbackResults.SetResult(meshDataTaskResults);

            //        if (callbackResults.Success())
            //        {
            //            Debug.Log(" ====================>>>>>>>>>>>> Begin Convertion.....");

            //            var serializableMeshData = new MeshData();
            //            var serializableMeshTaskResults = await serializableMeshData.ConvertToSerializableMeshDataAsync(meshDataTaskResults.data);

            //            Debug.Log($" ====================>>>>>>>>>>>> Mesh Generated Successfully.....");

            //            callbackResults.result = $"{obj.name} : Has Been Successfully Converted To Serializable Data.";
            //            callbackResults.data = serializableMeshTaskResults;
            //        }
            //    }

            //    return callbackResults;
            //}

            #endregion

            #region Sublist

            public static List<List<T>> CreateSubListData<T>(T[] source, int count) => AppDataExtensions.GetSubList(source.ToList(), count);
            public static List<List<T>> CreateSubListData<T>(List<T> source, int count) => AppDataExtensions.GetSubList(source, count);
            public static List<List<T>> CreateSubListData<T>(Queue<T> source, int count) => AppDataExtensions.GetSubList(source.ToList(), count);

            public static List<T> MergeSubListData<T>(List<List<T>> source)
            {
                var listData = new List<T>();

                for (int i = 0; i < source.Count; i++)
                    for (int j = 0; j < source[i].Count; j++)
                        listData.Add(source[i][j]);

                return listData;
            }

            #endregion

            #region Load Formatted Scene Asset Model 

            public static GameObject LoadSceneAssetModelFile(string path)
            {
                return new OBJLoader().Load(path);
            }

            public static GameObject LoadSceneAssetModelFile(string path, string mtlPath)
            {
                if (!string.IsNullOrEmpty(mtlPath))
                    return new OBJLoader().Load(path, mtlPath);

                return new OBJLoader().Load(path);
            }

            public static SceneObject LoadFormattedSceneAssetModel(string path, string mtlPath = null, bool addColliders = true)
            {
                Debug.Log("--> RG_Unity - Creating New Asset Model In Data");

                GameObject loadedAsset = null;

                SceneObject sceneObject = new SceneObject();

                if (!string.IsNullOrEmpty(mtlPath))
                    loadedAsset = new OBJLoader().Load(path, mtlPath);
                else
                    loadedAsset = new OBJLoader().Load(path);

                if (loadedAsset)
                {
                    if (addColliders)
                    {
                        List<MeshRenderer> assetObjectMeshRendererList = new List<MeshRenderer>();

                        if (loadedAsset.transform.childCount > 0)
                            assetObjectMeshRendererList = loadedAsset.GetComponentsInChildren<MeshRenderer>().ToList();

                        if (loadedAsset.GetComponent<MeshRenderer>())
                            assetObjectMeshRendererList.Add(loadedAsset.GetComponent<MeshRenderer>());

                        if (assetObjectMeshRendererList.Count > 0)
                        {
                            foreach (var renderer in assetObjectMeshRendererList)
                            {
                                renderer.gameObject.AddComponent<MeshCollider>();
                            }
                        }
                    }

                    sceneObject.value = loadedAsset;

                }
                else
                    Debug.LogWarning("--> Loaded Scene Asset Parent Not Assigned.");


                return sceneObject;
            }

            #endregion

            public static string GetElapsedTime(DateTimeComponent dateTime)
            {
                var timeSpan = new TimeSpan(DateTime.UtcNow.Ticks - dateTime.GetDateTime().Ticks);
                double delta = Math.Abs(timeSpan.TotalSeconds);

                if (delta < 1 * GetTimeFormat().minute)
                    return timeSpan.Seconds == 1? "1 second ago" : $"{timeSpan.Seconds} seconds ago";

                if (delta < 2 * GetTimeFormat().minute)
                    return "a minute ago";

                if (delta < 45 * GetTimeFormat().minute)
                     return $"{timeSpan.Minutes} minutes ago";

                if (delta < 90 * GetTimeFormat().minute)
                    return "an hour ago";

                if (delta < 24 * GetTimeFormat().hour)
                    return $"{timeSpan.Hours} hours ago";

                if (delta < 48 * GetTimeFormat().hour)
                    return "yesterday";

                if (delta < 30 * GetTimeFormat().day)
                    return $"{timeSpan.Days} days ago";

                if (delta < 12 * GetTimeFormat(). month)
                {
                    int months = Convert.ToInt32(Math.Floor((double)timeSpan.Days / 30));
                    return months <= 1 ? "a month ago" : $"{months} months ago";
                }
                else
                {
                    int years = Convert.ToInt32(Math.Floor((double)timeSpan.Days / 365));
                    return years <= 1 ? "a year ago" : $"{years} years ago";
                }
            }

            private static (int second, int minute, int hour, int day, int month) GetTimeFormat()
            {
                const int second = 1;
                const int minute = 60 * second;
                const int hour = 60 * minute;
                const int day = 24 * hour;
                const int month = 30 * day;

                return (second, minute, hour, day, month);
            }

            public static string GetTimeRemaining(DateTimeComponent start, DateTimeComponent end)
            {
                var timeSpan = new TimeSpan(start.dateTimeTick -end.dateTimeTick);
                double delta = Math.Abs(timeSpan.TotalSeconds);

                if (delta < 1 * GetTimeFormat().minute)
                    return timeSpan.Seconds == 1 ? "1 second remaining" : $"{timeSpan.Seconds} seconds remaining";

                if (delta < 2 * GetTimeFormat().minute)
                    return $"1 minute {timeSpan.Seconds} seconds remaining";

                if (delta < 45 * GetTimeFormat().minute)
                    return $"{timeSpan.Minutes} minutes remaining";

                if (delta < 90 * GetTimeFormat().minute)
                    return $"1 hour {timeSpan.Minutes} minutes remaining";

                if (delta < 24 * GetTimeFormat().hour)
                    return $"{timeSpan.Hours} hours {timeSpan.Minutes} minutes remaining";

                if (delta < 48 * GetTimeFormat().hour)
                    return $"1 day {timeSpan.Hours} hours remaining";

                if (delta < 30 * GetTimeFormat().day)
                    return $"{timeSpan.Days} days remaining";

                int months = Convert.ToInt32(Math.Floor((double)timeSpan.Days / 30));

                if (delta < 12 * GetTimeFormat().month)
                {
                    return months <= 1 ? $"1 month {timeSpan.Days} days remaining" : $"{months} months {timeSpan.Days} days remaining";
                }
                else
                {
                    int years = Convert.ToInt32(Math.Floor((double)timeSpan.Days / 365));
                    return years <= 1 ? $"1 year {months} months remaining" : $"{years} years {months} months remaining";
                }
            }

            public static string GenerateAppKey(int length = 4, string separator = " ")
            {
              
                var alphabets = GetAlphabets();

                List<string> segments = new List<string>();

                for (int i = 0; i < length; i++)
                {
                    int randomNumber_001 = UnityEngine.Random.Range(0, 9);
                    int randomNumber_002 = UnityEngine.Random.Range(0, 9);
                    int randomNumber_003 = UnityEngine.Random.Range(0, 9);

                    int randomAlphabetIndex_001 = UnityEngine.Random.Range(0, alphabets.Length - 1);
                    string randomAlphabet_001 = alphabets[randomAlphabetIndex_001];

                    segments.Add($"{randomNumber_001}{randomNumber_002}{randomAlphabet_001}{randomNumber_003}");
                }

                string key = "";

                if (segments.Count > 0)
                {
                    for (int i = 0; i < segments.Count; i++)
                    {
                        if (i < segments.Count - 1)
                            key += segments[i] + $"{separator}";
                        else
                            key += segments[i];
                    }
                }

                return key;
            }

            public static string GenerateUniqueIdentifier(int length = 1, string separator = "")
            {

                var alphabets = GetAlphabets();

                List<string> segments = new List<string>();

                for (int i = 0; i < length; i++)
                {
                    int randomNumber_001 = UnityEngine.Random.Range(0, 9);
                    int randomNumber_002 = UnityEngine.Random.Range(0, 9);
                    int randomNumber_003 = UnityEngine.Random.Range(0, 9);

                    int randomAlphabetIndex_001 = UnityEngine.Random.Range(0, alphabets.Length - 1);
                    string randomAlphabet_001 = alphabets[randomAlphabetIndex_001];

                    segments.Add($"{randomNumber_001}{randomNumber_002}{randomAlphabet_001}{randomNumber_003}");
                }

                string key = "";

                if (segments.Count > 0)
                {
                    for (int i = 0; i < segments.Count; i++)
                    {
                        if (i < segments.Count - 1)
                            key += segments[i] + $"{separator}";
                        else
                            key += segments[i];
                    }
                }

                return key;
            }

            public static string[] GetAlphabets() => new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
            public static string[] GetSymbol() => new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };


            #region Encryption & Decryption

            public static string GenerateEncriptionKey(int length = 2)
            {
                string key = "";

                for (int i = 0; i < length; i++)
                {
                    int randomSymbol_001 = UnityEngine.Random.Range(0, GetSymbol().Length - 1);
                    int randomSymbol_002 = UnityEngine.Random.Range(0, GetSymbol().Length - 1);

                    int randomAlphabet_001 = UnityEngine.Random.Range(0, GetAlphabets().Length - 1);
                    int randomAlphabet_002 = UnityEngine.Random.Range(0, GetAlphabets().Length - 1);
                    key += UnityEngine.Random.Range(1, 100) + GetSymbol()[randomSymbol_001] + GetAlphabets()[randomAlphabet_001] + GetAlphabets()[randomAlphabet_002] + GetSymbol()[randomSymbol_002];
                }

                return key;
            }

            public static CallbackData<string> Encrypt(EncrptionObject encrptionObject)
            {
                byte[] data = UTF8Encoding.UTF8.GetBytes(encrptionObject.data);

                using(MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
                {
                    byte[] key = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(encrptionObject.key));

                    using(TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider{Key = key, Mode = CipherMode.ECB, Padding = PaddingMode.PKCS7})
                    {
                        ICryptoTransform cryptoTransform = tripleDES.CreateEncryptor();
                        byte[] results = cryptoTransform.TransformFinalBlock(data, 0, data.Length);
                        return new CallbackData<string>(results: "Encrpted Data Successfully", resultsCode: SuccessCode, data: Convert.ToBase64String(results, 0, results.Length)); 
                    }
                }
            }

            public static CallbackData<string> Decrypt(EncrptionObject encrptionObject)
            {
                byte[] data = Convert.FromBase64String(encrptionObject.data);

                using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
                {
                    byte[] key = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(encrptionObject.key));

                    using (TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider { Key = key, Mode = CipherMode.ECB, Padding = PaddingMode.PKCS7 })
                    {
                        ICryptoTransform cryptoTransform = tripleDES.CreateEncryptor();
                        byte[] results = cryptoTransform.TransformFinalBlock(data, 0, data.Length);
                        return new CallbackData<string>(results: "Decrypted Data Successfully", resultsCode: SuccessCode, data: UTF8Encoding.UTF8.GetString(results));
                    }
                }
            }

            #endregion

            #region Importers

            static Vector3 GetImportedAssetPosition(Vector3 pos, Bounds assetBounds)
            {
                pos -= (assetBounds.center * 2);

                return pos;
            }

            static void OnImportedAssetSetupScale(Renderer assetRenderer, Transform assetTransform, float shrinkVectorScale, float defaultAssetImportScale, SceneAssetScaleDirection scaleDirection, Action<bool> callBack)
            {
                Vector3 scaleVect = new Vector3(shrinkVectorScale, shrinkVectorScale, shrinkVectorScale);

                switch (scaleDirection)
                {
                    case SceneAssetScaleDirection.Up:

                        assetTransform.localScale = Vector3.zero;

                        while (GetImportedAssetMaxExtent(assetRenderer.bounds) < defaultAssetImportScale)
                        {
                            assetTransform.localScale += scaleVect;
                        }

                        if (GetImportedAssetMaxExtent(assetRenderer.bounds) >= defaultAssetImportScale)
                        {
                            callBack.Invoke(true);
                        }
                        else
                        {
                            callBack.Invoke(false);
                        }

                        break;

                    case SceneAssetScaleDirection.Down:

                        assetTransform.localScale = Vector3.one;

                        while (GetImportedAssetMaxExtent(assetRenderer.bounds) > defaultAssetImportScale)
                        {
                            assetTransform.localScale -= scaleVect;
                        }

                        if (GetImportedAssetMaxExtent(assetRenderer.bounds) <= defaultAssetImportScale)
                        {
                            callBack.Invoke(true);
                        }
                        else
                        {
                            callBack.Invoke(false);
                        }

                        break;
                }
            }

            static SceneAssetScaleDirection GetImportedAssetScaleDirection(float assetScaleDirection, float defaultAssetImportScale)
            {
                SceneAssetScaleDirection scaleDirection = SceneAssetScaleDirection.None;

                if (assetScaleDirection > defaultAssetImportScale)
                {
                    scaleDirection = SceneAssetScaleDirection.Down;
                }

                if (assetScaleDirection < defaultAssetImportScale)
                {
                    scaleDirection = SceneAssetScaleDirection.Up;
                }

                return scaleDirection;
            }

            static float GetImportedAssetMaxExtent(Bounds assetBounds)
            {
                float[] extentsList = new float[] { assetBounds.extents.x, assetBounds.extents.y, assetBounds.extents.z };
                float assetMaxExtent = extentsList.Max();

                return assetMaxExtent;
            }

            #endregion

            public static bool FileIsValid(string path)
            {
                if (!string.IsNullOrEmpty(path))
                {
                    if (File.Exists(path))
                        return true;
                    else
                        return false;
                }
                else
                    return false;
            }

            public static bool IsComponentValid<T>(T component) where T : AppMonoBaseClass
            {
                return component != null;
            }

            public static void GetComponent<T>(T component, Action<CallbackData<T>> callback) where T : AppMonoBaseClass
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetValue(float value, Action<CallbackData<float>> callback, string callbackFailFallbackResults = null)
            {
                CallbackData<float> callbackResults = new CallbackData<float>();

                if (value > 0)
                {
                    callbackResults.result = $"Value Is Valid - The Assigned Value Is : {value}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = (callbackFailFallbackResults != null) ? callbackFailFallbackResults : "The Assigned Value Is Set To Default : 0.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetValue(int value, Action<CallbackData<int>> callback, string callbackFailFallbackResults = null)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if(value > 0)
                {
                    callbackResults.result = $"Value Is Valid - The Assigned Value Is : {value}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = (callbackFailFallbackResults != null)? callbackFailFallbackResults : "The Assigned Value Is Set To Default : 0.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void UIActionComponentValid<T, U, V>(T component, Action<Callback> callback) where T : UIInputComponent<UnityEngine.Object, U, V>
            {
                Callback callbackResults = new Callback();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #region Action Components

            public static void UIActionButtonComponentsValid<T>(List<T> components, Action<Callback> callback) where T : UIInputComponent<Button, ButtonDataPackets, UIButton<ButtonDataPackets>>
            {
                Callback callbackResults = new Callback();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = $"Found {components.Count} Valid Components.";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Components Are Not Valid - Not Found / Missing / Null.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void UIActionDropdownComponentValid<T>(T component, Action<Callback> callback) where T : UIInputComponent<TMP_Dropdown, DropdownDataPackets, UIDropDown<DropdownDataPackets>>
            {
                Callback callbackResults = new Callback();

                if (component != null)
                {
                    callbackResults.result = $"Components : {component.name} Is Valid.";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            //public static void UIActionInputFieldComponentValid<T>(T component, Action<Callback> callback) where T : UIInputComponent<InputField, InputFieldDataPackets, UIDropDown<InputFieldDataPackets>>
            //{
            //    Callback callbackResults = new Callback();

            //    if (component != null)
            //    {
            //        callbackResults.results = $"Components : {component.name} Is Valid.";
            //        callbackResults.resultsCode = SuccessCode;
            //    }
            //    else
            //    {
            //        callbackResults.results = "Component Is Not Valid - Not Found / Missing / Null.";
            //        callbackResults.resultsCode = ErrorCode;
            //    }

            //    callback.Invoke(callbackResults);
            //}

            public static void UIActionDropdownComponentsValid<T>(List<T> components, Action<Callback> callback) where T : UIInputComponent<TMP_Dropdown, DropdownDataPackets, UIDropDown<DropdownDataPackets>>
            {
                Callback callbackResults = new Callback();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = $"Found {components.Count} Valid Components.";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Components Are Not Valid - Not Found / Missing / Null.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #endregion

            public static void UnityComponentValid<T>(T component, string componentInfo, Action<CallbackData<T>> callback) where T : UnityEngine.Object
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {componentInfo} Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void UnityComponentsValid<T>(T[] components, string componentInfo, Action<CallbackDataArray<T>> callback) where T : UnityEngine.Object
            {
                CallbackDataArray<T> callbackResults = new CallbackDataArray<T>();

                if (components.Length > 0)
                {
                    callbackResults.result = $"Component : {componentInfo} Is Valid.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Components : {componentInfo} Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static CallbackData<T> UnityComponentValid<T>(T component, string componentInfo) where T : UnityEngine.Object
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {componentInfo} Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static void UnityComponentValid<T>(List<T> components, Action<CallbackDataList<T>> callback) where T : UnityEngine.Object
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = $"Component Is Valid - Has {components.Count} Content Assigned.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Could Be Null Or Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetAppComponentValid<T>(T component, string name = null, Action<CallbackData<T>> callback = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"Component : {name ?? "Name Unsassigned"} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"Component : {name ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            #region Has Contents

            public static bool HasContents<T>(List<T> componentList) => componentList.Count > 0;
            public static bool HasContents<T>(Queue<T> componentList) => componentList.Count > 0;
            public static bool HasContents<T>(Stack<T> componentList) => componentList.Count > 0;
            public static bool HasContents<T>(T[] componentArray) => componentArray.Length > 0;

            #endregion

            #region Has Content validation

            public static Callback ComponentHasContent<T>(List<T> contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has Component Validation Success - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check Has Component Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Contents Doesn't Contain Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static Callback ComponentHasContent<T>(T[] contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has Component Validation Success - Contents Array : {contentsIdentifier ?? "Contents Array Name Not Assigned"} With : {contents.Length} - Contents Is Valid And It Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check Has Component Validation Failed - Contents Array : {contentsIdentifier ?? "Contents Array Name Not Assigned"} With : {contents.Length} Contents Doesn't Contain Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static Callback ComponentHasContent<T>(Queue<T> contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has Component Validation Success - Contents Queue : {contentsIdentifier ?? "Contents Queue Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check Has Component Validation Failed - Contents Queue : {contentsIdentifier ?? "Contents Queue Name Not Assigned"} With : {contents.Count} Contents Doesn't Contain Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            #region Has No Content validation

            public static Callback ComponentDoesntHaveContent<T>(List<T> contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (!contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has No Component Validation Success - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Doesn't Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check  Has No Component Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Contents Already Contains Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static Callback ComponentDoesntHaveContent<T>(T[] contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (!contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has No Component Validation Success - Contents Array : {contentsIdentifier ?? "Componet Array Name Not Assigned"} With : {contents.Length} - Contents Is Valid And It Doesn't Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check Has No Component Validation Failed - Components Array : {contentsIdentifier ?? "Componet Array Name Not Assigned"} With : {contents.Length} Contents Already Contains Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static Callback ComponentDoesntHaveContent<T>(Queue<T> contents, T referencedContent, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (!contents.Contains(referencedContent))
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Check Has No Component Validation Success - Contents Queue : {contentsIdentifier ?? "Contents Queue Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Doesn't Contains Content Named : {contentIdentifier} As Expected";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Check Has No Component Validation Failed - Contents Queue : {contentsIdentifier ?? "Contents Queue Name Not Assigned"} With : {contents.Count} Contents Already Contains Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            #region Add Content To List

            public static Callback ComponentAddContent<T>(T referencedContent, List<T> contents, string contentsIdentifier = null, string contentIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (!contents.Contains(referencedContent))
                {
                    contents.Add(referencedContent);

                    if (contents.Contains(referencedContent))
                    {
                        callbackResults.result = successOperationFallbackResults ?? $"Check Has No Component Validation Success - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Doesn't Contains Content Named : {contentIdentifier} As Expected";
                        callbackResults.resultCode = SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = failedOperationFallbackResults ?? $"Added Content Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Couldn't Add Content For Some Reason - ID : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                        callbackResults.resultCode = ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Added Content Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Contents Already Contains Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static async Task<Callback> ComponentAddContentAsync<T>(T referencedContent, List<T> contents, string contentIdentifier = null, string contentsIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                Callback callbackResults = new Callback();

                if (!contents.Contains(referencedContent))
                {
                    contents.Add(referencedContent);

                    await Task.Delay(100);

                    if (contents.Contains(referencedContent))
                    {
                        callbackResults.result = successOperationFallbackResults ?? $"Check Has No Component Validation Success - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} - Contents Is Valid And It Doesn't Contains Content Named : {contentIdentifier} As Expected";
                        callbackResults.resultCode = SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = failedOperationFallbackResults ?? $"Added Content Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Couldn't Add Content For Some Reason - ID : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                        callbackResults.resultCode = ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = failedOperationFallbackResults ?? $"Added Content Validation Failed - Contents List : {contentsIdentifier ?? "Contents List Name Not Assigned"} With : {contents.Count} Contents Already Contains Content : {contentIdentifier ?? "Content Name Not Assigned"} And This Is Unexpected.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            #region Check Component Validation

            public static void GetAppComponentsValid<T>(List<T> components, string listIdentifier = null, Action<CallbackDataList<T>> callback = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"{components.Count} Components Are Assigned And Valid.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"There Are No Components Assigned. Param Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetAppComponentsValid<T>(T[] components, string listIdentifier = null, Action<CallbackDataArray<T>> callback = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                CallbackDataArray<T> callbackResults = new CallbackDataArray<T>();

                if (components != null && components.Length > 0)
                {
                    callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"{components.Length} Components Are Assigned And Valid.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"There Are No Components Assigned. Param Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetAppComponentsValid(List<AppComponent> components, string listIdentifier = null, Action<CallbackDataList<AppComponent>> callback = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackDataList<AppComponent> callbackResults = new CallbackDataList<AppComponent>();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"{components.Count} Components Are Assigned And Valid.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"There Are No Components Assigned. Param Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void GetAppComponentsValid<T>(Queue<T> queueComponent, string queueIdentifier = null, Action<CallbackDataQueue<T>> callback = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackDataQueue<T> callbackResults = new CallbackDataQueue<T>();

                if (queueComponent != null && queueComponent.Count > 0)
                {
                    callbackResults.result = successOperationFallbackResults ?? $"{queueComponent.Count} Components Are Assigned And Valid.";
                    callbackResults.data = queueComponent;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"There Are No Components Assigned. Param Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }


            public static CallbackDataList<T> GetAppComponentsValid<T>(List<T> components, string componentsIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null) where T : class
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (components != null)
                {
                    if (components.Count > 0)
                    {
                        callbackResults.result = successOperationFallbackResults ?? $"Component : {componentsIdentifier ?? "Name Unsassigned"} Is Valid.";
                        callbackResults.data = components;
                        callbackResults.resultCode = SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = "Component Is Not Null - There Are No Values Assigned - List Empty.";
                        callbackResults.data = default;
                        callbackResults.resultCode = WarningCode;
                    }
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"Component : {componentsIdentifier ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static CallbackDataArray<T> GetAppComponentsValid<T>(T[] components, string componentsIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackDataArray<T> callbackResults = new CallbackDataArray<T>();

                if (components != null && components.Length > 0)
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Component : {componentsIdentifier ?? "Name Unsassigned"} Is Valid.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"Component : {componentsIdentifier ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static CallbackDataQueue<T> GetAppComponentsValid<T>(Queue<T> queueComponent, string queueIdentifier = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackDataQueue<T> callbackResults = new CallbackDataQueue<T>();

                if (queueComponent != null && queueComponent.Count > 0)
                {
                    callbackResults.result = successOperationFallbackResults ?? $"Component : {queueIdentifier ?? "Name Unsassigned"} Is Valid.";
                    callbackResults.data = queueComponent;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"Component : {queueIdentifier ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static CallbackData<T> GetAppComponentValid<T>(T component, string name = null, string failedOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"Component : {name ?? "Name Unsassigned"} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    string results = (failedOperationFallbackResults != null) ? failedOperationFallbackResults : $"Component : {name ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null.";

                    callbackResults.result = results;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static CallbackData<T> GetAppComponentValid<T>(T component, string name = null) where T : class
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {name ?? "Name Unsassigned"} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {name ?? "Name Unsassigned"} Is Not Valid - Not Found / Missing / Null."; ;
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static Callback GetScreenDataPacketsValid(SceneDataPackets dataPackets, string name = null, string failedOperationFallbackResults = null, string warningOperationFallbackResults = null, string successOperationFallbackResults = null)
            {
                Callback callbackResults = new Callback();

                if(dataPackets != null)
                {
                    callbackResults.SetResult(dataPackets.GetReferencedScreenType());

                    if (callbackResults.Success())
                    {
                        if (dataPackets.GetReferencedScreenType().GetData().GetValue().GetData() != ScreenType.None)
                        {
                            callbackResults.result = (successOperationFallbackResults != null) ? successOperationFallbackResults : $"Get Screen Data Packets : {name ?? "Scene Data Packets Parameter Name Not Assigned"} For Screen Type : {dataPackets.referencedScreenType}.";
                            callbackResults.resultCode = SuccessCode;
                        }
                        else
                        {
                            callbackResults.result = (warningOperationFallbackResults != null) ? warningOperationFallbackResults : $"Get Screen Data Packets : {name ?? "Scene Data Packets Parameter Name Not Assigned"} Is Not Valid - Screen Of Type Is Set To Default : {dataPackets.referencedScreenType}.";
                            callbackResults.resultCode = WarningCode;
                        }
                    }
                }
                else
                {
                    callbackResults.result = (failedOperationFallbackResults != null)? failedOperationFallbackResults : $"Get Screen Data Packets : {name ?? "Scene Data Packets Parameter Name Not Assigned"} Is Not Valid - Screen Data Packets Is Null / Invalid / Not Assigned In The Function Call Parameter.";
                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            #endregion

            public static void ProjectDataComponentValid<T>(T component, Action<Callback> callback) where T : AppComponent
            {
                Callback callbackResults = new Callback();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Not Found / Missing / Null.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ProjectDataComponentValid<T>(List<T> components, Action<CallbackDataList<T>> callback) where T : AppComponent
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = $"Found : {components.Count} Valid Components";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Missing / Not Assigned In The Editor Inspector Panel.";
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ValueAssigned(int value, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (value > 0)
                {
                    callbackResults.result = $"Value Is Valid And Set to : {value}.";
                    callbackResults.data = value;
                   callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Value Is Not Assigned - Value Is Set To Zero.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ValueIsGraterThanReference(int value, int referenceValue, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (value > referenceValue)
                {
                    callbackResults.result = $"Value : {value} Is Valid And Is Greater Than  : {referenceValue}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Value : {value} Is Invalid - Value Is Less Than Reference : {referenceValue}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ValueIsEqualToReference(int value, int referenceValue, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (value == referenceValue)
                {
                    callbackResults.result = $"Value : {value} Is Valid And Is Equal To Reference  : {referenceValue}.";
                    callbackResults.data = value;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Value : {value} Is Not Equal To Reference : {referenceValue}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void ValueNotAssigned(int value, Action<CallbackData<int>> callback)
            {
                CallbackData<int> callbackResults = new CallbackData<int>();

                if (value == 0)
                {
                    callbackResults.result = $"Value Is Valid And Set To Zero.";
                    callbackResults.data = value;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Value Is Assigned - Value Is Set To {value}.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void StorageDataValidation(StorageDirectoryData storageData, Action<CallbackData<StorageDirectoryData>> callback)
            {
                CallbackData<StorageDirectoryData> callbackResults = new CallbackData<StorageDirectoryData>();

                GetAppComponentValid(storageData, "Storage Data", storageIsValidCallbackResults => 
                {
                    callbackResults.result = storageIsValidCallbackResults.result;
                    callbackResults.resultCode = storageIsValidCallbackResults.resultCode;

                    if(callbackResults.Success())
                    {
                        if (storageData.type != StorageType.None)
                        {
                            StringValueValid(nameIsValidCallbackResults =>
                            {
                                callbackResults.result = nameIsValidCallbackResults.result;
                                callbackResults.resultCode = nameIsValidCallbackResults.resultCode;

                                if (callbackResults.Success())
                                {
                                    StringValueValid(pathIsValidCallbackResults =>
                                    {
                                        callbackResults.result = pathIsValidCallbackResults.result;
                                        callbackResults.resultCode = pathIsValidCallbackResults.resultCode;

                                        if (callbackResults.Success())
                                        {
                                            StringValueValid(rootDirectoryIsValidCallbackResults =>
                                            {
                                                callbackResults.result = rootDirectoryIsValidCallbackResults.result;
                                                callbackResults.resultCode = rootDirectoryIsValidCallbackResults.resultCode;

                                                if (callbackResults.Success())
                                                {
                                                    if (storageData.type == StorageType.Project_Structure)
                                                    {
                                                        StringValueValid(rootDirectoryIsValidCallbackResults =>
                                                        {
                                                            callbackResults.result = rootDirectoryIsValidCallbackResults.result;
                                                            callbackResults.resultCode = rootDirectoryIsValidCallbackResults.resultCode;

                                                            if (callbackResults.Success())
                                                            {
                                                                callbackResults.result = $"Storage Data {storageData.name} Of Type : {storageData.type} Is Valid With Path : {storageData.path} At Directory {storageData.rootDirectory}. Please Note! - {storageData.name} Is A Structured Data With Project Directory : {storageData.projectDirectory}.";
                                                                callbackResults.data = storageData;
                                                            }
                                                            else
                                                            {
                                                                callbackResults.result = $"Storage Data : {storageData.name}'s Project Directory Missing / Not Found / Not Initialized-Assigned.";
                                                                callbackResults.resultCode = ErrorCode;
                                                            }

                                                        }, storageData.projectDirectory);
                                                    }
                                                    else
                                                    {
                                                        callbackResults.result = $"Storage Data {storageData.name} Of Type : {storageData.type} Is Valid With Path : {storageData.path} At Directory {storageData.rootDirectory}. Please Note! - {storageData.name} Is Not A Structured Data.";
                                                        callbackResults.data = storageData;
                                                    }
                                                }

                                            }, storageData.rootDirectory);
                                        }

                                    }, storageData.path);
                                }

                            }, storageData.name);
                        }
                        else
                        {
                            callbackResults.result = $"Storage Data : {storageData.name ?? "Storage Data Name Missing"} Is Not Valid : Storage Type Is Set To Default : None";
                            callbackResults.data = default;
                            callbackResults.resultCode = ErrorCode;
                        }
                    }

                }, "Storage Data Parameter Is Null - The Assigned Parameter Is Null.");

                callback.Invoke(callbackResults);
            }

            public static void StringValueValid(Action<CallbackDataArray<string>> callback, params string[] values)
            {
                CallbackDataArray<string> callbackResults = new CallbackDataArray<string>();

                if (values != null && values.Length > 0)
                {
                    for (int i = 0; i < values.Length; i++)
                    {
                        if(!string.IsNullOrEmpty(values[i]))
                            callbackResults.resultCode = SuccessCode;
                        else
                        {
                            callbackResults.result = $"Value At Index : {i} Is Not Valid.";
                            callbackResults.data = default;
                            callbackResults.resultCode = ErrorCode;

                            break;
                        }
                    }

                    if (callbackResults.Success())
                    {
                        callbackResults.result = $"{values.Length} Values Are Valid.";
                        callbackResults.data = values;
                    }
                }
                else
                {
                    callbackResults.result = "[Helpers] String Value Valid - There Are No Values Assigned To Validate.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void StringListValueValid(List<string> values, int hasRequiredAmount, Action<CallbackDataList<string>> callback)
            {
                CallbackDataList<string> callbackResults = new CallbackDataList<string>();

                if (values != null && values.Count >= hasRequiredAmount)
                {
                    callbackResults.result = $"Component Is Valid - And Has Required Amount Pf {values.Count} Contents.";
                    callbackResults.data = values;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Not Assigned Or Doesn't Have Required Amount Of Contents.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static List<T> GetList<T>(T[] values)
            {
                return values.ToList();
            }

            public static T[] GetArray<T>(List<T> values)
            {
                return values.ToArray();
            }

            public static Queue<T> GetQueue<T>(List<T> values)
            {
                Queue<T> queue = new Queue<T>();

                for (int i = 0; i < values.Count; i++)
                {
                    if (!queue.Contains(values[i]))
                        queue.Enqueue(values[i]);
                }

                return queue;
            }

            public static Queue<T> GetQueue<T>(T[] values)
            {
                Queue<T> queue = new Queue<T>();

                for (int i = 0; i < values.Length; i++)
                {
                    if (!queue.Contains(values[i]))
                        queue.Enqueue(values[i]);
                }

                return queue;
            }

            public static List<T> GetList<T>(Queue<T> values)
            {
                return values.ToList();
            }

            public static T[] GetArray<T>(Queue<T> values)
            {
                return values.ToArray();
            }

            public static void ComponentValid<T>(List<T> components, Action<CallbackDataList<T>> callback) where T : AppMonoBaseClass
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if(components != null && components.Count > 0)
                {
                    callbackResults.result = $"Component Is Valid - Has {components.Count} Content Assigned.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Could Be Null Or Empty.";
                    callbackResults.data = default;
                   callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void SerializableComponentValid<T>(List<T> components, Action<CallbackDataList<T>> callback) where T : SerializableData
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (components != null && components.Count > 0)
                {
                    callbackResults.result = $"Component Is Valid - Has {components.Count} Content Assigned.";
                    callbackResults.data = components;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Could Be Null Or Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static void SerializableComponentValid<T>(T component, Action<CallbackData<T>> callback) where T : SerializableData
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Is Not Valid - Could Be Null.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static Texture2D LoadTextureFile(string path)
            {
                return ImageLoader.LoadTexture(path);
            }

            public static List<string> GetEnumToStringList<T>()
            {
                return Enum.GetNames(typeof(T)).ToList();
            }

            public static T GetStringToEnum<T>(string value) where T : struct
            {
                T results;

                Enum.TryParse(value, out results);

                return results;
            }

            public static void GetStringToEnumData<T>(string value, Action<CallbackData<Enum>> callback) where T : struct
            {
                CallbackData<Enum> callbackResults = new CallbackData<Enum>();

                T results;

                if(Enum.TryParse(value,true, out results))
                {
                    var data = results as Enum;

                    if(data != null)
                    {
                        callbackResults.result = $"String : {value} Has Been Converted To Enum Of Type : {data}";
                        callbackResults.data = data;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Couldn't Converted String Value {value} To Enum Data.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Failed To Parse String : {value} To Enum Data.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                callback.Invoke(callbackResults);
            }

            public static string TrimStringValue(string value, int targetLength)
            {
                if (value.Length >= targetLength)
                {
                    char[] valueCharArray = new char[targetLength];

                    for (int i = 0; i < targetLength; i++)
                        valueCharArray[i] = value[i];

                    string newValue = new string(valueCharArray);

                    return newValue;
                }
                else
                    return value;
            }

            public static string GetFormattedDirectoryPath(string path)
            {
                return path.Replace("\\", "/");
            }

            #region Async Timers

            static int cachedApplicationFrameRates = 0;

            public static void CacheApplicationFrameRate(int fps) => cachedApplicationFrameRates = fps;

            public static int GetCachedApplicationFrameRate()
            {
                return cachedApplicationFrameRates;
            }

            public static async Task GetWaitForSecondAsync(int value = 100) => await Task.Delay(value);

            public static async Task GetWaitForSecondAsync(int value = 100, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                await Task.Delay(value);

                callbackResults.resultCode = SuccessCode;

                callback?.Invoke(callbackResults);
            }

            public static async Task GetWaitForEndOfFrameAsync() => await Task.Delay(GetCachedApplicationFrameRate());

            public static async Task GetWaitForSecondsAsync(int value) => await Task.Delay(value);

            public static int GetDeltaTime(int time)
            {
                return (int)Mathf.Abs(time * Time.deltaTime);
            }

            public static int ConvertSecondsFromFloatToMillisecondsInt(float seconds)
            {
                return Mathf.RoundToInt(seconds * 1000);
            }

            public static float ConvertMillisecondsFromIntToSecondsFloat(int milliSeconds)
            {
                return Mathf.Round(milliSeconds / 1000);
            }

            public static int GetFixedDeltaTime(int time)
            {
                return (int)Mathf.Abs(time * Time.fixedDeltaTime);
            }

            public static async Task GetWaitForEndOfFrameAsync(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback();

                await Task.Delay(GetCachedApplicationFrameRate());

                callbackResults.resultCode = SuccessCode;
                callback?.Invoke(callbackResults);
            }

            public static async Task GetWaitUntilAsync(bool action)
            {
                while(!action)
                {
                    await Task.Delay(100);
                }
            }

            #endregion

            #region Data Comparison

            public static bool CompareEnumValue<T>(T value_A, T value_B) where T : Enum
            {
                return value_A.Equals(value_B);
            }

            public static void CompareEnumTypeValue<T>(T value_A, T value_B, Action<Callback> callback) where T : Enum
            {
                Callback callbackResults = new Callback();

                if(value_A.Equals(value_B))
                {
                    callbackResults.result = $"Value_A Of Type : {value_A.GetType()} Is Equal To Value_B Of Type : {value_B.GetType()}";
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Value_A Of Type : {value_A.GetType()} Is Not Equal To Value_B Of Type : {value_B.GetType()}";
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static void ListComponentHasEqualDataSize<T, U>(List<T> valueA, List<U> valueB, Action<CallbackSizeDataTuple<T, U>> callback)
            {
                CallbackSizeDataTuple<T, U> callbackResults = new CallbackSizeDataTuple<T, U>();
;
                if (valueA != null && valueA.Count > 0)
                {
                    if (valueB != null && valueB.Count > 0)
                    {
                        string valueA_ID = valueA[0].GetType().ToString();
                        string valueB_ID = valueB[0].GetType().ToString();

                        if (valueA.Count.Equals(valueB.Count))
                        {
                            callbackResults.result = $"List Component Value_A Of ID Type : {valueA_ID} Is Equal To List Component Value_B Of ID Type : {valueB_ID} With : {valueA.Count} Item(s).";

                            callbackResults.tuple_A = valueA;
                            callbackResults.tuple_B = valueB;
                            callbackResults.size = valueA.Count;

                            callbackResults.resultCode = SuccessCode;
                        }
                        else
                        {
                            string greaterValue = (valueA.Count > valueB.Count) ? $"Value_A : {valueA_ID} Is Greater Than Value_B" : $"Value_B : {valueB_ID} Is Greater Than Value_A";

                            callbackResults.result = $"List Components Don't Have Equal Values : {greaterValue}. - Value_A : {valueA.Count} - Value B : {valueB.Count}";

                            callbackResults.tuple_A = default;
                            callbackResults.tuple_B = default;
                            callbackResults.size = default;

                            callbackResults.resultCode = ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "List Component Value_B Is Null / Empty.";

                        callbackResults.tuple_A = default;
                        callbackResults.tuple_B = default;
                        callbackResults.size = default;

                        callbackResults.resultCode = ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "List Component Value_A Is Null / Empty.";

                    callbackResults.tuple_A = default;
                    callbackResults.tuple_B = default;
                    callbackResults.size = default;

                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static CallbackSizeDataTuple<T, U> ListComponentHasEqualDataSize<T, U>(List<T> valueA, List<U> valueB)
            {
                CallbackSizeDataTuple<T, U> callbackResults = new CallbackSizeDataTuple<T, U>();
                ;
                if (valueA != null && valueA.Count > 0)
                {
                    if (valueB != null && valueB.Count > 0)
                    {
                        string valueA_ID = valueA[0].GetType().ToString();
                        string valueB_ID = valueB[0].GetType().ToString();

                        if (valueA.Count.Equals(valueB.Count))
                        {
                            callbackResults.result = $"List Component Value_A Of ID Type : {valueA_ID} Is Equal To List Component Value_B Of ID Type : {valueB_ID} With : {valueA.Count} Item(s).";

                            callbackResults.tuple_A = valueA;
                            callbackResults.tuple_B = valueB;
                            callbackResults.size = valueA.Count;

                            callbackResults.resultCode = SuccessCode;
                        }
                        else
                        {
                            string greaterValue = (valueA.Count > valueB.Count) ? $"Value_A : {valueA_ID} Is Greater Than Value_B" : $"Value_B : {valueB_ID} Is Greater Than Value_A";

                            callbackResults.result = $"List Components Don't Have Equal Values : {greaterValue}. - Value_A : {valueA.Count} - Value B : {valueB.Count}";

                            callbackResults.tuple_A = default;
                            callbackResults.tuple_B = default;
                            callbackResults.size = default;

                            callbackResults.resultCode = ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "List Component Value_B Is Null / Empty.";

                        callbackResults.tuple_A = default;
                        callbackResults.tuple_B = default;
                        callbackResults.size = default;

                        callbackResults.resultCode = ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "List Component Value_A Is Null / Empty.";

                    callbackResults.tuple_A = default;
                    callbackResults.tuple_B = default;
                    callbackResults.size = default;

                    callbackResults.resultCode = ErrorCode;
                }

                return callbackResults;
            }

            public static void ListComponentHasEqualDataSize<T>(List<T> valueA, List<T> valueB, Action<CallbackSizeDataTuple<T>> callback)
            {
                CallbackSizeDataTuple<T> callbackResults = new CallbackSizeDataTuple<T>();
;
                if (valueA != null && valueA.Count > 0)
                {
                    if (valueB != null && valueB.Count > 0)
                    {
                        string values_ID = valueA[0].GetType().ToString();

                        if (valueA.Count.Equals(valueB.Count))
                        {
                            callbackResults.result = $"List Component Value_A Of ID Type : {values_ID} Is Equal To List Component Value_B Of ID Type : {values_ID} With : {valueA.Count} Item(s).";

                            callbackResults.tuple_A = valueA;
                            callbackResults.tuple_B = valueB;
                            callbackResults.size = valueA.Count;

                            callbackResults.resultCode = SuccessCode;
                        }
                        else
                        {
                            string greaterValue = (valueA.Count > valueB.Count) ? $"Value_A : {values_ID} Is Greater Than Value_B" : $"Value_B : {values_ID} Is Greater Than Value_A";

                            callbackResults.result = $"List Components Don't Have Equal Values : {greaterValue}. - Value_A : {valueA.Count} - Value B : {valueB.Count}";

                            callbackResults.tuple_A = default;
                            callbackResults.tuple_B = default;
                            callbackResults.size = default;

                            callbackResults.resultCode = ErrorCode;
                        }
                    }
                    else
                    {
                        callbackResults.result = "List Component Value_B Is Null / Empty.";

                        callbackResults.tuple_A = default;
                        callbackResults.tuple_B = default;
                        callbackResults.size = default;

                        callbackResults.resultCode = ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = "List Component Value_A Is Null / Empty.";

                    callbackResults.tuple_A = default;
                    callbackResults.tuple_B = default;
                    callbackResults.size = default;

                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static void ListComponentHasData<T>(List<T> source, Action<CallbackDataList<T>> callback)
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (source != null && source.Count > 0)
                {
                    callbackResults.result = $"List Component Has {source.Count} Items.";
                    callbackResults.data = source;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "List Component Has No Data.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static bool ComponentIsNotNullOrEmpty<T>(T component)
            {
                return component != null;
            }

            public static void GetComponentsNotNullOrEmpty<T>(List<T> component, Action<CallbackDataList<T>> callback = null)
            {
                CallbackDataList<T> callbackResults = new CallbackDataList<T>();

                if (component != null && component.Count > 0)
                {
                    callbackResults.result = "Component Value Is Not Null Or Empty.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = "Component Value Is Null Or Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static void GetComponentIsNotNullOrEmpty<T>(T component, Action<CallbackData<T>> callback)
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if(component != null)
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Null / Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static bool IsNotNullOrEmpty<T>(T component) where T : AppMonoBaseClass
            {
                return component != null;
            }

            public static void GetIsNotNullOrEmpty<T>(T component, Action<CallbackData<T>> callback) where T : AppMonoBaseClass
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Null / Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            public static bool ObjectIsNotNullOrEmpty<T>(T component) where T : UnityEngine.Object
            {
                return component != null;
            }

            public static void GetObjectIsNotNullOrEmpty<T>(T component, Action<CallbackData<T>> callback) where T : UnityEngine.Object
            {
                CallbackData<T> callbackResults = new CallbackData<T>();

                if (component != null)
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Valid.";
                    callbackResults.data = component;
                    callbackResults.resultCode = SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Component : {component.GetType().Name} Is Null / Empty.";
                    callbackResults.data = default;
                    callbackResults.resultCode = ErrorCode;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #region Log Information 

            public static LogInfoChannel InfoCode { get { return LogInfoChannel.Debug; } }

            public static LogInfoChannel SuccessCode { get { return LogInfoChannel.Success; } }

            public static LogInfoChannel WarningCode { get { return LogInfoChannel.Warning; } }

            public static LogInfoChannel ErrorCode { get { return LogInfoChannel.Error; } }


            public static bool IsInfoCode(LogInfoChannel resultCode)
            {
                return resultCode == InfoCode;
            }

            public static bool IsSuccessCode(LogInfoChannel resultCode)
            {
                return resultCode == SuccessCode;
            }

            public static bool IsWarningCode(LogInfoChannel resultCode)
            {
                return resultCode == WarningCode;
            }


            public static bool IsErrorCode(LogInfoChannel resultCode)
            {
                return resultCode == ErrorCode;
            }

            #endregion
        }

        #endregion

        #region Interfaces

        public interface IDataPackets
        {
           
        }

        public interface ISceneDataPackets
        {
            #region Data Setters

            void SetReferencedWidgetType(WidgetType referencedWidgetType, Action<Callback> callback = null);
            void SetReferencedScreenType(ScreenType referencedScreenType, Action<Callback> callback = null);
            void SetReferencedUIScreenPlacementType(ScreenUIPlacementType referencedUIScreenPlacementType, Action<Callback> callback = null);

            #endregion

            #region Data Getters

            CallbackData<DataPacketEnum<WidgetType>> GetReferencedWidgetType();
            CallbackData<DataPacketEnum<ScreenType>> GetReferencedScreenType();
            CallbackData<DataPacketEnum<ScreenUIPlacementType>> GetReferencedUIScreenPlacementType();

            #endregion
        }

        /// <summary>
        /// Interface For UI Widgets.
        /// </summary>
        public interface IUIWidget
        {
            string GetName();

            CallbackData<ScreenUIData> GetParentWidget();
        }

        public interface IContainer
        {
            bool SelectableContent();
            CallbackData<UIScreenWidget> GetScreenContent(string contentName);
        }

        public interface IContainerBase
        {
            void Init();

            void Clear(bool showSpinner = false, Action<Callback> callback = null);

            string GetName();

            Task<Callback> ClearAsync(bool showSpinner = false);

            #region Data Setters

            void SetScreenType(ScreenType screenType);
            void SetContentContainerType(ContentContainerType containerType);
            void SetContainerViewSpaceType(ContainerViewSpaceType viewSpace);
            void SetScreenUIPlacementType(ScreenUIPlacementType screenViewUIPlacementType);
            void SetOrderInLayerType(OrderInLayerType orderInLayerType);

            #endregion

            #region Data Getters

            CallbackData<T> GetContainer<T>() where T : Transform;

            CallbackData<ContainerViewSpaceType> GetViewSpace();

            CallbackData<ContentContainerType> GetContainerType();

            CallbackData<ScreenUIPlacementType> GetScreenViewUIPlacementType();

            CallbackData<OrderInLayerType> GetOrderInLayerType();

            #endregion

            void UpdateContainer();

            Callback GetActive();

            CallbackData<DynamicContainerData> GetScreenViewDimensions();

            CallbackData<int> GetContentCount();

            CallbackData<bool> ContainerHasContent();

            CallbackData<int> GetLastContentIndex();

            bool IsContentActive(string contentName);

            bool IsContentActive(int contentID);

            void AddContent<T>(T content, bool keepWorldPosition = false, bool isActive = true, bool overrideContainerActiveState = false, bool updateContainer = false, Action<Callback> callback = null) where T : SelectableDynamicContent;
            void AddContent<T, U, V>(T uiScreenWidgetComponent, bool keepWorldPosition = false, bool isActive = true, bool overrideContainerActiveState = false, bool updateContainer = true, Action<Callback> callback = null) where T : UIScreenWidget<U, V> where U : Enum where V : Enum;
            Task<Callback> AddContentAsync<T>(T content, bool keepWorldPosition = false, bool isActive = true, bool overrideContainerActiveState = false, bool updateContainer = false) where T : SelectableDynamicContent;

            void SetContainerSize(Vector3 size, Action<Callback> callback = null);
            CallbackData<ScreenType> GetScreenType();
        }

        public interface IDebugger
        {
            #region Main

            void Log<T>(LogInfoChannel infoType, string logMessage, T fromClass) where T : DataDebugger;

            void LogInfo<T>(string logMessage, T fromClass) where T : DataDebugger;

            void LogSuccess<T>(string logMessage, T fromClass) where T : DataDebugger;

            void LogWarning<T>(string logMessage, T fromClass) where T : DataDebugger;

            void LogError<T>(string logMessage, T fromClass) where T : DataDebugger;

            #endregion
        }

        public interface IRestrictionData
        {
            #region Main

            AppRestrictionType GetAppRestrictionType();

            #endregion
        }

        public interface ISelectable
        {
            #region Selections

            void OnInputPointerDownEvent();

            void Initialize(Action<Callback> callback = null);

            void Select();
            void Deselect();

            void Expand();
            void Collapse();

            void SetSelectableInputUIState(InputUIState state);

            InputUIState GetInputUIState();

            #endregion
        }

        public interface IContent
        {
            #region Visibility

            void Show();
            void Hide();

            #endregion

            #region States

            bool GetActive();

            #endregion

            #region Interactability

            void Select();
            void Deselect();

            #endregion
        }

        public interface IUIScreenViewComponent
        {
            void SetName(string name);
            string GetName();

            CallbackData<Screen> GetValue();
        }

        public interface IScreenReferencedWidgetDependencyAssetBundle<T> where T : Enum
        {
            #region Data Setters

            void SetName(string name);

            void SetType(T widgetType);
            void SetInitialVisibilityState(UIScreenWidgetVisibilityState initialVisibilityState);
            void SetContentContainerType(ContentContainerType containerType);
            void SetScreenUIPlacementType(ScreenUIPlacementType uIPlacementType);

            #endregion

            #region Data Getters

            CallbackData<ContentContainerType> GetContentContainerType();

            CallbackData<ScreenUIPlacementType> GetScreenUIPlacementType();

            CallbackData<UIScreenWidgetVisibilityState> GetInitialVisibilityState();

            #endregion
        }

        public interface IUIScreenData
        {
            //void Init(Action<CallbackData<ScreenUIData>> callBack = null);

            Task<CallbackData<Screen>> ShowViewAsync();

            Task<CallbackData<Screen>> HideViewSync();

            UIScreenWidgetVisibilityState GetUIScreenInitialVisibility();

            void Focus();

            void Blur(SceneDataPackets dataPackets);

            string GetScreenTitle();
            ScreenType GetUIScreenType();
        }

        public interface IUIComponent<V>
        {
            void SetTitle(string title);

            void SetUIColor(Color color);

            void SetInteractableState(bool interactable);

            bool GetInteractableState();

            void SetUIInputVisibilityState(bool visible);

            bool GetUIInputVisibilityState();

            void SetUIInputState(InputUIState state);

            void SetChildWidgetsState(bool interactable, bool isSelected);
        }

        public interface ILoadInstance
        {
            void AbortLoad();

            Task<Callback> ProcessLoad();
        }

        public interface IUIFaderComponent
        {
            void Init(UIScreenViewerComponent screenViewerComponent, Action<CallbackData<ScreenType>> callback = null);

            void SetFaderVisibilityValue(float value);
            CallbackData<float> GetOpacity();

            CallbackData<Screen> CanFadeInViewCallbackResults();
            CallbackData<Screen> CanFadeOutViewCallbackResults();

            Task<CallbackData<Screen>> FadeIn();

            Task<CallbackData<Screen>> FadeOut();
        }

        public interface ISettingsWidget
        {
            void ShowWidget();
            void HideWidget();
        }

        #region Commands

        public interface ICommand
        {
            void Execute();

            void Undo();
        }

        #endregion

        #endregion

        #region Singleton Template

        public class SingletonBaseComponent<T> : AppMonoBaseClass where T : AppMonoBaseClass
        {
            #region Componets Static Instance 

            private static T _instance;

            public static T Instance
            {
                get
                {
                    if(_instance == null)
                        _instance = FindObjectOfType<T>();

                    return _instance;
                }
            }

            #endregion


            #region Unity Callbacks

            private void Awake() => SetupInstance();

            #endregion

            #region Main

            private void SetupInstance()
            {
                DontDestroyOnLoad(this);

                if (_instance != null && _instance != this)
                {
                    Destroy(_instance.gameObject);
                }
                else
                    _instance = this as T;
            }

            #endregion
        }

        #endregion

        #region Events

        public enum EventType
        {
            None,
            OnInitializationInProgressEvent,
            OnInitializationCompletedEvent,
            OnAppAwake,
            OnAppStart,
            OnUpdate,
            OnLateUpdate,
            OnFixedUpdate
        }

        #region Event Actions

        #region Event Actrion Base

        [Serializable]
        public abstract class EventAction : DataDebugger
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private EventType eventType;

            bool isInitialized = false;

            #endregion

            #region Main

            public Callback Initialized()
            {
                Callback callbackResults = new Callback();

                if (isInitialized)
                {
                    callbackResults.result = $"Event Action : {GetName()} Of Type : {GetEventType()} Has Been Successfully Initialized.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()} Is Not Yet Initialized.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetName(string name) => this.name = name;

            public void SetEventType(EventType eventType) => this.eventType = eventType;

            protected void SetInitialized(bool isInitialized = true) => this.isInitialized = isInitialized;

            #endregion

            #region Data Getters

            public string GetName() => (!string.IsNullOrEmpty(name)) ? name : "Event Action Name Is Not Assigned.";

            public EventType GetEventType() => eventType;

            #endregion

            #region Event Triggers

            public void TriggeredEventMethod()
            {
                OnTriggeredEventMethod(callbackResults => 
                {
                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                
                });
            }

            public void TriggeredEventMethod<T>(T value)
            {
                OnTriggeredEventMethod((object)value, callbackResults => 
                {
                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);

                });
            }


            public void TriggeredEventMethod<T, U>(T valueA, U valueB)
            {
                OnTriggeredEventMethod((object)valueA, (object)valueB, callbackResults => 
                {
                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                });
            }


            public void TriggeredEventMethod<T, U, V>(T valueA, U valueB, V valueC)
            {
                OnTriggeredEventMethod((object)valueA, (object)valueB, (object)valueC, callbackResults => 
                {
                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                });
            }

            public void TriggeredEventMethod<T, U, V, W>(T valueA, U valueB, V valueC, W valueD)
            {
                OnTriggeredEventMethod((object)valueA, (object)valueB, (object)valueC, (object)valueD, callbackResults =>
                {
                    if (callbackResults.UnSuccessful())
                        Log(callbackResults.GetResultCode, callbackResults.GetResult, this);
                });
            }

            #endregion

            #region Event Abstract Methods

            protected abstract void OnTriggeredEventMethod(Action<Callback> callback = null);
            protected abstract void OnTriggeredEventMethod(object value, Action<Callback> callback = null);
            protected abstract void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null);
            protected abstract void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null);
            protected abstract void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null);

            #endregion

            #endregion
        }

        #endregion

        #region Event Action Data

        [Serializable]
        public class EventActionData : EventAction
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private UnityEvent eventMethod;

            #endregion

            #region Constructors

            public EventActionData()
            {

            }

            public EventActionData(string name, EventType eventType, UnityEvent eventMethod)
            {
                SetName(name);
                SetEventType(eventType);
                SetEventMethod(eventMethod);
            }

            #endregion

            #region Main

            private Callback IsInitialized()
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (this != null &&  callbackResults.Success())
                {
                    callbackResults.result = $"Event Action : {GetName()} - Of Type : {GetEventType()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action Has Not Been Initialized Yet - Type Results : {callbackResults.GetResult} - State Results : {callbackResults.GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetEventMethod(UnityEvent eventMethod)
            {
                this.eventMethod = eventMethod;

                if (IsInitialized().Success())
                    SetInitialized();
                else
                    Log(IsInitialized().GetResultCode, IsInitialized().GetResult, this);
            }

            #endregion


            #region Data Getters

            public CallbackData<UnityEvent> GetEventMethod()
            {
                CallbackData<UnityEvent> callbackResults = new CallbackData<UnityEvent>();
               
                if(eventMethod != null)
                {
                    if (GetEventType() != EventType.None)
                    {
                        callbackResults.result = $"Event Menthod For Event Action: {GetName()} - Of Type : {GetEventType()} Has Been Successfully Found.";
                        callbackResults.data = eventMethod;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Event Action : {GetName()}'s Event Type Is Set To Default : NONE - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()}'s Event Method Missing / Null / Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion


            #region Event Abstract Methods

            protected override void OnTriggeredEventMethod(Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (callbackResults.Success())
                {
                    var eventMethodData = GetEventMethod().GetData();
                    eventMethodData.Invoke();

                    callbackResults.result = $"Event Method For Action Data : {GetName()} - Of Type : {GetEventType()} Has Been Triggered Successfully.";
                }

                callback?.Invoke(callbackResults);
            }

            protected override void OnTriggeredEventMethod(object value, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class EventActionData<T> : EventAction where T : class
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private UnityEvent<T> eventMethod;

            #endregion

            #region Constructors

            public EventActionData()
            {

            }

            public EventActionData(string name, EventType eventType, UnityEvent<T> eventMethod)
            {
                SetName(name);
                SetEventType(eventType);
                SetEventMethod(eventMethod);
            }

            #endregion

            #region Main

            private Callback IsInitialized()
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (this != null && callbackResults.Success())
                {
                    callbackResults.result = $"Event Action : {GetName()} - Of Type : {GetEventType()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action Has Not Been Initialized Yet - Type Results : {callbackResults.GetResult} - State Results : {callbackResults.GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetEventMethod(UnityEvent<T> eventMethod)
            {
                this.eventMethod = eventMethod;

                if (IsInitialized().Success())
                    SetInitialized();
                else
                    Log(IsInitialized().GetResultCode, IsInitialized().GetResult, this);
            }

            #endregion


            #region Data Getters

            public CallbackData<UnityEvent<T>> GetEventMethod()
            {
                CallbackData<UnityEvent<T>> callbackResults = new CallbackData<UnityEvent<T>>();

                if (eventMethod != null)
                {
                    if (GetEventType() != EventType.None)
                    {
                        callbackResults.result = $"Event Menthod For Event Action: {GetName()} - Of Type : {GetEventType()} Has Been Successfully Found.";
                        callbackResults.data = eventMethod;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Event Action : {GetName()}'s Event Type Is Set To Default : NONE - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()}'s Event Method Missing / Null / Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion


            #region Event Abstract Methods

            protected override void OnTriggeredEventMethod(Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object value, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (callbackResults.Success())
                {
                    var eventMethodData = GetEventMethod().GetData();
                    eventMethodData.Invoke((T)value);

                    callbackResults.result = $"Event Method For Action Data : {GetName()} - Of Type : {GetEventType()} Has Been Triggered Successfully.";
                }

                callback?.Invoke(callbackResults);
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class EventActionData<T, U> : EventAction
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private UnityEvent<T, U> eventMethod;

            #endregion

            #region Constructors

            public EventActionData()
            {

            }

            public EventActionData(string name, EventType eventType, UnityEvent<T, U> eventMethod)
            {
                SetName(name);
                SetEventType(eventType);
                SetEventMethod(eventMethod);
            }

            #endregion

            #region Main

            private Callback IsInitialized()
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (this != null && callbackResults.Success())
                {
                    callbackResults.result = $"Event Action : {GetName()} - Of Type : {GetEventType()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action Has Not Been Initialized Yet - Type Results : {callbackResults.GetResult} - State Results : {callbackResults.GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetEventMethod(UnityEvent<T, U> eventMethod)
            {
                this.eventMethod = eventMethod;

                if (IsInitialized().Success())
                    SetInitialized();
                else
                    Log(IsInitialized().GetResultCode, IsInitialized().GetResult, this);
            }

            #endregion


            #region Data Getters

            public CallbackData<UnityEvent<T, U>> GetEventMethod()
            {
                CallbackData<UnityEvent<T, U>> callbackResults = new CallbackData<UnityEvent<T, U>>();

                if (eventMethod != null)
                {
                    if (GetEventType() != EventType.None)
                    {
                        callbackResults.result = $"Event Menthod For Event Action: {GetName()} - Of Type : {GetEventType()} Has Been Successfully Found.";
                        callbackResults.data = eventMethod;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Event Action : {GetName()}'s Event Type Is Set To Default : NONE - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()}'s Event Method Missing / Null / Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion



            #region Event Abstract Methods

            protected override void OnTriggeredEventMethod(Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object value, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (callbackResults.Success())
                {
                    var eventMethodData = GetEventMethod().GetData();
                    eventMethodData.Invoke((T)valueA, (U)valueB);

                    callbackResults.result = $"Event Method For Action Data : {GetName()} - Of Type : {GetEventType()} Has Been Triggered Successfully.";
                }

                callback?.Invoke(callbackResults);
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class EventActionData<T, U, V> : EventAction
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private UnityEvent<T, U, V> eventMethod;

            #endregion

            #region Constructors

            public EventActionData()
            {

            }

            public EventActionData(string name, EventType eventType, UnityEvent<T, U, V> eventMethod)
            {
                SetName(name);
                SetEventType(eventType);
                SetEventMethod(eventMethod);
            }

            #endregion

            #region Main

            private Callback IsInitialized()
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (this != null && callbackResults.Success())
                {
                    callbackResults.result = $"Event Action : {GetName()} - Of Type : {GetEventType()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action Has Not Been Initialized Yet - Type Results : {callbackResults.GetResult} - State Results : {callbackResults.GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetEventMethod(UnityEvent<T, U, V> eventMethod)
            {
                this.eventMethod = eventMethod;

                if (IsInitialized().Success())
                    SetInitialized();
                else
                    Log(IsInitialized().GetResultCode, IsInitialized().GetResult, this);
            }

            #endregion


            #region Data Getters

            public CallbackData<UnityEvent<T, U, V>> GetEventMethod()
            {
                CallbackData<UnityEvent<T, U, V>> callbackResults = new CallbackData<UnityEvent<T, U, V>>();

                if (eventMethod != null)
                {
                    if (GetEventType() != EventType.None)
                    {
                        callbackResults.result = $"Event Menthod For Event Action: {GetName()} - Of Type : {GetEventType()} Has Been Successfully Found.";
                        callbackResults.data = eventMethod;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Event Action : {GetName()}'s Event Type Is Set To Default : NONE - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()}'s Event Method Missing / Null / Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion


            #region Event Abstract Methods

            protected override void OnTriggeredEventMethod(Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object value, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (callbackResults.Success())
                {
                    var eventMethodData = GetEventMethod().GetData();
                    eventMethodData.Invoke((T)valueA, (U)valueB, (V)valueC);

                    callbackResults.result = $"Event Method For Action Data : {GetName()} - Of Type : {GetEventType()} Has Been Triggered Successfully.";
                }

                callback?.Invoke(callbackResults);
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            #endregion

            #endregion
        }

        [Serializable]
        public class EventActionData<T, U, V, W> : EventAction
        {
            #region Components

            [Space(5)]
            [SerializeField]
            private UnityEvent<T, U, V, W> eventMethod;

            #endregion

            #region Constructors

            public EventActionData()
            {

            }

            public EventActionData(string name, EventType eventType, UnityEvent<T, U, V, W> eventMethod)
            {
                SetName(name);
                SetEventType(eventType);
                SetEventMethod(eventMethod);
            }

            #endregion

            #region Main

            private Callback IsInitialized()
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (this != null && callbackResults.Success())
                {
                    callbackResults.result = $"Event Action : {GetName()} - Of Type : {GetEventType()} - Has Been Initialized Successfully.";
                    callbackResults.resultCode = Helpers.SuccessCode;
                }
                else
                {
                    callbackResults.result = $"Event Action Has Not Been Initialized Yet - Type Results : {callbackResults.GetResult} - State Results : {callbackResults.GetResult}.";
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #region Data Setters

            public void SetEventMethod(UnityEvent<T, U, V, W> eventMethod)
            {
                this.eventMethod = eventMethod;

                if (IsInitialized().Success())
                    SetInitialized();
                else
                    Log(IsInitialized().GetResultCode, IsInitialized().GetResult, this);
            }

            #endregion


            #region Data Getters

            public CallbackData<UnityEvent<T, U, V, W>> GetEventMethod()
            {
                CallbackData<UnityEvent<T, U, V, W>> callbackResults = new CallbackData<UnityEvent<T, U, V, W>>();

                if (eventMethod != null)
                {
                    if (GetEventType() != EventType.None)
                    {
                        callbackResults.result = $"Event Menthod For Event Action: {GetName()} - Of Type : {GetEventType()} Has Been Successfully Found.";
                        callbackResults.data = eventMethod;
                        callbackResults.resultCode = Helpers.SuccessCode;
                    }
                    else
                    {
                        callbackResults.result = $"Event Action : {GetName()}'s Event Type Is Set To Default : NONE - Invalid Operation.";
                        callbackResults.data = default;
                        callbackResults.resultCode = Helpers.ErrorCode;
                    }
                }
                else
                {
                    callbackResults.result = $"Event Action : {GetName()}'s Event Method Missing / Null / Not Yet Initialized.";
                    callbackResults.data = default;
                    callbackResults.resultCode = Helpers.ErrorCode;
                }

                return callbackResults;
            }

            #endregion


            #region Event Abstract Methods

            protected override void OnTriggeredEventMethod(Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object value, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, Action<Callback> callback = null)
            {
                throw new NotImplementedException($"On Trigger Event Action Failed - Event Method Type For Event Action Data : {GetName()} - Not Applicable For Event Type : {GetEventType()}");
            }

            protected override void OnTriggeredEventMethod(object valueA, object valueB, object valueC, object valueD, Action<Callback> callback = null)
            {
                Callback callbackResults = new Callback(GetEventMethod());

                if (callbackResults.Success())
                {
                    var eventMethodData = GetEventMethod().GetData();
                    eventMethodData.Invoke((T)valueA, (U)valueB, (V)valueC, (W)valueD);

                    callbackResults.result = $"Event Method For Action Data : {GetName()} - Of Type : {GetEventType()} Has Been Triggered Successfully.";
                }

                callback?.Invoke(callbackResults);
            }

            #endregion

            #endregion
        }

        #endregion

        #endregion

        public static class ActionEvents
        {
            #region Delegates

            // Void Delegates
            public delegate void Void();
            public delegate void ParamVoid<T>(T tValue);
            public delegate void ParamVoid<T, U>(T tValue, U uValue);
            public delegate void ParamVoid<T, U, V>(T tValue, U uValue, V vValue);
            public delegate void ParamVoid<T, U, V, W>(T tValue, U uValue, V vValue, W wValue);
            public delegate void ButtonAction<T>(UIButton<T> value);

            // Value Delegates
            public delegate Transform TransformNoParam();
            public delegate Transform TransformParam<T>(T tValue);

            #endregion

            #region Events

            public static event Void _OnClearPreviewedSceneAssetObjectEvent;
            public static event Void _OnSceneAssetsRemoved;
            public static event Void _OnAssetDeleteRefresh;
            public static event Void _OnScreenUIRefreshed;
            public static event Void _OnScreenPressAndHoldInput;
            public static event Void _OnScreenDoubleTapInput;
            public static event Void _OnClearAllAssetSelectionEvent;
            public static event Void _OnSceneModelPoseResetEvent;
            public static event Void _OnResetContaineToDefaultrPoseEvent;
            public static event Void _OnResetCameraToDefaultrPoseEvent;
            public static event Void _OnAppScreensInitializedEvent;
            public static event Void _OnDropDownContentDataInitializedEvent;
            public static event Void _OnscrollToTopEvent;

            public static event Void _OnWidgetSelectionEvent;
            public static event Void _OnWidgetSelectionAdded;
            public static event Void _OnWidgetDeselectionEvent;
            public static event Void _OnWidgetSelectionRemoved;

            public static event Void _OnInitializationInProgressEvent;
            public static event Void _OnInitializationCompletedEvent;

            #region Unity Events

            public static event Void _Enabled;
            public static event Void _Disabled;
            public static event Void _Awake;
            public static event Void _Start;
            public static event Void _Update;
            public static event Void _LateUpdate;
            public static event Void _FixedUpdate;

            #endregion

            public static event ParamVoid<ButtonDataPackets> _OnNavigationTabWidgetEvent;
            public static event ParamVoid<ScreenViewState> _OnScreenViewStateChangedEvent;
            public static event ParamVoid<NavigationTabID, NavigationRenderSettingsProfileID> _OnNavigationSubTabChangedEvent;
            public static event ParamVoid<SceneAsset> _OnCreatedAssetDataEditEvent;
            public static event ParamVoid<SceneDataPackets> _OnScreenChangeEvent;
            public static event ParamVoid<ScreenType> _OnScreenChangedEvent;
            public static event ParamVoid<ScreenType> _OnScreenExitEvent;
            public static event ParamVoid<Screen> _OnScreenRefreshed;
            public static event ParamVoid<WidgetType, InputActionButtonType, SceneDataPackets> _OnPopUpActionEvent;
            public static event ParamVoid<AssetModeType> _OnResetSceneAssetPreviewPoseEvent;
            public static event ParamVoid<ARSceneContentState> _OnARSceneAssetStateEvent;
            public static event ParamVoid<SceneEventCameraType> _OnSetCurrentActiveSceneCameraEvent;
            public static event ParamVoid<InputActionButtonType, bool, bool> _OnActionButtonFieldUploadedEvent;
            public static event ParamVoid<TogglableWidgetType, bool, bool> _OnScreenTogglableStateEvent;
            public static event ParamVoid<Quaternion> _OnUpdateSceneAssetDefaultRotation;
            public static event ParamVoid<SceneDataPackets> _OnTransitionSceneEventCamera;
            public static event ParamVoid<InputActionButtonType> _OnActionButtonClickedEvent;
            public static event ParamVoid<CheckboxInputActionType, bool> _OnActionCheckboxToggledEvent;
            public static event ParamVoid<bool, bool> _OnActionCheckboxStateEvent;
            public static event ParamVoid<bool> _OnPermissionGrantedResults;
            public static event ParamVoid<ColorInfo, bool, bool> _OnSwatchColorPickedEvent;
            public static event ParamVoid<bool> _OnToggleColorDropPickerEvent;
            public static event ParamVoid<AssetFieldType, StorageDirectoryData> _OnFilePickerDirectoryFieldSelectedEvent;
            public static event ParamVoid<string[]> _OnVoiceCommandResultsEvent;
            public static event ParamVoid<AudioType> _OnPlayAudioEvent;
            public static event ParamVoid<Vector2, bool> _OnScrollAndFocusToSelectionEvent;
            public static event ParamVoid<string> _OnNavigateAndFocusToSelectionEvent;
            public static event ParamVoid<bool> _OnAllWidgetsSelectionEvent;
            public static event ParamVoid<FocusedSelectionData> _OnWidgetsSelectionDataEvent;
            public static event ParamVoid<FocusedSelectionInfo<SceneDataPackets>> _OnWidgetSelectionDataEvent;

            public static event TransformNoParam _OnGetContentPreviewContainer;

            #endregion

            #region Callbacks

            public static void OnScreenDoubleTapInput() => _OnScreenDoubleTapInput?.Invoke();
            public static void OnAppScreensInitializedEvent() => _OnAppScreensInitializedEvent?.Invoke();
            public static void OnSceneModelPoseResetEvent() => _OnSceneModelPoseResetEvent?.Invoke();
            public static void OnResetContaineToDefaultPoseEvent() => _OnResetContaineToDefaultrPoseEvent?.Invoke();
            public static void OnResetCameraToDefaultPoseEvent() => _OnResetCameraToDefaultrPoseEvent?.Invoke();
            public static void OnDropDownContentDataInitializedEvent() => _OnDropDownContentDataInitializedEvent?.Invoke();
            public static void OnScreenPressAndHoldInput() => _OnScreenPressAndHoldInput?.Invoke();
            public static void OnClearAllAssetSelectionEvent() => _OnClearAllAssetSelectionEvent?.Invoke();
            public static void OnSceneAssetsRemoved() => _OnSceneAssetsRemoved?.Invoke();
            public static void OnAssetDeleteRefresh() => _OnAssetDeleteRefresh?.Invoke();
            public static void OnScreenUIRefreshed() => _OnScreenUIRefreshed?.Invoke();
            public static void OnscrollToTopEvent() => _OnscrollToTopEvent?.Invoke();
            public static void OnWidgetSelectionEvent() => _OnWidgetSelectionEvent?.Invoke();
            public static void OnWidgetSelectionAdded() => _OnWidgetSelectionAdded?.Invoke();
            public static void OnWidgetDeselectionEvent() => _OnWidgetDeselectionEvent?.Invoke();
            public static void OnWidgetSelectionRemoved() => _OnWidgetSelectionRemoved?.Invoke();

            public static void OnInitializationInProgressEvent() => _OnInitializationInProgressEvent?.Invoke();
            public static void OnInitializationCompletedEvent() => _OnInitializationCompletedEvent?.Invoke();

            #region Unity Event Callbacks

            public static void Enabled() => _Enabled?.Invoke();
            public static void Disabled() => _Disabled?.Invoke();
            public static void Awake() => _Awake?.Invoke();
            public static void Start() => _Start?.Invoke();
            public static void Update() => _Update?.Invoke();
            public static void LateUpdate() => _LateUpdate?.Invoke();
            public static void FixedUpdate() => _FixedUpdate?.Invoke();

            #endregion

            public static void OnNavigationTabWidgetEvent(ButtonDataPackets dataPackets) => _OnNavigationTabWidgetEvent?.Invoke(dataPackets);
            public static void OnNavigationSubTabChangedEvent(NavigationTabID navigationTab, NavigationRenderSettingsProfileID selectionTypedID) => _OnNavigationSubTabChangedEvent?.Invoke(navigationTab, selectionTypedID);
            public static void OnScreenViewStateChangedEvent(ScreenViewState state) => _OnScreenViewStateChangedEvent?.Invoke(state);
            public static void OnScreenExitEvent(ScreenType screenType) => _OnScreenExitEvent?.Invoke(screenType);
            public static void OnScreenTogglableStateEvent(TogglableWidgetType widgetType, bool state = false, bool useInteractability = false) => _OnScreenTogglableStateEvent?.Invoke(widgetType, state, useInteractability);
            public static void OnARSceneAssetStateEvent(ARSceneContentState contentState) => _OnARSceneAssetStateEvent?.Invoke(contentState);
            public static void OnPermissionGrantedResults(bool isGranted) => _OnPermissionGrantedResults?.Invoke(isGranted);
            public static void OnSetCurrentActiveSceneCameraEvent(SceneEventCameraType eventCameraType) => _OnSetCurrentActiveSceneCameraEvent?.Invoke(eventCameraType);
            public static void OnResetSceneAssetPreviewPoseEvent(AssetModeType assetModeType) => _OnResetSceneAssetPreviewPoseEvent?.Invoke(assetModeType);
            public static void OnUpdateSceneAssetDefaultRotation(Quaternion rotation) => _OnUpdateSceneAssetDefaultRotation?.Invoke(rotation);
            public static void OnActionButtonClicked(InputActionButtonType actionType) => _OnActionButtonClickedEvent?.Invoke(actionType);
            public static void OnActionCheckboxToggledEvent(CheckboxInputActionType actionType, bool value) => _OnActionCheckboxToggledEvent?.Invoke(actionType, value);
            public static void OnCreatedAssetDataEditEvent(SceneAsset asset) => _OnCreatedAssetDataEditEvent?.Invoke(asset);
            public static void OnScreenChangeEvent(SceneDataPackets dataPackets) => _OnScreenChangeEvent?.Invoke(dataPackets);
            public static void OnScreenChangedEvent(ScreenType screenType) => _OnScreenChangedEvent?.Invoke(screenType);
            public static void OnScreenRefreshed(Screen screenData) => _OnScreenRefreshed?.Invoke(screenData);
            public static void OnActionButtonFieldUploadedEvent(InputActionButtonType actionType = InputActionButtonType.None, bool interactable = false, bool isSelected = false) => _OnActionButtonFieldUploadedEvent?.Invoke(actionType, interactable, isSelected);
            public static void OnClearPreviewedSceneAssetObjectEvent() => _OnClearPreviewedSceneAssetObjectEvent?.Invoke();
            public static void OnPopUpActionEvent(WidgetType popUpType, InputActionButtonType actionType, SceneDataPackets dataPackets) => _OnPopUpActionEvent?.Invoke(popUpType, actionType, dataPackets);
            public static void OnTransitionSceneEventCamera(SceneDataPackets dataPackets) => _OnTransitionSceneEventCamera?.Invoke(dataPackets);
            public static void OnActionCheckboxStateEvent(bool interactable, bool visible) => _OnActionCheckboxStateEvent?.Invoke(interactable, visible);
            public static void OnSwatchColorPickedEvent(ColorInfo colorID, bool fromButtonPress, bool onOpenColorSettings) => _OnSwatchColorPickedEvent?.Invoke(colorID, fromButtonPress, onOpenColorSettings);
            public static void OnToggleColorDropPickerEvent(bool enabled) => _OnToggleColorDropPickerEvent?.Invoke(enabled);
            public static void OnFilePickerDirectoryFieldSelectedEvent(AssetFieldType fieldType, StorageDirectoryData directoryData) => _OnFilePickerDirectoryFieldSelectedEvent?.Invoke(fieldType, directoryData);
            public static void OnVoiceCommandResultsEvent(string[] commands) => _OnVoiceCommandResultsEvent?.Invoke(commands);
            public static void OnPlayAudioEvent(AudioType audioType) => _OnPlayAudioEvent?.Invoke(audioType);
            public static void ScrollAndFocusToSelectionEvent(Vector2 position, bool transition = false) => _OnScrollAndFocusToSelectionEvent?.Invoke(position, transition);
            public static void OnNavigateAndFocusToSelectionEvent(string widgetName) => _OnNavigateAndFocusToSelectionEvent?.Invoke(widgetName);
            public static void OnAllWidgetsSelectionEvent(bool currentPage = false) => _OnAllWidgetsSelectionEvent?.Invoke(currentPage);
            public static void OnWidgetSelectionEvent(FocusedSelectionInfo<SceneDataPackets> selectionInfo) => _OnWidgetSelectionDataEvent?.Invoke(selectionInfo);
            public static void OnWidgetsSelectionEvent(FocusedSelectionData selectionData) => _OnWidgetsSelectionDataEvent?.Invoke(selectionData);

            public static Transform OnGetContentPreviewContainer()
            {
                return _OnGetContentPreviewContainer?.Invoke();
            }

            #endregion

            #region Actions Events

            public static void OnEventActionSubscription(EventAction eventAction, bool subscribe = true, Action<CallbackData<EventAction>> callback = null)
            {
                CallbackData<EventAction> callbackResults = new CallbackData<EventAction>(eventAction.Initialized());

                if (callbackResults.Success())
                {
                    switch (eventAction.GetEventType())
                    {
                        case EventType.OnInitializationInProgressEvent:

                            if (subscribe)
                                _OnInitializationInProgressEvent += eventAction.TriggeredEventMethod;
                            else
                                _OnInitializationInProgressEvent -= eventAction.TriggeredEventMethod;

                            break;

                        case EventType.OnInitializationCompletedEvent:

                            if (subscribe)
                                _OnInitializationCompletedEvent += eventAction.TriggeredEventMethod;
                            else
                                _OnInitializationCompletedEvent -= eventAction.TriggeredEventMethod;

                            break;

                        case EventType.OnUpdate:

                            if (subscribe)
                                _Update += eventAction.TriggeredEventMethod;
                            else
                                _Update -= eventAction.TriggeredEventMethod;

                            break;
                    }

                    var results = (subscribe) ? "Subcribed" : "Un-Subscribed";

                    callbackResults.result = $"Event Action : {eventAction.GetName()} - Has Been Successfully : {results}.";
                    callbackResults.data = eventAction;
                }

                callback?.Invoke(callbackResults);
            }

            #endregion
        }

        #endregion
    }

    public static class AppDataExtensions
    {
        public static List<List<T>> GetSubList<T>(this List<T> source, int subListSize)
        {
            return source.Select((x, i) => new { Index = i, Value = x }).GroupBy(x => x.Index / subListSize).Select(x => x.Select(v => v.Value).ToList()).ToList();
        }
    }
}